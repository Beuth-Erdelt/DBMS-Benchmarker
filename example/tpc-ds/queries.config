{
	'name': "The TPC-DS Queries",
	'intro': "This includes the reading queries of TPC-DS.",
	'factor': 'mean',
	'connectionmanagement': {
		'timeout': 900,
		#'numProcesses': 1,
		#'runsPerConnection': 0,
		#'singleConnection': True
	},
	'queries':
	[
	{
		'title': "TPC-DS Q1",
		'query': """with customer_total_return as
		(select sr_customer_sk as ctr_customer_sk
			,sr_store_sk as ctr_store_sk
			,sum({AGG_FIELD}) as ctr_total_return
		from store_returns
			,date_dim
		where sr_returned_date_sk = d_date_sk
			and d_year ={YEAR}
		group by sr_customer_sk
			,sr_store_sk)
		select c_customer_id
		from customer_total_return ctr1
			,store
			,customer
		where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
		from customer_total_return ctr2
		where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
			and s_store_sk = ctr1.ctr_store_sk
			and s_state = '{STATE}'
			and ctr1.ctr_customer_sk = c_customer_sk
		order by c_customer_id
		limit 100""",
		'parameter':
		{
			'AGG_FIELD': {
				'type': "list",
				'range': ["SR_RETURN_AMT","SR_FEE","SR_REFUNDED_CASH","SR_RETURN_AMT_INC_TAX","SR_REVERSED_CHARGE","SR_STORE_CREDIT","SR_RETURN_TAX"]
			},
			'STATE': {
				'type': "list",
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q2",
		'query': """with wscs as
			(select sold_date_sk
					,sales_price
			from (select ws_sold_date_sk sold_date_sk
						,ws_ext_sales_price sales_price
					from web_sales 
					union all
					select cs_sold_date_sk sold_date_sk
						,cs_ext_sales_price sales_price
					from catalog_sales) x ),
			wswscs as 
			(select d_week_seq,
					sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales,
					sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales,
					sum(case when (d_day_name='Tuesday') then sales_price else  null end) tue_sales,
					sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales,
					sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales,
					sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales,
					sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales
			from wscs
				,date_dim
			where d_date_sk = sold_date_sk
			group by d_week_seq)
			select d_week_seq1
				,round(sun_sales1/sun_sales2,2) sun_sales
				,round(mon_sales1/mon_sales2,2) mon_sales
				,round(tue_sales1/tue_sales2,2) tue_sales
				,round(wed_sales1/wed_sales2,2) wed_sales
				,round(thu_sales1/thu_sales2,2) thu_sales
				,round(fri_sales1/fri_sales2,2) fri_sales
				,round(sat_sales1/sat_sales2,2) sat_sales
			from
			(select wswscs.d_week_seq d_week_seq1
				,sun_sales sun_sales1
				,mon_sales mon_sales1
				,tue_sales tue_sales1
				,wed_sales wed_sales1
				,thu_sales thu_sales1
				,fri_sales fri_sales1
				,sat_sales sat_sales1
			from wswscs,date_dim 
			where date_dim.d_week_seq = wswscs.d_week_seq and
				d_year =1998) y,
			(select wswscs.d_week_seq d_week_seq2
				,sun_sales sun_sales2
				,mon_sales mon_sales2
				,tue_sales tue_sales2
				,wed_sales wed_sales2
				,thu_sales thu_sales2
				,fri_sales fri_sales2
				,sat_sales sat_sales2
			from wswscs
				,date_dim 
			where date_dim.d_week_seq = wswscs.d_week_seq and
				d_year =1999) z
			where d_week_seq1=d_week_seq2-53
			order by d_week_seq1""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2001]
			}
			,
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q3",
		'query': """select dt.d_year 
			,item.i_brand_id AS brand_id 
			,item.i_brand AS brand
			,sum({AGGC}) AS sum_agg
		from  date_dim dt 
			,store_sales
			,item
		where dt.d_date_sk = store_sales.ss_sold_date_sk
			and store_sales.ss_item_sk = item.i_item_sk
			and item.i_manufact_id = {MANUFACT}
			and dt.d_moy={MONTH}
		group by dt.d_year
			,brand
			,brand_id
		order by dt.d_year
			,sum_agg desc
			,brand_id
		limit 100""",
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [11,12]
			},
			'MANUFACT': {
				'type': "integer",
				'range': [1,1000]
			},
			'AGGC': {
				'type': "list",
				'range': ["ss_ext_sales_price","ss_sales_price","ss_ext_discount_amt","ss_net_profit"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q4",
		'query': """with year_total as (
		select c_customer_id customer_id
			,c_first_name customer_first_name
			,c_last_name customer_last_name
			,c_preferred_cust_flag customer_preferred_cust_flag
			,c_birth_country customer_birth_country
			,c_login customer_login
			,c_email_address customer_email_address
			,d_year dyear
			,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
			,'s' sale_type
		from customer
			,store_sales
			,date_dim
		where c_customer_sk = ss_customer_sk
		and ss_sold_date_sk = d_date_sk
		group by c_customer_id
				,c_first_name
				,c_last_name
				,c_preferred_cust_flag
				,c_birth_country
				,c_login
				,c_email_address
				,d_year
		union all
		select c_customer_id customer_id
			,c_first_name customer_first_name
			,c_last_name customer_last_name
			,c_preferred_cust_flag customer_preferred_cust_flag
			,c_birth_country customer_birth_country
			,c_login customer_login
			,c_email_address customer_email_address
			,d_year dyear
			,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
			,'c' sale_type
		from customer
			,catalog_sales
			,date_dim
		where c_customer_sk = cs_bill_customer_sk
		and cs_sold_date_sk = d_date_sk
		group by c_customer_id
				,c_first_name
				,c_last_name
				,c_preferred_cust_flag
				,c_birth_country
				,c_login
				,c_email_address
				,d_year
		union all
		select c_customer_id customer_id
			,c_first_name customer_first_name
			,c_last_name customer_last_name
			,c_preferred_cust_flag customer_preferred_cust_flag
			,c_birth_country customer_birth_country
			,c_login customer_login
			,c_email_address customer_email_address
			,d_year dyear
			,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
			,'w' sale_type
		from customer
			,web_sales
			,date_dim
		where c_customer_sk = ws_bill_customer_sk
		and ws_sold_date_sk = d_date_sk
		group by c_customer_id
				,c_first_name
				,c_last_name
				,c_preferred_cust_flag
				,c_birth_country
				,c_login
				,c_email_address
				,d_year
				)
		select 
						t_s_secyear.customer_id
						,t_s_secyear.customer_first_name
						,t_s_secyear.customer_last_name
						,{SELECTONE}
		from year_total t_s_firstyear
			,year_total t_s_secyear
			,year_total t_c_firstyear
			,year_total t_c_secyear
			,year_total t_w_firstyear
			,year_total t_w_secyear
		where t_s_secyear.customer_id = t_s_firstyear.customer_id
		and t_s_firstyear.customer_id = t_c_secyear.customer_id
		and t_s_firstyear.customer_id = t_c_firstyear.customer_id
		and t_s_firstyear.customer_id = t_w_firstyear.customer_id
		and t_s_firstyear.customer_id = t_w_secyear.customer_id
		and t_s_firstyear.sale_type = 's'
		and t_c_firstyear.sale_type = 'c'
		and t_w_firstyear.sale_type = 'w'
		and t_s_secyear.sale_type = 's'
		and t_c_secyear.sale_type = 'c'
		and t_w_secyear.sale_type = 'w'
		and t_s_firstyear.dyear =  {YEAR}
		and t_s_secyear.dyear = {YEAR}+1
		and t_c_firstyear.dyear =  {YEAR}
		and t_c_secyear.dyear =  {YEAR}+1
		and t_w_firstyear.dyear = {YEAR}
		and t_w_secyear.dyear = {YEAR}+1
		and t_s_firstyear.year_total > 0
		and t_c_firstyear.year_total > 0
		and t_w_firstyear.year_total > 0
		and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
				> case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
		and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
				> case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
		order by t_s_secyear.customer_id
				,t_s_secyear.customer_first_name
				,t_s_secyear.customer_last_name
				,{SELECTONE}
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2001]
			},
			'SELECTONE': {
				'type': "list",
				'range': ["t_s_secyear.customer_preferred_cust_flag","t_s_secyear.customer_birth_country","t_s_secyear.customer_login","t_s_secyear.customer_email_address"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q5",
		'query': """ with ssr as
		(select s_store_id,
				sum(sales_price) as sales,
				sum(profit) as profit,
				sum(return_amt) as returns_angepasst,
				sum(net_loss) as profit_loss
		from
		( select  ss_store_sk as store_sk,
					ss_sold_date_sk  as date_sk,
					ss_ext_sales_price as sales_price,
					ss_net_profit as profit,
					cast(0 as decimal(7,2)) as return_amt,
					cast(0 as decimal(7,2)) as net_loss
			from store_sales
			union all
			select sr_store_sk as store_sk,
				sr_returned_date_sk as date_sk,
				cast(0 as decimal(7,2)) as sales_price,
				cast(0 as decimal(7,2)) as profit,
				sr_return_amt as return_amt,
				sr_net_loss as net_loss
			from store_returns
		) salesreturns,
			date_dim,
			store
		where date_sk = d_date_sk
			and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date) 
						and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
			and store_sk = s_store_sk
		group by s_store_id)
		,
		csr as
		(select cp_catalog_page_id,
				sum(sales_price) as sales,
				sum(profit) as profit,
				sum(return_amt) as returns_angepasst,
				sum(net_loss) as profit_loss
		from
		( select  cs_catalog_page_sk as page_sk,
					cs_sold_date_sk  as date_sk,
					cs_ext_sales_price as sales_price,
					cs_net_profit as profit,
					cast(0 as decimal(7,2)) as return_amt,
					cast(0 as decimal(7,2)) as net_loss
			from catalog_sales
			union all
			select cr_catalog_page_sk as page_sk,
				cr_returned_date_sk as date_sk,
				cast(0 as decimal(7,2)) as sales_price,
				cast(0 as decimal(7,2)) as profit,
				cr_return_amount as return_amt,
				cr_net_loss as net_loss
			from catalog_returns
		) salesreturns,
			date_dim,
			catalog_page
		where date_sk = d_date_sk
			and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
						and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
			and page_sk = cp_catalog_page_sk
		group by cp_catalog_page_id)
		,
		wsr as
		(select web_site_id,
				sum(sales_price) as sales,
				sum(profit) as profit,
				sum(return_amt) as returns_angepasst,
				sum(net_loss) as profit_loss
		from
		( select  ws_web_site_sk as wsr_web_site_sk,
					ws_sold_date_sk  as date_sk,
					ws_ext_sales_price as sales_price,
					ws_net_profit as profit,
					cast(0 as decimal(7,2)) as return_amt,
					cast(0 as decimal(7,2)) as net_loss
			from web_sales
			union all
			select ws_web_site_sk as wsr_web_site_sk,
				wr_returned_date_sk as date_sk,
				cast(0 as decimal(7,2)) as sales_price,
				cast(0 as decimal(7,2)) as profit,
				wr_return_amt as return_amt,
				wr_net_loss as net_loss
			from web_returns left outer join web_sales on
				( wr_item_sk = ws_item_sk
				and wr_order_number = ws_order_number)
		) salesreturns,
			date_dim,
			web_site
		where date_sk = d_date_sk
			and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
						and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
			and wsr_web_site_sk = web_site_sk
		group by web_site_id)
		select channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
		from 
		(select 'store channel' as channel
				, concat('store', s_store_id) as id
				, sales
				, returns_angepasst
				, (profit - profit_loss) as profit
		from   ssr
		union all
		select 'catalog channel' as channel
				, concat('catalog_page', cp_catalog_page_id) as id
				, sales
				, returns_angepasst
				, (profit - profit_loss) as profit
		from  csr
		union all
		select 'web channel' as channel
				, concat('web_site', web_site_id) as id
				, sales
				, returns_angepasst
				, (profit - profit_loss) as profit
		from   wsr
		) x
		group by channel, id with rollup
		order by channel is not null, channel
		,id is not null, id
		limit 100""",
		'DBMS': {
			'MariaDB': """with total as (
			    with ssr as
				(select s_store_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  ss_store_sk as store_sk,
							ss_sold_date_sk  as date_sk,
							ss_ext_sales_price as sales_price,
							ss_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from store_sales
					union all
					select sr_store_sk as store_sk,
						sr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						sr_return_amt as return_amt,
						sr_net_loss as net_loss
					from store_returns
				) salesreturns,
					date_dim,
					store
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date) 
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and store_sk = s_store_sk
				group by s_store_id)
				,
				csr as
				(select cp_catalog_page_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  cs_catalog_page_sk as page_sk,
							cs_sold_date_sk  as date_sk,
							cs_ext_sales_price as sales_price,
							cs_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from catalog_sales
					union all
					select cr_catalog_page_sk as page_sk,
						cr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						cr_return_amount as return_amt,
						cr_net_loss as net_loss
					from catalog_returns
				) salesreturns,
					date_dim,
					catalog_page
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and page_sk = cp_catalog_page_sk
				group by cp_catalog_page_id)
				,
				wsr as
				(select web_site_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  ws_web_site_sk as wsr_web_site_sk,
							ws_sold_date_sk  as date_sk,
							ws_ext_sales_price as sales_price,
							ws_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from web_sales
					union all
					select ws_web_site_sk as wsr_web_site_sk,
						wr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						wr_return_amt as return_amt,
						wr_net_loss as net_loss
					from web_returns left outer join web_sales on
						( wr_item_sk = ws_item_sk
						and wr_order_number = ws_order_number)
				) salesreturns,
					date_dim,
					web_site
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and wsr_web_site_sk = web_site_sk
				group by web_site_id)
				select channel
						, id
						, sum(sales) as sales
						, sum(returns_angepasst) as returns_angepasst
						, sum(profit) as profit
				from 
				(select 'store channel' as channel
						, concat('store', s_store_id) as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from   ssr
				union all
				select 'catalog channel' as channel
						, concat('catalog_page', cp_catalog_page_id) as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from  csr
				union all
				select 'web channel' as channel
						, concat('web_site', web_site_id) as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from   wsr
				) x
				group by channel, id with rollup
				)
				select * from total 
				order by channel is not null, channel
				,id is not null, id
                limit 100""",
				'MonetDB': """ with ssr as
				(select s_store_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  ss_store_sk as store_sk,
							ss_sold_date_sk  as date_sk,
							ss_ext_sales_price as sales_price,
							ss_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from store_sales
					union all
					select sr_store_sk as store_sk,
						sr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						sr_return_amt as return_amt,
						sr_net_loss as net_loss
					from store_returns
				) salesreturns,
					date_dim,
					store
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date) 
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and store_sk = s_store_sk
				group by s_store_id)
				,
				csr as
				(select cp_catalog_page_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  cs_catalog_page_sk as page_sk,
							cs_sold_date_sk  as date_sk,
							cs_ext_sales_price as sales_price,
							cs_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from catalog_sales
					union all
					select cr_catalog_page_sk as page_sk,
						cr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						cr_return_amount as return_amt,
						cr_net_loss as net_loss
					from catalog_returns
				) salesreturns,
					date_dim,
					catalog_page
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and page_sk = cp_catalog_page_sk
				group by cp_catalog_page_id)
				,
				wsr as
				(select web_site_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  ws_web_site_sk as wsr_web_site_sk,
							ws_sold_date_sk  as date_sk,
							ws_ext_sales_price as sales_price,
							ws_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from web_sales
					union all
					select ws_web_site_sk as wsr_web_site_sk,
						wr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						wr_return_amt as return_amt,
						wr_net_loss as net_loss
					from web_returns left outer join web_sales on
						( wr_item_sk = ws_item_sk
						and wr_order_number = ws_order_number)
				) salesreturns,
					date_dim,
					web_site
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and wsr_web_site_sk = web_site_sk
				group by web_site_id)
				select channel
						, id
						, sum(sales) as sales
						, sum(returns_angepasst) as returns_angepasst
						, sum(profit) as profit
				from 
				(select 'store channel' as channel
						, 'store' || s_store_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from   ssr
				union all
				select 'catalog channel' as channel
						, 'catalog_page' || cp_catalog_page_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from  csr
				union all
				select 'web channel' as channel
						, 'web_site' || web_site_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from   wsr
				) x
				group by rollup(channel, id)
				order by channel
						,id
				limit 100""",
				'PostgreSQL': """ with ssr as
				(select s_store_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  ss_store_sk as store_sk,
							ss_sold_date_sk  as date_sk,
							ss_ext_sales_price as sales_price,
							ss_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from store_sales
					union all
					select sr_store_sk as store_sk,
						sr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						sr_return_amt as return_amt,
						sr_net_loss as net_loss
					from store_returns
				) salesreturns,
					date_dim,
					store
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date) 
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and store_sk = s_store_sk
				group by s_store_id)
				,
				csr as
				(select cp_catalog_page_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  cs_catalog_page_sk as page_sk,
							cs_sold_date_sk  as date_sk,
							cs_ext_sales_price as sales_price,
							cs_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from catalog_sales
					union all
					select cr_catalog_page_sk as page_sk,
						cr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						cr_return_amount as return_amt,
						cr_net_loss as net_loss
					from catalog_returns
				) salesreturns,
					date_dim,
					catalog_page
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and page_sk = cp_catalog_page_sk
				group by cp_catalog_page_id)
				,
				wsr as
				(select web_site_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  ws_web_site_sk as wsr_web_site_sk,
							ws_sold_date_sk  as date_sk,
							ws_ext_sales_price as sales_price,
							ws_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from web_sales
					union all
					select ws_web_site_sk as wsr_web_site_sk,
						wr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						wr_return_amt as return_amt,
						wr_net_loss as net_loss
					from web_returns left outer join web_sales on
						( wr_item_sk = ws_item_sk
						and wr_order_number = ws_order_number)
				) salesreturns,
					date_dim,
					web_site
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and wsr_web_site_sk = web_site_sk
				group by web_site_id)
				select channel
						, id
						, sum(sales) as sales
						, sum(returns_angepasst) as returns_angepasst
						, sum(profit) as profit
				from 
				(select 'store channel' as channel
						, 'store' || s_store_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from   ssr
				union all
				select 'catalog channel' as channel
						, 'catalog_page' || cp_catalog_page_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from  csr
				union all
				select 'web channel' as channel
						, 'web_site' || web_site_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from   wsr
				) x
				group by rollup(channel, id)
				order by channel is not null, channel
				,id is not null, id
				limit 100""",
				'Exasol': """ with ssr as
				(select s_store_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  ss_store_sk as store_sk,
							ss_sold_date_sk  as date_sk,
							ss_ext_sales_price as sales_price,
							ss_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from store_sales
					union all
					select sr_store_sk as store_sk,
						sr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						sr_return_amt as return_amt,
						sr_net_loss as net_loss
					from store_returns
				) salesreturns,
					date_dim,
					store
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date) 
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and store_sk = s_store_sk
				group by s_store_id)
				,
				csr as
				(select cp_catalog_page_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  cs_catalog_page_sk as page_sk,
							cs_sold_date_sk  as date_sk,
							cs_ext_sales_price as sales_price,
							cs_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from catalog_sales
					union all
					select cr_catalog_page_sk as page_sk,
						cr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						cr_return_amount as return_amt,
						cr_net_loss as net_loss
					from catalog_returns
				) salesreturns,
					date_dim,
					catalog_page
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and page_sk = cp_catalog_page_sk
				group by cp_catalog_page_id)
				,
				wsr as
				(select web_site_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  ws_web_site_sk as wsr_web_site_sk,
							ws_sold_date_sk  as date_sk,
							ws_ext_sales_price as sales_price,
							ws_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from web_sales
					union all
					select ws_web_site_sk as wsr_web_site_sk,
						wr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						wr_return_amt as return_amt,
						wr_net_loss as net_loss
					from web_returns left outer join web_sales on
						( wr_item_sk = ws_item_sk
						and wr_order_number = ws_order_number)
				) salesreturns,
					date_dim,
					web_site
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and wsr_web_site_sk = web_site_sk
				group by web_site_id)
				select channel
						, id
						, sum(sales) as sales
						, sum(returns_angepasst) as returns_angepasst
						, sum(profit) as profit
				from 
				(select 'store channel' as channel
						, 'store' || s_store_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from   ssr
				union all
				select 'catalog channel' as channel
						, 'catalog_page' || cp_catalog_page_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from  csr
				union all
				select 'web channel' as channel
						, 'web_site' || web_site_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from   wsr
				) x
				group by rollup(channel, id)
				order by channel
						,id
				limit 100""",
				'MemSQL': """ with ssr as
				(select s_store_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  ss_store_sk as store_sk,
							ss_sold_date_sk  as date_sk,
							ss_ext_sales_price as sales_price,
							ss_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from store_sales
					union all
					select sr_store_sk as store_sk,
						sr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						sr_return_amt as return_amt,
						sr_net_loss as net_loss
					from store_returns
				) salesreturns,
					date_dim,
					store
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date) 
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and store_sk = s_store_sk
				group by s_store_id)
				,
				csr as
				(select cp_catalog_page_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  cs_catalog_page_sk as page_sk,
							cs_sold_date_sk  as date_sk,
							cs_ext_sales_price as sales_price,
							cs_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from catalog_sales
					union all
					select cr_catalog_page_sk as page_sk,
						cr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						cr_return_amount as return_amt,
						cr_net_loss as net_loss
					from catalog_returns
				) salesreturns,
					date_dim,
					catalog_page
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and page_sk = cp_catalog_page_sk
				group by cp_catalog_page_id)
				,
				wsr as
				(select web_site_id,
						sum(sales_price) as sales,
						sum(profit) as profit,
						sum(return_amt) as returns_angepasst,
						sum(net_loss) as profit_loss
				from
				( select  ws_web_site_sk as wsr_web_site_sk,
							ws_sold_date_sk  as date_sk,
							ws_ext_sales_price as sales_price,
							ws_net_profit as profit,
							cast(0 as decimal(7,2)) as return_amt,
							cast(0 as decimal(7,2)) as net_loss
					from web_sales
					union all
					select ws_web_site_sk as wsr_web_site_sk,
						wr_returned_date_sk as date_sk,
						cast(0 as decimal(7,2)) as sales_price,
						cast(0 as decimal(7,2)) as profit,
						wr_return_amt as return_amt,
						wr_net_loss as net_loss
					from web_returns left outer join web_sales on
						( wr_item_sk = ws_item_sk
						and wr_order_number = ws_order_number)
				) salesreturns,
					date_dim,
					web_site
				where date_sk = d_date_sk
					and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date)
								and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '14' day)
					and wsr_web_site_sk = web_site_sk
				group by web_site_id)
				select channel
						, id
						, sum(sales) as sales
						, sum(returns_angepasst) as returns_angepasst
						, sum(profit) as profit
				from 
				(select 'store channel' as channel
						, 'store' || s_store_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from   ssr
				union all
				select 'catalog channel' as channel
						, 'catalog_page' || cp_catalog_page_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from  csr
				union all
				select 'web channel' as channel
						, 'web_site' || web_site_id as id
						, sales
						, returns_angepasst
						, (profit - profit_loss) as profit
				from   wsr
				) x
				group by rollup(channel, id)
				order by channel
						,id
				limit 100"""
		},
		'parameter':
		{
			'DAY': {
				'type': "integer",
				'range': [1,30]
			},
			'MONTH': {
				'type': "integer",
				'range': [8,8]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q6",
		'query': """select a.ca_state AS state, count(*) cnt
		from customer_address a
			,customer c
			,store_sales s
			,date_dim d
			,item i
		where a.ca_address_sk = c.c_current_addr_sk
		and c.c_customer_sk = s.ss_customer_sk
		and s.ss_sold_date_sk = d.d_date_sk
		and s.ss_item_sk = i.i_item_sk
		and d.d_month_seq = 
			(select distinct (d_month_seq)
			from date_dim
			where d_year = {YEAR}
				and d_moy = {MONTH} )
				and i.i_current_price > 1.2 * 
			(select avg(j.i_current_price) 
			from item j 
			where j.i_category = i.i_category)
		group by a.ca_state
		having count(*) >= 10
		order by cnt, a.ca_state 
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'MONTH': {
				'type': "integer",
				'range': [1,7]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q7",
		'query': """ select i_item_id, 
		avg(ss_quantity) agg1,
		avg(ss_list_price) agg2,
		avg(ss_coupon_amt) agg3,
		avg(ss_sales_price) agg4 
		from store_sales, customer_demographics, date_dim, item, promotion
		where ss_sold_date_sk = d_date_sk and
			ss_item_sk = i_item_sk and
			ss_cdemo_sk = cd_demo_sk and
			ss_promo_sk = p_promo_sk and
			cd_gender = '{GEN}' and 
			cd_marital_status = '{MS}' and
			cd_education_status = '{ES}' and
			(p_channel_email = 'N' or p_channel_event = 'N') and
			d_year = {YEAR} 
		group by i_item_id
		order by i_item_id
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'MS': {
				'type': "list",
				'range': ["M","S","D","W","U"]
			},
			'GEN': {
				'type': "list",
				'range': ["M","F"]
			},
			'ES': {
				'type': "list",
				'range': ["Primary","Secondary","College","2 yr Degree","4 yr Degree", "Advanced Degree","Unknown"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q8",
		'query': """ select s_store_name
			,sum(ss_net_profit) as sum_net_profit
		from store_sales
			,date_dim
		,store,
		(select ca_zip
		from (
		SELECT substr(ca_zip,1,5) ca_zip
		FROM customer_address
		WHERE substr(ca_zip,1,5) IN (
							'{ZIP1}','{ZIP2}','{ZIP3}','{ZIP4}','{ZIP5}','{ZIP6}',
							'{ZIP7}','{ZIP8}','{ZIP9}','{ZIP10}','{ZIP11}',
							'{ZIP12}','{ZIP13}','{ZIP14}','{ZIP15}','{ZIP16}',
							'{ZIP17}','{ZIP18}','{ZIP19}','{ZIP20}','{ZIP21}',
							'{ZIP22}','{ZIP23}','{ZIP24}','{ZIP25}','{ZIP26}',
							'{ZIP27}','{ZIP28}','{ZIP29}','{ZIP30}','{ZIP31}',
							'{ZIP32}','{ZIP33}','{ZIP34}','{ZIP35}','{ZIP36}',
							'{ZIP37}','{ZIP38}','{ZIP39}','{ZIP40}','{ZIP41}',
							'{ZIP42}','{ZIP43}','{ZIP44}','{ZIP45}','{ZIP46}',
							'{ZIP47}','{ZIP48}','{ZIP49}','{ZIP50}','{ZIP51}',
							'{ZIP52}','{ZIP53}','{ZIP54}','{ZIP55}','{ZIP56}',
							'{ZIP57}','{ZIP58}','{ZIP59}','{ZIP60}','{ZIP61}',
							'{ZIP62}','{ZIP63}','{ZIP64}','{ZIP65}','{ZIP66}',
							'{ZIP67}','{ZIP68}','{ZIP69}','{ZIP70}','{ZIP71}',
							'{ZIP72}','{ZIP73}','{ZIP74}','{ZIP75}','{ZIP76}',
							'{ZIP77}','{ZIP78}','{ZIP79}','{ZIP80}','{ZIP81}',
							'{ZIP82}','{ZIP83}','{ZIP84}','{ZIP85}','{ZIP86}',
							'{ZIP87}','{ZIP88}','{ZIP89}','{ZIP90}','{ZIP91}',
							'{ZIP92}','{ZIP93}','{ZIP94}','{ZIP95}','{ZIP96}',
							'{ZIP97}','{ZIP98}','{ZIP99}','{ZIP100}','{ZIP101}',
							'{ZIP102}','{ZIP103}','{ZIP104}','{ZIP105}','{ZIP106}',
							'{ZIP107}','{ZIP108}','{ZIP109}','{ZIP110}','{ZIP111}',
							'{ZIP112}','{ZIP113}','{ZIP114}','{ZIP115}','{ZIP116}',
							'{ZIP117}','{ZIP118}','{ZIP119}','{ZIP120}','{ZIP121}',
							'{ZIP122}','{ZIP123}','{ZIP124}','{ZIP125}','{ZIP126}',
							'{ZIP127}','{ZIP128}','{ZIP129}','{ZIP130}','{ZIP131}',
							'{ZIP132}','{ZIP133}','{ZIP134}','{ZIP135}','{ZIP136}',
							'{ZIP137}','{ZIP138}','{ZIP139}','{ZIP140}','{ZIP141}',
							'{ZIP142}','{ZIP143}','{ZIP144}','{ZIP145}','{ZIP146}',
							'{ZIP147}','{ZIP148}','{ZIP149}','{ZIP150}','{ZIP151}',
							'{ZIP152}','{ZIP153}','{ZIP154}','{ZIP155}','{ZIP156}',
							'{ZIP157}','{ZIP158}','{ZIP159}','{ZIP160}','{ZIP161}',
							'{ZIP162}','{ZIP163}','{ZIP164}','{ZIP165}','{ZIP166}',
							'{ZIP167}','{ZIP168}','{ZIP169}','{ZIP170}','{ZIP171}',
							'{ZIP172}','{ZIP173}','{ZIP174}','{ZIP175}','{ZIP176}',
							'{ZIP177}','{ZIP178}','{ZIP179}','{ZIP180}','{ZIP181}',
							'{ZIP182}','{ZIP183}','{ZIP184}','{ZIP185}','{ZIP186}',
							'{ZIP187}','{ZIP188}','{ZIP189}','{ZIP190}','{ZIP191}',
							'{ZIP192}','{ZIP193}','{ZIP194}','{ZIP195}','{ZIP196}',
							'{ZIP197}','{ZIP198}','{ZIP199}','{ZIP200}','{ZIP201}',
							'{ZIP202}','{ZIP203}','{ZIP204}','{ZIP205}','{ZIP206}',
							'{ZIP207}','{ZIP208}','{ZIP209}','{ZIP210}','{ZIP211}',
							'{ZIP212}','{ZIP213}','{ZIP214}','{ZIP215}','{ZIP216}',
							'{ZIP217}','{ZIP218}','{ZIP219}','{ZIP220}','{ZIP221}',
							'{ZIP222}','{ZIP223}','{ZIP224}','{ZIP225}','{ZIP226}',
							'{ZIP227}','{ZIP228}','{ZIP229}','{ZIP230}','{ZIP231}',
							'{ZIP232}','{ZIP233}','{ZIP234}','{ZIP235}','{ZIP236}',
							'{ZIP237}','{ZIP238}','{ZIP239}','{ZIP240}','{ZIP241}',
							'{ZIP242}','{ZIP243}','{ZIP244}','{ZIP245}','{ZIP246}',
							'{ZIP247}','{ZIP248}','{ZIP249}','{ZIP250}','{ZIP251}',
							'{ZIP252}','{ZIP253}','{ZIP254}','{ZIP255}','{ZIP256}',
							'{ZIP257}','{ZIP258}','{ZIP259}','{ZIP260}','{ZIP261}',
							'{ZIP262}','{ZIP263}','{ZIP264}','{ZIP265}','{ZIP266}',
							'{ZIP267}','{ZIP268}','{ZIP269}','{ZIP270}','{ZIP271}',
							'{ZIP272}','{ZIP273}','{ZIP274}','{ZIP275}','{ZIP276}',
							'{ZIP277}','{ZIP278}','{ZIP279}','{ZIP280}','{ZIP281}',
							'{ZIP282}','{ZIP283}','{ZIP284}','{ZIP285}','{ZIP286}',
							'{ZIP287}','{ZIP288}','{ZIP289}','{ZIP290}','{ZIP291}',
							'{ZIP292}','{ZIP293}','{ZIP294}','{ZIP295}','{ZIP296}',
							'{ZIP297}','{ZIP298}','{ZIP299}','{ZIP300}','{ZIP301}',
							'{ZIP302}','{ZIP303}','{ZIP304}','{ZIP305}','{ZIP306}',
							'{ZIP307}','{ZIP308}','{ZIP309}','{ZIP310}','{ZIP311}',
							'{ZIP312}','{ZIP313}','{ZIP314}','{ZIP315}','{ZIP316}',
							'{ZIP317}','{ZIP318}','{ZIP319}','{ZIP320}','{ZIP321}',
							'{ZIP322}','{ZIP323}','{ZIP324}','{ZIP325}','{ZIP326}',
							'{ZIP327}','{ZIP328}','{ZIP329}','{ZIP330}','{ZIP331}',
							'{ZIP332}','{ZIP333}','{ZIP334}','{ZIP335}','{ZIP336}',
							'{ZIP337}','{ZIP338}','{ZIP339}','{ZIP340}','{ZIP341}',
							'{ZIP342}','{ZIP343}','{ZIP344}','{ZIP345}','{ZIP346}',
							'{ZIP347}','{ZIP348}','{ZIP349}','{ZIP350}','{ZIP351}',
							'{ZIP352}','{ZIP353}','{ZIP354}','{ZIP355}','{ZIP356}',
							'{ZIP357}','{ZIP358}','{ZIP359}','{ZIP360}','{ZIP361}',
							'{ZIP362}','{ZIP363}','{ZIP364}','{ZIP365}','{ZIP366}',
							'{ZIP367}','{ZIP368}','{ZIP369}','{ZIP370}','{ZIP371}',
							'{ZIP372}','{ZIP373}','{ZIP374}','{ZIP375}','{ZIP376}',
							'{ZIP377}','{ZIP378}','{ZIP379}','{ZIP380}','{ZIP381}',
							'{ZIP382}','{ZIP383}','{ZIP384}','{ZIP385}','{ZIP386}',
							'{ZIP387}','{ZIP388}','{ZIP389}','{ZIP390}','{ZIP391}',
							'{ZIP392}','{ZIP393}','{ZIP394}','{ZIP395}','{ZIP396}',
							'{ZIP397}','{ZIP398}','{ZIP399}','{ZIP400}')
		intersect
		select ca_zip
		from (SELECT substr(ca_zip,1,5) ca_zip,count(*) cnt
		FROM customer_address, customer
		WHERE ca_address_sk = c_current_addr_sk and
			c_preferred_cust_flag='Y'
		group by ca_zip
		having count(*) > 10)A1)A2) V1
		where ss_store_sk = s_store_sk
			and ss_sold_date_sk = d_date_sk
			and d_qoy = {QOY} and d_year = {YEAR}
			and (substr(s_zip,1,2) = substr(V1.ca_zip,1,2))
		group by s_store_name
		order by s_store_name
		limit 100""",
		'parameter':
		{
			'ZIP': {
				'type': "integer",
				'size': 400,
				'range': [10000,99999]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'QOY': {
				'type': "integer",
				'range': [1,2]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q9",
		'query': """select case when (select count(*) 
				from store_sales 
				where ss_quantity between 1 and 20) > {RC1}
			then (select avg({AGGCTHEN}) 
				from store_sales 
				where ss_quantity between 1 and 20) 
			else (select avg({AGGCELSE})
				from store_sales
				where ss_quantity between 1 and 20) end bucket1 ,
		case when (select count(*)
				from store_sales
				where ss_quantity between 21 and 40) > {RC2}
			then (select avg({AGGCTHEN})
				from store_sales
				where ss_quantity between 21 and 40) 
			else (select avg({AGGCELSE})
				from store_sales
				where ss_quantity between 21 and 40) end bucket2,
		case when (select count(*)
				from store_sales
				where ss_quantity between 41 and 60) > {RC3}
			then (select avg({AGGCTHEN})
				from store_sales
				where ss_quantity between 41 and 60)
			else (select avg({AGGCELSE})
				from store_sales
				where ss_quantity between 41 and 60) end bucket3,
		case when (select count(*)
				from store_sales
				where ss_quantity between 61 and 80) > {RC4}
			then (select avg({AGGCTHEN})
				from store_sales
				where ss_quantity between 61 and 80)
			else (select avg({AGGCELSE})
				from store_sales
				where ss_quantity between 61 and 80) end bucket4,
		case when (select count(*)
				from store_sales
				where ss_quantity between 81 and 100) > {RC5}
			then (select avg({AGGCTHEN})
				from store_sales
				where ss_quantity between 81 and 100)
			else (select avg({AGGCELSE})
				from store_sales
				where ss_quantity between 81 and 100) end bucket5
		from reason
		where r_reason_sk = 1
		""",
		'parameter':
		{
			'RC': {
				'type': "integer",
				'size': 5,
				'range': [1,567080]
			},
			'AGGCTHEN': {
				'type': "list",
				'range': ["ss_ext_discount_amt","ss_ext_sales_price","ss_ext_list_price","ss_ext_tax"]
			},
			'AGGCELSE': {
				'type': "list",
				'range': ["ss_net_paid","ss_net_paid_inc_tax","ss_net_profit"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q10",
		'query': """select
		cd_gender,
		cd_marital_status,
		cd_education_status,
		count(*) cnt1,
		cd_purchase_estimate,
		count(*) cnt2,
		cd_credit_rating,
		count(*) cnt3,
		cd_dep_count,
		count(*) cnt4,
		cd_dep_employed_count,
		count(*) cnt5,
		cd_dep_college_count,
		count(*) cnt6
		from
		customer c,customer_address ca,customer_demographics
		where
		c.c_current_addr_sk = ca.ca_address_sk and
		ca_county in ('{COUNTY1}','{COUNTY2}','{COUNTY3}','{COUNTY4}','{COUNTY5}','{COUNTY6}','{COUNTY7}','{COUNTY8}','{COUNTY9}','{COUNTY10}') and
		cd_demo_sk = c.c_current_cdemo_sk and 
		exists (select *
		from store_sales,date_dim
		where c.c_customer_sk = ss_customer_sk and
			ss_sold_date_sk = d_date_sk and
			d_year = {YEAR} and
			d_moy between {MONTH} and {MONTH}+3) and
		(exists (select *
		from web_sales,date_dim
		where c.c_customer_sk = ws_bill_customer_sk and
			ws_sold_date_sk = d_date_sk and
			d_year = {YEAR} and
			d_moy between {MONTH} ANd {MONTH}+3) or 
		exists (select * 
		from catalog_sales,date_dim
		where c.c_customer_sk = cs_ship_customer_sk and
			cs_sold_date_sk = d_date_sk and
			d_year = {YEAR} and
			d_moy between {MONTH} and {MONTH}+3))
		group by cd_gender,
		cd_marital_status,
		cd_education_status,
		cd_purchase_estimate,
		cd_credit_rating,
		cd_dep_count,
		cd_dep_employed_count,
		cd_dep_college_count
		order by cd_gender,
		cd_marital_status,
		cd_education_status,
		cd_purchase_estimate,
		cd_credit_rating,
		cd_dep_count,
		cd_dep_employed_count,
		cd_dep_college_count
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'MONTH': {
				'type': "integer",
				'range': [1,4]
			},
			'COUNTY': {
				'type': "list",
				'size': 10,
				'range': ["Ziebach County","Zavala County","Zapata County","Yuma County","Yukon-Koyukuk Census Area","Yuba County","Young County","York County","Yolo County","Yoakum County","Yellowstone County","Yellow Medicine County","Yell County","Yazoo County","Yavapai County","Yates County","Yankton County","Yancey County","Yamhill County","Yalobusha County","Yakutat Borough","Yakima County","Yadkin County","Wythe County","Wyoming County","Wyandotte County","Wyandot County","Wright County","Worth County","Worcester County","Woodward County","Woodson County","Woods County","Woodruff County","Woodford County","Woodbury County","Wood County","Wolfe County","Wise County","Wirt County","Winston County","Winona County","Winneshiek County","Winnebago County","Winn Parish","Winkler County","Windsor County","Windham County","Winchester city","Wilson County","Williamson County","Williamsburg County","Williamsburg city","Williams County","Willacy County","Will County","Wilkinson County","Wilkin County","Wilkes County","Wilcox County","Wilbarger County","Wicomico County","Wichita County","Wibaux County","Whitman County","Whitley County","Whitfield County","Whiteside County","White Pine County","White County","Wheeler County","Wheatland County","Whatcom County","Wharton County","Wexford County","Wetzel County","Weston County","Westmoreland County","Westchester County","West Feliciana Parish","West Carroll Parish","West Baton Rouge Parish","Wells County","Weld County","Webster Parish","Webster County","Weber County","Webb County","Weakley County","Waynesboro city","Wayne County","Waushara County","Waupaca County","Waukesha County","Watonwan County","Watauga County","Washtenaw County","Washoe County","Washita County","Washington Parish","Washington County","Washburn County","Washakie County","Waseca County","Wasco County","Wasatch County","Warrick County","Warren County","Ware County","Ward County","Wapello County","Walworth County","Walton County","Walthall County","Walsh County","Wallowa County","Waller County","Wallace County","Walla Walla County","Walker County","Waldo County","Wakulla County","Wake County","Wahkiakum County","Wagoner County","Wadena County","Wade Hampton Census Area","Wabaunsee County","Wabasha County","Wabash County","Volusia County","Virginia Beach city","Vinton County","Vilas County","Vigo County","Victoria County","Vernon Parish","Vernon County","Vermillion County","Vermilion Parish","Vermilion County","Ventura County","Venango County","Vanderburgh County","Vance County","Van Zandt County","Van Wert County","Van Buren County","Valley County","Valencia County","Valdez-Cordova Census Area","Val Verde County","Uvalde County","Utah County","Upton County","Upson County","Upshur County","Union Parish","Union County","Unicoi County","Umatilla County","Ulster County","Uintah County","Uinta County","Tyrrell County","Tyler County","Twin Falls County","Twiggs County","Tuscola County","Tuscarawas County","Tuscaloosa County","Turner County","Tuolumne County","Tunica County","Tulsa County","Tulare County","Tucker County","Trumbull County","Trousdale County","Troup County","Tripp County","Trinity County","Trimble County","Trigg County","Treutlen County","Trempealeau County","Trego County","Treasure County","Travis County","Traverse County","Transylvania County","Traill County","Towns County","Towner County","Torrance County","Toombs County","Toole County","Tooele County","Tompkins County","Tom Green County","Tolland County","Todd County","Titus County","Tishomingo County","Tipton County","Tippecanoe County","Tippah County","Tioga County","Tillman County","Tillamook County","Tift County","Thurston County","Throckmorton County","Thomas County","Thayer County","Texas County","Teton County","Terry County","Terrell County","Terrebonne Parish","Tensas Parish","Teller County","Telfair County","Tehama County","Tazewell County","Taylor County","Tattnall County","Tate County","Tarrant County","Taos County","Tangipahoa Parish","Taney County","Tama County","Tallapoosa County","Tallahatchie County","Talladega County","Taliaferro County","Talbot County","Switzerland County","Swisher County","Swift County","Sweetwater County","Sweet Grass County","Swain County","Suwannee County","Sutton County","Sutter County","Sussex County","Susquehanna County","Surry County","Sunflower County","Sumter County","Sumner County","Summit County","Summers County","Sully County","Sullivan County","Suffolk County","Suffolk city","Sublette County","Stutsman County","Strafford County","Story County","Storey County","Stonewall County","Stone County","Stokes County","Stoddard County","Stillwater County","Stewart County","Stevens County","Steuben County","Sterling County","Stephenson County","Stephens County","Steele County","Stearns County","Staunton city","Starr County","Starke County","Stark County","Stanton County","Stanly County","Stanley County","Stanislaus County","Stafford County","Spotsylvania County","Spokane County","Spink County","Spencer County","Spartanburg County","Spalding County","Southampton County","Sonoma County","Somervell County","Somerset County","Solano County","Socorro County","Snyder County","Snohomish County","Smyth County","Smith County","Slope County","Skamania County","Skagit County","Sitka Borough","Siskiyou County","Sioux County","Simpson County","Silver Bow County","Sierra County","Sibley County","Shoshone County","Shiawassee County","Sherman County","Sheridan County","Sherburne County","Shenandoah County","Shelby County","Sheboygan County","Shawnee County","Shawano County","Shasta County","Sharp County","Sharkey County","Shannon County","Shackelford County","Seward County","Sevier County","Sequoyah County","Sequatchie County","Seneca County","Seminole County","Sedgwick County","Sebastian County","Searcy County","Scurry County","Screven County","Scotts Bluff County","Scott County","Scotland County","Scioto County","Schuylkill County","Schuyler County","Schoolcraft County","Schoharie County","Schley County","Schleicher County","Schenectady County","Sawyer County","Saunders County","Sauk County","Sarpy County","Sargent County","Saratoga County","Sarasota County","Santa Rosa County","Santa Fe County","Santa Cruz County","Santa Clara County","Santa Barbara County","Sanpete County","Sanilac County","Sangamon County","Sandusky County","Sandoval County","Sanders County","Sanborn County","San Saba County","San Patricio County","San Miguel County","San Mateo County","San Luis Obispo County","San Juan County","San Joaquin County","San Jacinto County","San Francisco County","San Diego County","San Bernardino County","San Benito County","San Augustine County","Sampson County","Saluda County","Salt Lake County","Saline County","Salem County","Salem city","Saguache County","Saginaw County","Sagadahoc County","Sacramento County","Sac County","Sabine Parish","Sabine County","Rutland County","Rutherford County","Russell County","Rusk County","Rush County","Runnels County","Rowan County","Routt County","Ross County","Rosebud County","Roseau County","Roscommon County","Roosevelt County","Rooks County","Rolette County","Rogers County","Roger Mills County","Rockwall County","Rockland County","Rockingham County","Rockdale County","Rockcastle County","Rockbridge County","Rock Island County","Rock County","Robeson County","Robertson County","Roberts County","Roanoke County","Roanoke city","Roane County","Riverside County","Ritchie County","Ripley County","Rio Grande County","Rio Blanco County","Rio Arriba County","Ringgold County","Riley County","Richmond County","Richmond city","Richland Parish","Richland County","Richardson County","Rich County","Rice County","Rhea County","Reynolds County","Republic County","Renville County","Rensselaer County","Reno County","Refugio County","Reeves County","Redwood County","Red Willow County","Red River Parish","Red River County","Red Lake County","Real County","Reagan County","Ray County","Rawlins County","Ravalli County","Rappahannock County","Rapides Parish","Ransom County","Rankin County","Randolph County","Randall County","Ramsey County","Ralls County","Raleigh County","Rains County","Radford city","Racine County","Rabun County","Quitman County","Queens County","Queen Anne County","Quay County","Putnam County","Pushmataha County","Pulaski County","Pueblo County","Prowers County","Providence County","Prince William County","Prince George County","Prince Edward County","Price County","Preston County","Presque Isle County","Presidio County","Prentiss County","Preble County","Pratt County","Prairie County","Powhatan County","Poweshiek County","Power County","Powell County","Powder River County","Potter County","Pottawattamie County","Pottawatomie County","Posey County","Portsmouth city","Porter County","Portage County","Poquoson city","Pope County","Pontotoc County","Pondera County","Polk County","Pointe Coupee Parish","Poinsett County","Pocahontas County","Plymouth County","Plumas County","Pleasants County","Platte County","Plaquemines Parish","Placer County","Piute County","Pittsylvania County","Pittsburg County","Pitt County","Pitkin County","Piscataquis County","Pipestone County","Pinellas County","Pine County","Pinal County","Pima County","Pike County","Pierce County","Pickett County","Pickens County","Pickaway County","Piatt County","Phillips County","Philadelphia County","Phelps County","Pettis County","Petroleum County","Petersburg city","Person County","Pershing County","Perry County","Perquimans County","Perkins County","Pepin County","Peoria County","Penobscot County","Pennington County","Pendleton County","Pender County","Pend Oreille County","Pemiscot County","Pembina County","Pecos County","Pearl River County","Peach County","Payne County","Payette County","Pawnee County","Paulding County","Patrick County","Passaic County","Pasquotank County","Pasco County","Parmer County","Parker County","Parke County","Park County","Panola County","Pamlico County","Palo Pinto County","Palo Alto County","Palm Beach County","Page County","Pacific County","Ozaukee County","Ozark County","Oxford County","Owyhee County","Owsley County","Owen County","Overton County","Outagamie County","Ouray County","Ouachita Parish","Ouachita County","Otter Tail County","Ottawa County","Otsego County","Otoe County","Otero County","Oswego County","Oscoda County","Osceola County","Osborne County","Osage County","Orleans Parish","Orleans County","Oregon County","Orangeburg County","Orange County","Ontonagon County","Ontario County","Onslow County","Onondaga County","Oneida County","Olmsted County","Oliver County","Oldham County","Oktibbeha County","Okmulgee County","Oklahoma County","Okfuskee County","Okeechobee County","Okanogan County","Okaloosa County","Ohio County","Oglethorpe County","Ogle County","Ogemaw County","Oconto County","Oconee County","Ochiltree County","Oceana County","Ocean County","Obion County","Oakland County","O-Brien County","Nye County","Nueces County","Nuckolls County","Noxubee County","Nowata County","Nottoway County","Norton County","Norton city","Northwest Arctic Borough","Northumberland County","Northampton County","North Slope Borough","Norman County","Norfolk County","Norfolk city","Nome Census Area","Nolan County","Nodaway County","Nobles County","Noble County","Niobrara County","Nicollet County","Nicholas County","Niagara County","Nez Perce County","Newton County","Newport News city","Newport County","Newberry County","Newaygo County","New York County","New Madrid County","New London County","New Kent County","New Haven County","New Hanover County","New Castle County","Nevada County","Ness County","Neshoba County","Neosho County","Nemaha County","Nelson County","Navarro County","Navajo County","Natrona County","Natchitoches Parish","Nassau County","Nash County","Napa County","Nantucket County","Nance County","Nacogdoches County","Musselshell County","Muskogee County","Muskingum County","Muskegon County","Muscogee County","Muscatine County","Murray County","Multnomah County","Muhlenberg County","Mower County","Mountrail County","Moultrie County","Motley County","Morton County","Morrow County","Morrison County","Morris County","Morrill County","Morgan County","Morehouse Parish","Mora County","Moore County","Moody County","Montrose County","Montour County","Montmorency County","Montgomery County","Montezuma County","Monterey County","Montcalm County","Montague County","Monroe County","Monongalia County","Monona County","Mono County","Monmouth County","Moniteau County","Mohave County","Moffat County","Modoc County","Mobile County","Mitchell County","Missoula County","Mississippi County","Missaukee County","Minnehaha County","Minidoka County","Mingo County","Mineral County","Miner County","Milwaukee County","Mills County","Miller County","Mille Lacs County","Millard County","Milam County","Mifflin County","Midland County","Middlesex County","Miami County","Metcalfe County","Mesa County","Merrimack County","Merrick County","Meriwether County","Mercer County","Merced County","Menominee County","Menifee County","Mendocino County","Menard County","Mellette County","Meigs County","Meeker County","Medina County","Mecosta County","Mecklenburg County","Meagher County","Meade County","McPherson County","McNairy County","McMullen County","McMinn County","McLeod County","McLennan County","McLean County","McKinley County","McKenzie County","McKean County","McIntosh County","McHenry County","McDuffie County","McDowell County","McDonough County","McDonald County","McCurtain County","McCulloch County","McCreary County","McCracken County","McCormick County","McCook County","McCone County","McClain County","Mayes County","Maverick County","Maury County","Maui County","Mathews County","Matanuska-Susitna Borough","Matagorda County","Massac County","Mason County","Martinsville city","Martin County","Marshall County","Marquette County","Marlboro County","Mariposa County","Marion County","Marinette County","Marin County","Maries County","Maricopa County","Marengo County","Marathon County","Manitowoc County","Manistee County","Manatee County","Manassas Park city","Manassas city","Malheur County","Major County","Mahoning County","Mahnomen County","Mahaska County","Magoffin County","Madison Parish","Madison County","Madera County","Macoupin County","Macon County","Macomb County","Mackinac County","Lyon County","Lynn County","Lynchburg city","Lyman County","Lycoming County","Luzerne County","Lunenburg County","Luna County","Lumpkin County","Luce County","Lucas County","Lubbock County","Lowndes County","Loving County","Love County","Loup County","Louisa County","Loudoun County","Loudon County","Los Angeles County","Los Alamos County","Lorain County","Lonoke County","Long County","Logan County","Llano County","Livingston Parish","Livingston County","Live Oak County","Little River County","Litchfield County","Lipscomb County","Linn County","Lincoln Parish","Lincoln County","Limestone County","Licking County","Liberty County","Lexington County","Lexington city","Lewis County","Lewis and Clark County","Levy County","Letcher County","Leslie County","Leon County","Lenoir County","Lenawee County","Lemhi County","Lehigh County","Leflore County","Leelanau County","Lee County","Lebanon County","Leavenworth County","Leake County","Lea County","Le Sueur County","Le Flore County","Lawrence County","Lavaca County","Laurens County","Laurel County","Lauderdale County","Latimer County","Latah County","Lassen County","Las Animas County","Larue County","Larimer County","Laramie County","Lapeer County","Lanier County","Langlade County","Lane County","Lander County","Lancaster County","Lampasas County","LaMoure County","Lamoille County","Lamb County","Lamar County","Lake of the Woods County","Lake County","Lake and Peninsula Borough","Lagrange County","Lafourche Parish","Lafayette Parish","Lafayette County","Laclede County","Lackawanna County","Lac qui Parle County","Labette County","La Salle Parish","La Salle County","La Porte County","La Plata County","La Paz County","La Crosse County","Kossuth County","Kosciusko County","Kootenai County","Koochiching County","Kodiak Island Borough","Knox County","Knott County","Klickitat County","Kleberg County","Klamath County","Kittson County","Kittitas County","Kitsap County","Kit Carson County","Kiowa County","Kinney County","Kingsbury County","Kings County","Kingman County","Kingfisher County","King William County","King George County","King County","King and Queen County","Kimble County","Kimball County","Kidder County","Keya Paha County","Keweenaw County","Kewaunee County","Ketchikan Gateway Borough","Kershaw County","Kerr County","Kern County","Keokuk County","Kenton County","Kent County","Kenosha County","Kennebec County","Kenedy County","Kendall County","Kenai Peninsula Borough","Kemper County","Keith County","Kearny County","Kearney County","Kay County","Kaufman County","Kauai County","Karnes County","Kankakee County","Kane County","Kandiyohi County","Kanawha County","Kanabec County","Kalkaska County","Kalamazoo County","Juniata County","Juneau County","Juneau Borough","Judith Basin County","Juab County","Josephine County","Jones County","Johnston County","Johnson County","Jo Daviess County","Jim Wells County","Jim Hogg County","Jewell County","Jessamine County","Jersey County","Jerome County","Jerauld County","Jennings County","Jenkins County","Jefferson Parish","Jefferson Davis Parish","Jefferson Davis County","Jefferson County","Jeff Davis County","Jay County","Jasper County","James City County","Jackson Parish","Jackson County","Jack County","Izard County","Itawamba County","Itasca County","Issaquena County","Isle of Wight County","Island County","Isanti County","Isabella County","Irwin County","Iroquois County","Iron County","Irion County","Iredell County","Iowa County","Iosco County","Ionia County","Inyo County","Ingham County","Indiana County","Indian River County","Independence County","Imperial County","Idaho County","Ida County","Iberville Parish","Iberia Parish","Hyde County","Hutchinson County","Huron County","Huntington County","Huntingdon County","Hunterdon County","Hunt County","Humphreys County","Humboldt County","Hughes County","Huerfano County","Hudspeth County","Hudson County","Hubbard County","Howell County","Howard County","Houston County","Houghton County","Hot Springs County","Hot Spring County","Horry County","Hopkins County","Hopewell city","Hooker County","Hood River County","Hood County","Honolulu County","Holt County","Holmes County","Hoke County","Hodgeman County","Hockley County","Hocking County","Hitchcock County","Hinsdale County","Hinds County","Hillsdale County","Hillsborough County","Hill County","Highlands County","Highland County","Hidalgo County","Hickory County","Hickman County","Hettinger County","Hertford County","Hernando County","Herkimer County","Henry County","Henrico County","Hennepin County","Hendry County","Hendricks County","Henderson County","Hempstead County","Hemphill County","Heard County","Haywood County","Hays County","Hayes County","Hawkins County","Hawaii County","Haskell County","Harvey County","Hartley County","Hartford County","Hart County","Harrisonburg city","Harrison County","Harris County","Harper County","Harney County","Harnett County","Harmon County","Harlan County","Harford County","Hardy County","Harding County","Hardin County","Hardeman County","Hardee County","Haralson County","Hanson County","Hansford County","Hanover County","Hand County","Hancock County","Hampton County","Hampton city","Hampshire County","Hampden County","Hamlin County","Hamilton County","Hamblen County","Hall County","Halifax County","Hale County","Haines Borough","Habersham County","Haakon County","Gwinnett County","Guthrie County","Gunnison County","Gulf County","Guilford County","Guernsey County","Guadalupe County","Grundy County","Grimes County","Griggs County","Grenada County","Gregory County","Gregg County","Greer County","Greenwood County","Greenville County","Greenup County","Greensville County","Greenlee County","Greene County","Greenbrier County","Green Lake County","Green County","Greeley County","Grayson County","Grays Harbor County","Gray County","Graves County","Gratiot County","Granville County","Grant Parish","Grant County","Granite County","Grand Traverse County","Grand Isle County","Grand Forks County","Grand County","Grainger County","Graham County","Grafton County","Grady County","Gove County","Gosper County","Goshen County","Gordon County","Gooding County","Goodhue County","Goochland County","Gonzales County","Goliad County","Golden Valley County","Gogebic County","Glynn County","Gloucester County","Glenn County","Glasscock County","Glascock County","Gladwin County","Glades County","Glacier County","Gilpin County","Gilmer County","Gilliam County","Gillespie County","Giles County","Gilchrist County","Gila County","Gibson County","Georgetown County","George County","Gentry County","Geneva County","Genesee County","Gem County","Geauga County","Geary County","Gates County","Gaston County","Gasconade County","Garza County","Garvin County","Garrett County","Garrard County","Garland County","Garfield County","Garden County","Galveston County","Gallia County","Gallatin County","Galax city","Gaines County","Gage County","Gadsden County","Furnas County","Fulton County","Frontier County","Frio County","Fresno County","Fremont County","Freestone County","Freeborn County","Fredericksburg city","Frederick County","Franklin Parish","Franklin County","Franklin city","Fountain County","Foster County","Fort Bend County","Forsyth County","Forrest County","Forest County","Ford County","Fond du Lac County","Foard County","Fluvanna County","Floyd County","Florence County","Fleming County","Flathead County","Flagler County","Fisher County","Finney County","Fillmore County","Ferry County","Fergus County","Fentress County","Fayette County","Fauquier County","Faulkner County","Faulk County","Faribault County","Fannin County","Falls County","Falls Church city","Fallon County","Fall River County","Fairfield County","Fairfax County","Fairfax city","Fairbanks North Star Borough","Evans County","Evangeline Parish","Eureka County","Etowah County","Estill County","Essex County","Esmeralda County","Escambia County","Erie County","Erath County","Emporia city","Emmons County","Emmet County","Emery County","Emanuel County","Elmore County","Ellsworth County","Ellis County","Elliott County","Elko County","Elkhart County","Elk County","Elbert County","El Paso County","El Dorado County","Effingham County","Edwards County","Edmunds County","Edmonson County","Edgefield County","Edgecombe County","Edgar County","Eddy County","Ector County","Echols County","Eau Claire County","Eaton County","Eastland County","East Feliciana Parish","East Carroll Parish","East Baton Rouge Parish","Early County","Eagle County","Dyer County","Duval County","Dutchess County","Durham County","Duplin County","DuPage County","Dunn County","Dunklin County","Dundy County","Dukes County","Duchesne County","Dubuque County","Dubois County","Drew County","Douglas County","Dougherty County","Dorchester County","Door County","Dooly County","Donley County","Doniphan County","Dona Ana County","Dolores County","Dodge County","Doddridge County","Dixon County","Dixie County","Divide County","District of Columbia","Dinwiddie County","Dimmit County","Dillon County","Dillingham Census Area","Dickson County","Dickinson County","Dickey County","Dickenson County","Dickens County","DeWitt County","Dewey County","Deuel County","DeSoto County","Desha County","Deschutes County","Des Moines County","Denver County","Denton County","Dent County","Denali Borough","Delta County","Delaware County","Del Norte County","DeKalb County","Defiance County","Deer Lodge County","Decatur County","DeBaca County","Dearborn County","Deaf Smith County","De Witt County","De Soto Parish","De Kalb County","Day County","Dawson County","Dawes County","Davison County","Davis County","Daviess County","Davie County","Davidson County","Dauphin County","Darlington County","Darke County","Dare County","Danville city","Daniels County","Dane County","Dallas County","Dallam County","Dale County","Dakota County","Daggett County","Dade County","Cuyahoga County","Custer County","Curry County","Currituck County","Cuming County","Cumberland County","Culpeper County","Cullman County","Culberson County","Crowley County","Crow Wing County","Cross County","Crosby County","Crook County","Crockett County","Crittenden County","Crisp County","Crenshaw County","Creek County","Crawford County","Craven County","Crane County","Craighead County","Craig County","Cowlitz County","Cowley County","Coweta County","Covington County","Covington city","Cottonwood County","Cotton County","Cottle County","Costilla County","Coshocton County","Coryell County","Cortland County","Corson County","Copiah County","Coosa County","Coos County","Cooper County","Cooke County","Cook County","Conway County","Converse County","Contra Costa County","Conejos County","Conecuh County","Concordia Parish","Concho County","Comanche County","Comal County","Colusa County","Columbus County","Columbiana County","Columbia County","Colquitt County","Colorado County","Colonial Heights city","Collingsworth County","Collin County","Collier County","Colleton County","Colfax County","Coles County","Coleman County","Cole County","Colbert County","Coke County","Coffey County","Coffee County","Codington County","Coconino County","Cocke County","Cochran County","Cochise County","Cobb County","Coal County","Coahoma County","Cloud County","Clinton County","Clinch County","Clifton Forge city","Cleveland County","Clermont County","Cleburne County","Clearwater County","Clearfield County","Clear Creek County","Clayton County","Clay County","Clatsop County","Clarke County","Clark County","Clarion County","Clarendon County","Clare County","Clallam County","Claiborne Parish","Claiborne County","Clackamas County","Citrus County","Cimarron County","Cibola County","Churchill County","Christian County","Chowan County","Chouteau County","Choctaw County","Chittenden County","Chisago County","Chippewa County","Chilton County","Childress County","Chicot County","Chickasaw County","Cheyenne County","Chesterfield County","Chester County","Cheshire County","Chesapeake city","Cherry County","Cherokee County","Chenango County","Chemung County","Chelan County","Cheboygan County","Cheatham County","Chaves County","Chautauqua County","Chattooga County","Chattahoochee County","Chatham County","Chase County","Charlton County","Charlottesville city","Charlotte County","Charlevoix County","Charleston County","Charles Mix County","Charles County","Charles City County","Chariton County","Champaign County","Chambers County","Chaffee County","Cerro Gordo County","Centre County","Cedar County","Cecil County","Cayuga County","Cavalier County","Cattaraugus County","Catron County","Catoosa County","Catawba County","Catahoula Parish","Caswell County","Castro County","Cassia County","Cass County","Casey County","Cascade County","Carver County","Carteret County","Carter County","Carson County","Carson City","Carroll County","Caroline County","Carlton County","Carlisle County","Caribou County","Carbon County","Cape May County","Cape Girardeau County","Canyon County","Cannon County","Candler County","Canadian County","Campbell County","Camp County","Cameron Parish","Cameron County","Camden County","Cambria County","Camas County","Calvert County","Calumet County","Calloway County","Callaway County","Callahan County","Calhoun County","Caledonia County","Caldwell Parish","Caldwell County","Calcasieu Parish","Calaveras County","Caddo Parish","Caddo County","Cache County","Cabell County","Cabarrus County","Butts County","Butte County","Butler County","Burt County","Burnett County","Burnet County","Burlington County","Burleson County","Burleigh County","Burke County","Bureau County","Buncombe County","Bullock County","Bulloch County","Bullitt County","Buffalo County","Buena Vista County","Buena Vista city","Bucks County","Buckingham County","Buchanan County","Bryan County","Brunswick County","Brule County","Brown County","Broward County","Broome County","Brooks County","Brookings County","Brooke County","Bronx County","Broadwater County","Bristol County","Bristol city","Bristol Bay Borough","Briscoe County","Brewster County","Brevard County","Bremer County","Breckinridge County","Breathitt County","Brazos County","Brazoria County","Braxton County","Brantley County","Branch County","Bradley County","Bradford County","Bracken County","Boyle County","Boyd County","Box Elder County","Box Butte County","Bowman County","Bowie County","Bourbon County","Boundary County","Boulder County","Bottineau County","Botetourt County","Bossier Parish","Bosque County","Borden County","Boone County","Bonneville County","Bonner County","Bond County","Bon Homme County","Bollinger County","Bolivar County","Boise County","Blue Earth County","Blount County","Bledsoe County","Bleckley County","Bland County","Blanco County","Blair County","Blaine County","Bladen County","Blackford County","Black Hawk County","Bingham County","Billings County","Big Stone County","Big Horn County","Bienville Parish","Bibb County","Bexar County","Bethel Census Area","Bertie County","Berrien County","Bernalillo County","Berkshire County","Berks County","Berkeley County","Bergen County","Benzie County","Benton County","Bent County","Benson County","Bennington County","Bennett County","Benewah County","Ben Hill County","Beltrami County","Belmont County","Bell County","Belknap County","Bee County","Bedford County","Bedford city","Beckham County","Becker County","Beaverhead County","Beaver County","Beauregard Parish","Beaufort County","Bear Lake County","Beadle County","Baylor County","Bayfield County","Bay County","Baxter County","Bath County","Bates County","Bastrop County","Bartow County","Barton County","Bartholomew County","Barry County","Barrow County","Barron County","Barren County","Barnwell County","Barnstable County","Barnes County","Barbour County","Barber County","Baraga County","Bannock County","Banner County","Banks County","Bandera County","Bamberg County","Baltimore County","Baltimore city","Ballard County","Baldwin County","Baker County","Bailey County","Bacon County","Baca County","Avoyelles Parish","Avery County","Autauga County","Austin County","Aurora County","Augusta County","Auglaize County","Audubon County","Audrain County","Attala County","Atoka County","Atlantic County","Atkinson County","Athens County","Atchison County","Atascosa County","Assumption Parish","Asotin County","Ashtabula County","Ashley County","Ashland County","Ashe County","Ascension Parish","Arthur County","Aroostook County","Armstrong County","Arlington County","Arkansas County","Arenac County","Archuleta County","Archer County","Arapahoe County","Aransas County","Appomattox County","Appling County","Appanoose County","Apache County","Antrim County","Antelope County","Anson County","Anoka County","Anne Arundel County","Angelina County","Androscoggin County","Andrews County","Andrew County","Anderson County","Anchorage Borough","Amite County","Amherst County","Amelia County","Amador County","Alpine County","Alpena County","Allendale County","Allen Parish","Allen County","Allegheny County","Alleghany County","Allegany County","Allegan County","Allamakee County","Alger County","Alfalfa County","Alexandria city","Alexander County","Aleutians West Census Area","Aleutians East Borough","Alcorn County","Alcona County","Albemarle County","Albany County","Alamosa County","Alameda County","Alamance County","Alachua County","Aitkin County","Aiken County","Addison County","Adams County","Adair County","Ada County","Accomack County","Acadia Parish","Abbeville County"]
			},
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q11",
		'query': """ with year_total as (
		select c_customer_id customer_id
			,c_first_name customer_first_name
			,c_last_name customer_last_name
			,c_preferred_cust_flag customer_preferred_cust_flag
			,c_birth_country customer_birth_country
			,c_login customer_login
			,c_email_address customer_email_address
			,d_year dyear
			,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
			,'s' sale_type
		from customer
			,store_sales
			,date_dim
		where c_customer_sk = ss_customer_sk
		and ss_sold_date_sk = d_date_sk
		group by c_customer_id
			,c_first_name
			,c_last_name
			,c_preferred_cust_flag 
			,c_birth_country
			,c_login
			,c_email_address
				,d_year 
		union all
		select c_customer_id customer_id
			,c_first_name customer_first_name
			,c_last_name customer_last_name
			,c_preferred_cust_flag customer_preferred_cust_flag
			,c_birth_country customer_birth_country
			,c_login customer_login
			,c_email_address customer_email_address
			,d_year dyear
			,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
			,'w' sale_type
		from customer
			,web_sales
			,date_dim
		where c_customer_sk = ws_bill_customer_sk
		and ws_sold_date_sk = d_date_sk
		group by c_customer_id
			,c_first_name
			,c_last_name
			,c_preferred_cust_flag 
			,c_birth_country
			,c_login
			,c_email_address
			,d_year
		)
		select 
			t_s_secyear.customer_id
			,t_s_secyear.customer_first_name
			,t_s_secyear.customer_last_name
			,{SELECTONE}
		from year_total t_s_firstyear
			,year_total t_s_secyear
			,year_total t_w_firstyear
			,year_total t_w_secyear
		where t_s_secyear.customer_id = t_s_firstyear.customer_id
			and t_s_firstyear.customer_id = t_w_secyear.customer_id
			and t_s_firstyear.customer_id = t_w_firstyear.customer_id
			and t_s_firstyear.sale_type = 's'
			and t_w_firstyear.sale_type = 'w'
			and t_s_secyear.sale_type = 's'
			and t_w_secyear.sale_type = 'w'
			and t_s_firstyear.dyear = {YEAR}
			and t_s_secyear.dyear = {YEAR}+1
			and t_w_firstyear.dyear = {YEAR}
			and t_w_secyear.dyear = {YEAR}+1
			and t_s_firstyear.year_total > 0
			and t_w_firstyear.year_total > 0
			and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else 0.0 end
				> case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else 0.0 end
		order by t_s_secyear.customer_id
			,t_s_secyear.customer_first_name
			,t_s_secyear.customer_last_name
			,{SELECTONE}
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2001]
			},
			'SELECTONE': {
				'type': "list",
				'range': ["t_s_secyear.customer_preferred_cust_flag","t_s_secyear.customer_birth_country","t_s_secyear.customer_login","t_s_secyear.customer_email_address"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q12",
		'query': """select i_item_id
		,i_item_desc 
		,i_category 
		,i_class 
		,i_current_price
		,sum(ws_ext_sales_price) as itemrevenue 
		,sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over
			(partition by i_class) as revenueratio
		from 
		web_sales
			,item 
			,date_dim
		where 
		ws_item_sk = i_item_sk 
		and i_category in ('{CATEGORY1}', '{CATEGORY2}', '{CATEGORY3}')
		and ws_sold_date_sk = d_date_sk
		and d_date between cast('1998-01-01' as date) 
			and (cast('1998-01-01' as date) + interval '30' day)
		group by 
		i_item_id
				,i_item_desc 
				,i_category
				,i_class
				,i_current_price
		order by 
		i_category
				,i_class
				,i_item_id
				,i_item_desc
				,revenueratio
		limit 100""",
		'parameter':
		{
			'CATEGORY': {
				'type': "list",
				'size': 3,
				'range': ["Books","Children","Electronics","Home","Jewelry","Men","Music","Shoes","Sports","Women"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q13",
		'query': """select avg(ss_quantity) avg_ss_quantity
			,avg(ss_ext_sales_price) avg_ss_ext_sales_price
			,avg(ss_ext_wholesale_cost) avg_ss_ext_wholesale_cost
			,sum(ss_ext_wholesale_cost) sum_ss_ext_wholesale_cost
		from store_sales
			,store
			,customer_demographics
			,household_demographics
			,customer_address
			,date_dim
		where s_store_sk = ss_store_sk
		and  ss_sold_date_sk = d_date_sk and d_year = 2001
		and((ss_hdemo_sk=hd_demo_sk
		and cd_demo_sk = ss_cdemo_sk
		and cd_marital_status = '{MS1}'
		and cd_education_status = '{ES1}'
		and ss_sales_price between 100.00 and 150.00
		and hd_dep_count = 3   
			)or
			(ss_hdemo_sk=hd_demo_sk
		and cd_demo_sk = ss_cdemo_sk
		and cd_marital_status = '{MS2}'
		and cd_education_status = '{ES2}'
		and ss_sales_price between 50.00 and 100.00   
		and hd_dep_count = 1
			) or 
			(ss_hdemo_sk=hd_demo_sk
		and cd_demo_sk = ss_cdemo_sk
		and cd_marital_status = '{MS3}'
		and cd_education_status = '{ES3}'
		and ss_sales_price between 150.00 and 200.00 
		and hd_dep_count = 1  
			))
		and((ss_addr_sk = ca_address_sk
		and ca_country = 'United States'
		and ca_state in ('{STATE1}', '{STATE2}', '{STATE3}')
		and ss_net_profit between 100 and 200  
			) or
			(ss_addr_sk = ca_address_sk
		and ca_country = 'United States'
		and ca_state in ('{STATE4}', '{STATE5}', '{STATE6}')
		and ss_net_profit between 150 and 300  
			) or
			(ss_addr_sk = ca_address_sk
		and ca_country = 'United States'
		and ca_state in ('{STATE7}', '{STATE8}', '{STATE9}')
		and ss_net_profit between 50 and 250  
			))
		""",
		'parameter':
		{
			'STATE': {
				'type': "list",
				'size': 9,
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","ME","MI","MN","MO","MS","MT","NC","ND","NE","NJ","NM","NV","OH","OK","OR","PA","SC","SD","TN","TX","UT","VA","WA","WI","WV"]
			},
			'MS': {
				'type': "list",
				'size': 3,
				'range': ["M","S","D","W","U"]
			},
			'ES': {
				'type': "list",
				'size': 3,
				'range': ["Primary","Secondary","College","2 yr Degree","4 yr Degree", "Advanced Degree","Unknown"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q14a+b",
		'query': ["""with  cross_items as
		(select i_item_sk ss_item_sk
		from item,
		(select iss.i_brand_id brand_id
			,iss.i_class_id class_id
			,iss.i_category_id category_id
		from store_sales
			,item iss
			,date_dim d1
		where ss_item_sk = iss.i_item_sk
		and ss_sold_date_sk = d1.d_date_sk
		and d1.d_year between {YEAR} AND {YEAR} + 2
		intersect 
		select ics.i_brand_id
			,ics.i_class_id
			,ics.i_category_id
		from catalog_sales
			,item ics
			,date_dim d2
		where cs_item_sk = ics.i_item_sk
		and cs_sold_date_sk = d2.d_date_sk
		and d2.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select iws.i_brand_id
			,iws.i_class_id
			,iws.i_category_id
		from web_sales
			,item iws
			,date_dim d3
		where ws_item_sk = iws.i_item_sk
		and ws_sold_date_sk = d3.d_date_sk
		and d3.d_year between {YEAR} AND {YEAR} + 2) z
		where i_brand_id = brand_id
			and i_class_id = class_id
			and i_category_id = category_id
		),
		avg_sales as
		(select avg(quantity*list_price) average_sales
		from (select ss_quantity quantity
					,ss_list_price list_price
			from store_sales
				,date_dim
			where ss_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all 
			select cs_quantity quantity 
					,cs_list_price list_price
			from catalog_sales
				,date_dim
			where cs_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2 
			union all
			select ws_quantity quantity
					,ws_list_price list_price
			from web_sales
				,date_dim
			where ws_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2) x)
		select channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
		from(
			select 'store' channel, i_brand_id,i_class_id
					,i_category_id,sum(ss_quantity*ss_list_price) sales
					, count(*) number_sales
			from store_sales
				,item
				,date_dim
			where ss_item_sk in (select ss_item_sk from cross_items)
				and ss_item_sk = i_item_sk
				and ss_sold_date_sk = d_date_sk
				and d_year = {YEAR}+2 
				and d_moy = 11
			group by i_brand_id,i_class_id,i_category_id
			having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
			union all
			select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
			from catalog_sales
				,item
				,date_dim
			where cs_item_sk in (select ss_item_sk from cross_items)
				and cs_item_sk = i_item_sk
				and cs_sold_date_sk = d_date_sk
				and d_year = {YEAR}+2 
				and d_moy = 11
			group by i_brand_id,i_class_id,i_category_id
			having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
			union all
			select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
			from web_sales
				,item
				,date_dim
			where ws_item_sk in (select ss_item_sk from cross_items)
				and ws_item_sk = i_item_sk
				and ws_sold_date_sk = d_date_sk
				and d_year = {YEAR}+2
				and d_moy = 11
			group by i_brand_id,i_class_id,i_category_id
			having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
		) y
		group by channel, i_brand_id,i_class_id,i_category_id with rollup
		order by channel,i_brand_id,i_class_id,i_category_id
		limit 100""", """ with  cross_items as
		(select i_item_sk ss_item_sk
		from item,
		(select iss.i_brand_id brand_id
			,iss.i_class_id class_id
			,iss.i_category_id category_id
		from store_sales
			,item iss
			,date_dim d1
		where ss_item_sk = iss.i_item_sk
		and ss_sold_date_sk = d1.d_date_sk
		and d1.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select ics.i_brand_id
			,ics.i_class_id
			,ics.i_category_id
		from catalog_sales
			,item ics
			,date_dim d2
		where cs_item_sk = ics.i_item_sk
		and cs_sold_date_sk = d2.d_date_sk
		and d2.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select iws.i_brand_id
			,iws.i_class_id
			,iws.i_category_id
		from web_sales
			,item iws
			,date_dim d3
		where ws_item_sk = iws.i_item_sk
		and ws_sold_date_sk = d3.d_date_sk
		and d3.d_year between {YEAR} AND {YEAR} + 2) x
		where i_brand_id = brand_id
			and i_class_id = class_id
			and i_category_id = category_id
		),
		avg_sales as
		(select avg(quantity*list_price) average_sales
		from (select ss_quantity quantity
					,ss_list_price list_price
			from store_sales
				,date_dim
			where ss_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select cs_quantity quantity
					,cs_list_price list_price
			from catalog_sales
				,date_dim
			where cs_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select ws_quantity quantity
					,ws_list_price list_price
			from web_sales
				,date_dim
			where ws_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2) x)
		select this_year.channel ty_channel
								,this_year.i_brand_id ty_brand
								,this_year.i_class_id ty_class
								,this_year.i_category_id ty_category
								,this_year.sales ty_sales
								,this_year.number_sales ty_number_sales
								,last_year.channel ly_channel
								,last_year.i_brand_id ly_brand
								,last_year.i_class_id ly_class
								,last_year.i_category_id ly_category
								,last_year.sales ly_sales
								,last_year.number_sales ly_number_sales 
		from
		(select 'store' channel, i_brand_id,i_class_id,i_category_id
				,sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales 
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR} + 1
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year,
		(select 'store' channel, i_brand_id,i_class_id
				,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR}
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year
		where this_year.i_brand_id= last_year.i_brand_id
		and this_year.i_class_id = last_year.i_class_id
		and this_year.i_category_id = last_year.i_category_id
		order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id
		limit 100"""],
		'DBMS': {
			'MariaDB':
				["""with  cross_items as
				(select i_item_sk ss_item_sk
				from item,
				(select iss.i_brand_id brand_id
					,iss.i_class_id class_id
					,iss.i_category_id category_id
				from store_sales
					,item iss
					,date_dim d1
				where ss_item_sk = iss.i_item_sk
				and ss_sold_date_sk = d1.d_date_sk
				and d1.d_year between {YEAR} AND {YEAR} + 2
				intersect 
				select ics.i_brand_id
					,ics.i_class_id
					,ics.i_category_id
				from catalog_sales
					,item ics
					,date_dim d2
				where cs_item_sk = ics.i_item_sk
				and cs_sold_date_sk = d2.d_date_sk
				and d2.d_year between {YEAR} AND {YEAR} + 2
				intersect
				select iws.i_brand_id
					,iws.i_class_id
					,iws.i_category_id
				from web_sales
					,item iws
					,date_dim d3
				where ws_item_sk = iws.i_item_sk
				and ws_sold_date_sk = d3.d_date_sk
				and d3.d_year between {YEAR} AND {YEAR} + 2) z
				where i_brand_id = brand_id
					and i_class_id = class_id
					and i_category_id = category_id
				),
				avg_sales as
				(select avg(quantity*list_price) average_sales
				from (select ss_quantity quantity
							,ss_list_price list_price
					from store_sales
						,date_dim
					where ss_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2
					union all 
					select cs_quantity quantity 
							,cs_list_price list_price
					from catalog_sales
						,date_dim
					where cs_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2 
					union all
					select ws_quantity quantity
							,ws_list_price list_price
					from web_sales
						,date_dim
					where ws_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2) x)
				select channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
				from(
					select 'store' channel, i_brand_id,i_class_id
							,i_category_id,sum(ss_quantity*ss_list_price) sales
							, count(*) number_sales
					from store_sales
						,item
						,date_dim
					where ss_item_sk in (select ss_item_sk from cross_items)
						and ss_item_sk = i_item_sk
						and ss_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2 
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
					union all
					select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
					from catalog_sales
						,item
						,date_dim
					where cs_item_sk in (select ss_item_sk from cross_items)
						and cs_item_sk = i_item_sk
						and cs_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2 
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
					union all
					select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
					from web_sales
						,item
						,date_dim
					where ws_item_sk in (select ss_item_sk from cross_items)
						and ws_item_sk = i_item_sk
						and ws_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
				) y
				group by channel, i_brand_id,i_class_id,i_category_id with rollup
				limit 100""", """ with  cross_items as
		(select i_item_sk ss_item_sk
		from item,
		(select iss.i_brand_id brand_id
			,iss.i_class_id class_id
			,iss.i_category_id category_id
		from store_sales
			,item iss
			,date_dim d1
		where ss_item_sk = iss.i_item_sk
		and ss_sold_date_sk = d1.d_date_sk
		and d1.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select ics.i_brand_id
			,ics.i_class_id
			,ics.i_category_id
		from catalog_sales
			,item ics
			,date_dim d2
		where cs_item_sk = ics.i_item_sk
		and cs_sold_date_sk = d2.d_date_sk
		and d2.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select iws.i_brand_id
			,iws.i_class_id
			,iws.i_category_id
		from web_sales
			,item iws
			,date_dim d3
		where ws_item_sk = iws.i_item_sk
		and ws_sold_date_sk = d3.d_date_sk
		and d3.d_year between {YEAR} AND {YEAR} + 2) x
		where i_brand_id = brand_id
			and i_class_id = class_id
			and i_category_id = category_id
		),
		avg_sales as
		(select avg(quantity*list_price) average_sales
		from (select ss_quantity quantity
					,ss_list_price list_price
			from store_sales
				,date_dim
			where ss_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select cs_quantity quantity
					,cs_list_price list_price
			from catalog_sales
				,date_dim
			where cs_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select ws_quantity quantity
					,ws_list_price list_price
			from web_sales
				,date_dim
			where ws_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2) x)
		select this_year.channel ty_channel
								,this_year.i_brand_id ty_brand
								,this_year.i_class_id ty_class
								,this_year.i_category_id ty_category
								,this_year.sales ty_sales
								,this_year.number_sales ty_number_sales
								,last_year.channel ly_channel
								,last_year.i_brand_id ly_brand
								,last_year.i_class_id ly_class
								,last_year.i_category_id ly_category
								,last_year.sales ly_sales
								,last_year.number_sales ly_number_sales 
		from
		(select 'store' channel, i_brand_id,i_class_id,i_category_id
				,sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales 
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR} + 1
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year,
		(select 'store' channel, i_brand_id,i_class_id
				,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR}
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year
		where this_year.i_brand_id= last_year.i_brand_id
		and this_year.i_class_id = last_year.i_class_id
		and this_year.i_category_id = last_year.i_category_id
		order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id
		limit 100"""],
			'MonetDB':
				["""with  cross_items as
				(select i_item_sk ss_item_sk
				from item,
				(select iss.i_brand_id brand_id
					,iss.i_class_id class_id
					,iss.i_category_id category_id
				from store_sales
					,item iss
					,date_dim d1
				where ss_item_sk = iss.i_item_sk
				and ss_sold_date_sk = d1.d_date_sk
				and d1.d_year between {YEAR} AND {YEAR} + 2
				intersect 
				select ics.i_brand_id
					,ics.i_class_id
					,ics.i_category_id
				from catalog_sales
					,item ics
					,date_dim d2
				where cs_item_sk = ics.i_item_sk
				and cs_sold_date_sk = d2.d_date_sk
				and d2.d_year between {YEAR} AND {YEAR} + 2
				intersect
				select iws.i_brand_id
					,iws.i_class_id
					,iws.i_category_id
				from web_sales
					,item iws
					,date_dim d3
				where ws_item_sk = iws.i_item_sk
				and ws_sold_date_sk = d3.d_date_sk
				and d3.d_year between {YEAR} AND {YEAR} + 2) z
				where i_brand_id = brand_id
					and i_class_id = class_id
					and i_category_id = category_id
				),
				avg_sales as
				(select avg(quantity*list_price) average_sales
				from (select ss_quantity quantity
							,ss_list_price list_price
					from store_sales
						,date_dim
					where ss_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2
					union all 
					select cs_quantity quantity 
							,cs_list_price list_price
					from catalog_sales
						,date_dim
					where cs_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2 
					union all
					select ws_quantity quantity
							,ws_list_price list_price
					from web_sales
						,date_dim
					where ws_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2) x)
				select channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
				from(
					select 'store' channel, i_brand_id,i_class_id
							,i_category_id,sum(ss_quantity*ss_list_price) sales
							, count(*) number_sales
					from store_sales
						,item
						,date_dim
					where ss_item_sk in (select ss_item_sk from cross_items)
						and ss_item_sk = i_item_sk
						and ss_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2 
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
					union all
					select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
					from catalog_sales
						,item
						,date_dim
					where cs_item_sk in (select ss_item_sk from cross_items)
						and cs_item_sk = i_item_sk
						and cs_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2 
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
					union all
					select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
					from web_sales
						,item
						,date_dim
					where ws_item_sk in (select ss_item_sk from cross_items)
						and ws_item_sk = i_item_sk
						and ws_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
				) y
				group by rollup(channel, i_brand_id,i_class_id,i_category_id)
				order by channel,i_brand_id,i_class_id,i_category_id
				limit 100""", """ with  cross_items as
		(select i_item_sk ss_item_sk
		from item,
		(select iss.i_brand_id brand_id
			,iss.i_class_id class_id
			,iss.i_category_id category_id
		from store_sales
			,item iss
			,date_dim d1
		where ss_item_sk = iss.i_item_sk
		and ss_sold_date_sk = d1.d_date_sk
		and d1.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select ics.i_brand_id
			,ics.i_class_id
			,ics.i_category_id
		from catalog_sales
			,item ics
			,date_dim d2
		where cs_item_sk = ics.i_item_sk
		and cs_sold_date_sk = d2.d_date_sk
		and d2.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select iws.i_brand_id
			,iws.i_class_id
			,iws.i_category_id
		from web_sales
			,item iws
			,date_dim d3
		where ws_item_sk = iws.i_item_sk
		and ws_sold_date_sk = d3.d_date_sk
		and d3.d_year between {YEAR} AND {YEAR} + 2) x
		where i_brand_id = brand_id
			and i_class_id = class_id
			and i_category_id = category_id
		),
		avg_sales as
		(select avg(quantity*list_price) average_sales
		from (select ss_quantity quantity
					,ss_list_price list_price
			from store_sales
				,date_dim
			where ss_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select cs_quantity quantity
					,cs_list_price list_price
			from catalog_sales
				,date_dim
			where cs_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select ws_quantity quantity
					,ws_list_price list_price
			from web_sales
				,date_dim
			where ws_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2) x)
		select this_year.channel ty_channel
								,this_year.i_brand_id ty_brand
								,this_year.i_class_id ty_class
								,this_year.i_category_id ty_category
								,this_year.sales ty_sales
								,this_year.number_sales ty_number_sales
								,last_year.channel ly_channel
								,last_year.i_brand_id ly_brand
								,last_year.i_class_id ly_class
								,last_year.i_category_id ly_category
								,last_year.sales ly_sales
								,last_year.number_sales ly_number_sales 
		from
		(select 'store' channel, i_brand_id,i_class_id,i_category_id
				,sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales 
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR} + 1
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year,
		(select 'store' channel, i_brand_id,i_class_id
				,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR}
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year
		where this_year.i_brand_id= last_year.i_brand_id
		and this_year.i_class_id = last_year.i_class_id
		and this_year.i_category_id = last_year.i_category_id
		order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id
		limit 100"""],
			'PostgreSQL':
				["""with  cross_items as
				(select i_item_sk ss_item_sk
				from item,
				(select iss.i_brand_id brand_id
					,iss.i_class_id class_id
					,iss.i_category_id category_id
				from store_sales
					,item iss
					,date_dim d1
				where ss_item_sk = iss.i_item_sk
				and ss_sold_date_sk = d1.d_date_sk
				and d1.d_year between {YEAR} AND {YEAR} + 2
				intersect 
				select ics.i_brand_id
					,ics.i_class_id
					,ics.i_category_id
				from catalog_sales
					,item ics
					,date_dim d2
				where cs_item_sk = ics.i_item_sk
				and cs_sold_date_sk = d2.d_date_sk
				and d2.d_year between {YEAR} AND {YEAR} + 2
				intersect
				select iws.i_brand_id
					,iws.i_class_id
					,iws.i_category_id
				from web_sales
					,item iws
					,date_dim d3
				where ws_item_sk = iws.i_item_sk
				and ws_sold_date_sk = d3.d_date_sk
				and d3.d_year between {YEAR} AND {YEAR} + 2) z
				where i_brand_id = brand_id
					and i_class_id = class_id
					and i_category_id = category_id
				),
				avg_sales as
				(select avg(quantity*list_price) average_sales
				from (select ss_quantity quantity
							,ss_list_price list_price
					from store_sales
						,date_dim
					where ss_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2
					union all 
					select cs_quantity quantity 
							,cs_list_price list_price
					from catalog_sales
						,date_dim
					where cs_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2 
					union all
					select ws_quantity quantity
							,ws_list_price list_price
					from web_sales
						,date_dim
					where ws_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2) x)
				select channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
				from(
					select 'store' channel, i_brand_id,i_class_id
							,i_category_id,sum(ss_quantity*ss_list_price) sales
							, count(*) number_sales
					from store_sales
						,item
						,date_dim
					where ss_item_sk in (select ss_item_sk from cross_items)
						and ss_item_sk = i_item_sk
						and ss_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2 
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
					union all
					select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
					from catalog_sales
						,item
						,date_dim
					where cs_item_sk in (select ss_item_sk from cross_items)
						and cs_item_sk = i_item_sk
						and cs_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2 
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
					union all
					select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
					from web_sales
						,item
						,date_dim
					where ws_item_sk in (select ss_item_sk from cross_items)
						and ws_item_sk = i_item_sk
						and ws_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
				) y
				group by rollup(channel, i_brand_id,i_class_id,i_category_id)
				order by channel,i_brand_id,i_class_id,i_category_id
				limit 100""", """ with  cross_items as
		(select i_item_sk ss_item_sk
		from item,
		(select iss.i_brand_id brand_id
			,iss.i_class_id class_id
			,iss.i_category_id category_id
		from store_sales
			,item iss
			,date_dim d1
		where ss_item_sk = iss.i_item_sk
		and ss_sold_date_sk = d1.d_date_sk
		and d1.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select ics.i_brand_id
			,ics.i_class_id
			,ics.i_category_id
		from catalog_sales
			,item ics
			,date_dim d2
		where cs_item_sk = ics.i_item_sk
		and cs_sold_date_sk = d2.d_date_sk
		and d2.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select iws.i_brand_id
			,iws.i_class_id
			,iws.i_category_id
		from web_sales
			,item iws
			,date_dim d3
		where ws_item_sk = iws.i_item_sk
		and ws_sold_date_sk = d3.d_date_sk
		and d3.d_year between {YEAR} AND {YEAR} + 2) x
		where i_brand_id = brand_id
			and i_class_id = class_id
			and i_category_id = category_id
		),
		avg_sales as
		(select avg(quantity*list_price) average_sales
		from (select ss_quantity quantity
					,ss_list_price list_price
			from store_sales
				,date_dim
			where ss_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select cs_quantity quantity
					,cs_list_price list_price
			from catalog_sales
				,date_dim
			where cs_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select ws_quantity quantity
					,ws_list_price list_price
			from web_sales
				,date_dim
			where ws_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2) x)
		select this_year.channel ty_channel
								,this_year.i_brand_id ty_brand
								,this_year.i_class_id ty_class
								,this_year.i_category_id ty_category
								,this_year.sales ty_sales
								,this_year.number_sales ty_number_sales
								,last_year.channel ly_channel
								,last_year.i_brand_id ly_brand
								,last_year.i_class_id ly_class
								,last_year.i_category_id ly_category
								,last_year.sales ly_sales
								,last_year.number_sales ly_number_sales 
		from
		(select 'store' channel, i_brand_id,i_class_id,i_category_id
				,sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales 
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR} + 1
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year,
		(select 'store' channel, i_brand_id,i_class_id
				,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR}
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year
		where this_year.i_brand_id= last_year.i_brand_id
		and this_year.i_class_id = last_year.i_class_id
		and this_year.i_category_id = last_year.i_category_id
		order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id
		limit 100"""],
			'Exasol':
				["""with  cross_items as
				(select i_item_sk ss_item_sk
				from item,
				(select iss.i_brand_id brand_id
					,iss.i_class_id class_id
					,iss.i_category_id category_id
				from store_sales
					,item iss
					,date_dim d1
				where ss_item_sk = iss.i_item_sk
				and ss_sold_date_sk = d1.d_date_sk
				and d1.d_year between {YEAR} AND {YEAR} + 2
				intersect 
				select ics.i_brand_id
					,ics.i_class_id
					,ics.i_category_id
				from catalog_sales
					,item ics
					,date_dim d2
				where cs_item_sk = ics.i_item_sk
				and cs_sold_date_sk = d2.d_date_sk
				and d2.d_year between {YEAR} AND {YEAR} + 2
				intersect
				select iws.i_brand_id
					,iws.i_class_id
					,iws.i_category_id
				from web_sales
					,item iws
					,date_dim d3
				where ws_item_sk = iws.i_item_sk
				and ws_sold_date_sk = d3.d_date_sk
				and d3.d_year between {YEAR} AND {YEAR} + 2) z
				where i_brand_id = brand_id
					and i_class_id = class_id
					and i_category_id = category_id
				),
				avg_sales as
				(select avg(quantity*list_price) average_sales
				from (select ss_quantity quantity
							,ss_list_price list_price
					from store_sales
						,date_dim
					where ss_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2
					union all 
					select cs_quantity quantity 
							,cs_list_price list_price
					from catalog_sales
						,date_dim
					where cs_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2 
					union all
					select ws_quantity quantity
							,ws_list_price list_price
					from web_sales
						,date_dim
					where ws_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2) x)
				select channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
				from(
					select 'store' channel, i_brand_id,i_class_id
							,i_category_id,sum(ss_quantity*ss_list_price) sales
							, count(*) number_sales
					from store_sales
						,item
						,date_dim
					where ss_item_sk in (select ss_item_sk from cross_items)
						and ss_item_sk = i_item_sk
						and ss_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2 
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
					union all
					select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
					from catalog_sales
						,item
						,date_dim
					where cs_item_sk in (select ss_item_sk from cross_items)
						and cs_item_sk = i_item_sk
						and cs_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2 
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
					union all
					select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
					from web_sales
						,item
						,date_dim
					where ws_item_sk in (select ss_item_sk from cross_items)
						and ws_item_sk = i_item_sk
						and ws_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
				) y
				group by rollup(channel, i_brand_id,i_class_id,i_category_id)
				order by channel,i_brand_id,i_class_id,i_category_id
				limit 100""", """ with  cross_items as
		(select i_item_sk ss_item_sk
		from item,
		(select iss.i_brand_id brand_id
			,iss.i_class_id class_id
			,iss.i_category_id category_id
		from store_sales
			,item iss
			,date_dim d1
		where ss_item_sk = iss.i_item_sk
		and ss_sold_date_sk = d1.d_date_sk
		and d1.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select ics.i_brand_id
			,ics.i_class_id
			,ics.i_category_id
		from catalog_sales
			,item ics
			,date_dim d2
		where cs_item_sk = ics.i_item_sk
		and cs_sold_date_sk = d2.d_date_sk
		and d2.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select iws.i_brand_id
			,iws.i_class_id
			,iws.i_category_id
		from web_sales
			,item iws
			,date_dim d3
		where ws_item_sk = iws.i_item_sk
		and ws_sold_date_sk = d3.d_date_sk
		and d3.d_year between {YEAR} AND {YEAR} + 2) x
		where i_brand_id = brand_id
			and i_class_id = class_id
			and i_category_id = category_id
		),
		avg_sales as
		(select avg(quantity*list_price) average_sales
		from (select ss_quantity quantity
					,ss_list_price list_price
			from store_sales
				,date_dim
			where ss_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select cs_quantity quantity
					,cs_list_price list_price
			from catalog_sales
				,date_dim
			where cs_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select ws_quantity quantity
					,ws_list_price list_price
			from web_sales
				,date_dim
			where ws_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2) x)
		select this_year.channel ty_channel
								,this_year.i_brand_id ty_brand
								,this_year.i_class_id ty_class
								,this_year.i_category_id ty_category
								,this_year.sales ty_sales
								,this_year.number_sales ty_number_sales
								,last_year.channel ly_channel
								,last_year.i_brand_id ly_brand
								,last_year.i_class_id ly_class
								,last_year.i_category_id ly_category
								,last_year.sales ly_sales
								,last_year.number_sales ly_number_sales 
		from
		(select 'store' channel, i_brand_id,i_class_id,i_category_id
				,sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales 
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR} + 1
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year,
		(select 'store' channel, i_brand_id,i_class_id
				,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR}
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year
		where this_year.i_brand_id= last_year.i_brand_id
		and this_year.i_class_id = last_year.i_class_id
		and this_year.i_category_id = last_year.i_category_id
		order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id
		limit 100"""],
			'MemSQL':
				["""with  cross_items as
				(select i_item_sk ss_item_sk
				from item,
				(select iss.i_brand_id brand_id
					,iss.i_class_id class_id
					,iss.i_category_id category_id
				from store_sales
					,item iss
					,date_dim d1
				where ss_item_sk = iss.i_item_sk
				and ss_sold_date_sk = d1.d_date_sk
				and d1.d_year between {YEAR} AND {YEAR} + 2
				intersect 
				select ics.i_brand_id
					,ics.i_class_id
					,ics.i_category_id
				from catalog_sales
					,item ics
					,date_dim d2
				where cs_item_sk = ics.i_item_sk
				and cs_sold_date_sk = d2.d_date_sk
				and d2.d_year between {YEAR} AND {YEAR} + 2
				intersect
				select iws.i_brand_id
					,iws.i_class_id
					,iws.i_category_id
				from web_sales
					,item iws
					,date_dim d3
				where ws_item_sk = iws.i_item_sk
				and ws_sold_date_sk = d3.d_date_sk
				and d3.d_year between {YEAR} AND {YEAR} + 2) z
				where i_brand_id = brand_id
					and i_class_id = class_id
					and i_category_id = category_id
				),
				avg_sales as
				(select avg(quantity*list_price) average_sales
				from (select ss_quantity quantity
							,ss_list_price list_price
					from store_sales
						,date_dim
					where ss_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2
					union all 
					select cs_quantity quantity 
							,cs_list_price list_price
					from catalog_sales
						,date_dim
					where cs_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2 
					union all
					select ws_quantity quantity
							,ws_list_price list_price
					from web_sales
						,date_dim
					where ws_sold_date_sk = d_date_sk
						and d_year between {YEAR} and {YEAR} + 2) x)
				select channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
				from(
					select 'store' channel, i_brand_id,i_class_id
							,i_category_id,sum(ss_quantity*ss_list_price) sales
							, count(*) number_sales
					from store_sales
						,item
						,date_dim
					where ss_item_sk in (select ss_item_sk from cross_items)
						and ss_item_sk = i_item_sk
						and ss_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2 
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
					union all
					select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
					from catalog_sales
						,item
						,date_dim
					where cs_item_sk in (select ss_item_sk from cross_items)
						and cs_item_sk = i_item_sk
						and cs_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2 
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
					union all
					select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
					from web_sales
						,item
						,date_dim
					where ws_item_sk in (select ss_item_sk from cross_items)
						and ws_item_sk = i_item_sk
						and ws_sold_date_sk = d_date_sk
						and d_year = {YEAR}+2
						and d_moy = 11
					group by i_brand_id,i_class_id,i_category_id
					having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
				) y
				group by rollup(channel, i_brand_id,i_class_id,i_category_id)
				order by channel,i_brand_id,i_class_id,i_category_id
				limit 100""", """ with  cross_items as
		(select i_item_sk ss_item_sk
		from item,
		(select iss.i_brand_id brand_id
			,iss.i_class_id class_id
			,iss.i_category_id category_id
		from store_sales
			,item iss
			,date_dim d1
		where ss_item_sk = iss.i_item_sk
		and ss_sold_date_sk = d1.d_date_sk
		and d1.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select ics.i_brand_id
			,ics.i_class_id
			,ics.i_category_id
		from catalog_sales
			,item ics
			,date_dim d2
		where cs_item_sk = ics.i_item_sk
		and cs_sold_date_sk = d2.d_date_sk
		and d2.d_year between {YEAR} AND {YEAR} + 2
		intersect
		select iws.i_brand_id
			,iws.i_class_id
			,iws.i_category_id
		from web_sales
			,item iws
			,date_dim d3
		where ws_item_sk = iws.i_item_sk
		and ws_sold_date_sk = d3.d_date_sk
		and d3.d_year between {YEAR} AND {YEAR} + 2) x
		where i_brand_id = brand_id
			and i_class_id = class_id
			and i_category_id = category_id
		),
		avg_sales as
		(select avg(quantity*list_price) average_sales
		from (select ss_quantity quantity
					,ss_list_price list_price
			from store_sales
				,date_dim
			where ss_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select cs_quantity quantity
					,cs_list_price list_price
			from catalog_sales
				,date_dim
			where cs_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2
			union all
			select ws_quantity quantity
					,ws_list_price list_price
			from web_sales
				,date_dim
			where ws_sold_date_sk = d_date_sk
				and d_year between {YEAR} and {YEAR} + 2) x)
		select this_year.channel ty_channel
								,this_year.i_brand_id ty_brand
								,this_year.i_class_id ty_class
								,this_year.i_category_id ty_category
								,this_year.sales ty_sales
								,this_year.number_sales ty_number_sales
								,last_year.channel ly_channel
								,last_year.i_brand_id ly_brand
								,last_year.i_class_id ly_class
								,last_year.i_category_id ly_category
								,last_year.sales ly_sales
								,last_year.number_sales ly_number_sales 
		from
		(select 'store' channel, i_brand_id,i_class_id,i_category_id
				,sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales 
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR} + 1
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year,
		(select 'store' channel, i_brand_id,i_class_id
				,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales
		from store_sales
			,item
			,date_dim
		where ss_item_sk in (select ss_item_sk from cross_items)
		and ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and d_week_seq = (select d_week_seq
							from date_dim
							where d_year = {YEAR}
							and d_moy = 12
							and d_dom = {DAY})
		group by i_brand_id,i_class_id,i_category_id
		having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year
		where this_year.i_brand_id= last_year.i_brand_id
		and this_year.i_class_id = last_year.i_class_id
		and this_year.i_category_id = last_year.i_category_id
		order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id
		limit 100"""],
		},
		'parameter':
		{
			'DAY': {
				'type': "integer",
				'range': [1,28]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2000]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q15",
		'query': """ select ca_zip
		,sum(cs_sales_price) as sum_sales_prices
		from catalog_sales
			,customer
			,customer_address
			,date_dim
		where cs_bill_customer_sk = c_customer_sk
		and c_current_addr_sk = ca_address_sk 
		and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475',
										'85392', '85460', '80348', '81792')
				or ca_state in ('CA','WA','GA')
				or cs_sales_price > 500)
		and cs_sold_date_sk = d_date_sk
		and d_qoy = {QOY} and d_year = {YEAR}
		group by ca_zip
		order by ca_zip is not null, ca_zip
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'QOY': {
				'type': "integer",
				'range': [1,2]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q16",
		'query': """select
		count(distinct cs_order_number) as "order count"
		,sum(cs_ext_ship_cost) as "total shipping cost"
		,sum(cs_net_profit) as "total net profit"
		from
		catalog_sales cs1
		,date_dim
		,customer_address
		,call_center
		where
			d_date between '{YEAR}-{MONTH}-01' and 
				(cast('{YEAR}-{MONTH}-01' as date) + interval '60' day)
		and cs1.cs_ship_date_sk = d_date_sk
		and cs1.cs_ship_addr_sk = ca_address_sk
		and ca_state = '{STATE}'
		and cs1.cs_call_center_sk = cc_call_center_sk
		and cc_county in ('{COUNTY1}','{COUNTY2}','{COUNTY3}','{COUNTY4}','{COUNTY5}')
		and exists (select *
					from catalog_sales cs2
					where cs1.cs_order_number = cs2.cs_order_number
					and cs1.cs_warehouse_sk <> cs2.cs_warehouse_sk)
		and not exists(select *
					from catalog_returns cr1
					where cs1.cs_order_number = cr1.cr_order_number)
		order by count(distinct cs_order_number)
		limit 100""",
		'parameter':
		{
			'COUNTY': {
			  'type': "list",
			  'size': 5,
			  'range': ["Ziebach County","Zavala County","Zapata County","Yuma County","Yukon-Koyukuk Census Area","Yuba County","Young County","York County","Yolo County","Yoakum County","Yellowstone County","Yellow Medicine County","Yell County","Yazoo County","Yavapai County","Yates County","Yankton County","Yancey County","Yamhill County","Yalobusha County","Yakutat Borough","Yakima County","Yadkin County","Wythe County","Wyoming County","Wyandotte County","Wyandot County","Wright County","Worth County","Worcester County","Woodward County","Woodson County","Woods County","Woodruff County","Woodford County","Woodbury County","Wood County","Wolfe County","Wise County","Wirt County","Winston County","Winona County","Winneshiek County","Winnebago County","Winn Parish","Winkler County","Windsor County","Windham County","Winchester city","Wilson County","Williamson County","Williamsburg County","Williamsburg city","Williams County","Willacy County","Will County","Wilkinson County","Wilkin County","Wilkes County","Wilcox County","Wilbarger County","Wicomico County","Wichita County","Wibaux County","Whitman County","Whitley County","Whitfield County","Whiteside County","White Pine County","White County","Wheeler County","Wheatland County","Whatcom County","Wharton County","Wexford County","Wetzel County","Weston County","Westmoreland County","Westchester County","West Feliciana Parish","West Carroll Parish","West Baton Rouge Parish","Wells County","Weld County","Webster Parish","Webster County","Weber County","Webb County","Weakley County","Waynesboro city","Wayne County","Waushara County","Waupaca County","Waukesha County","Watonwan County","Watauga County","Washtenaw County","Washoe County","Washita County","Washington Parish","Washington County","Washburn County","Washakie County","Waseca County","Wasco County","Wasatch County","Warrick County","Warren County","Ware County","Ward County","Wapello County","Walworth County","Walton County","Walthall County","Walsh County","Wallowa County","Waller County","Wallace County","Walla Walla County","Walker County","Waldo County","Wakulla County","Wake County","Wahkiakum County","Wagoner County","Wadena County","Wade Hampton Census Area","Wabaunsee County","Wabasha County","Wabash County","Volusia County","Virginia Beach city","Vinton County","Vilas County","Vigo County","Victoria County","Vernon Parish","Vernon County","Vermillion County","Vermilion Parish","Vermilion County","Ventura County","Venango County","Vanderburgh County","Vance County","Van Zandt County","Van Wert County","Van Buren County","Valley County","Valencia County","Valdez-Cordova Census Area","Val Verde County","Uvalde County","Utah County","Upton County","Upson County","Upshur County","Union Parish","Union County","Unicoi County","Umatilla County","Ulster County","Uintah County","Uinta County","Tyrrell County","Tyler County","Twin Falls County","Twiggs County","Tuscola County","Tuscarawas County","Tuscaloosa County","Turner County","Tuolumne County","Tunica County","Tulsa County","Tulare County","Tucker County","Trumbull County","Trousdale County","Troup County","Tripp County","Trinity County","Trimble County","Trigg County","Treutlen County","Trempealeau County","Trego County","Treasure County","Travis County","Traverse County","Transylvania County","Traill County","Towns County","Towner County","Torrance County","Toombs County","Toole County","Tooele County","Tompkins County","Tom Green County","Tolland County","Todd County","Titus County","Tishomingo County","Tipton County","Tippecanoe County","Tippah County","Tioga County","Tillman County","Tillamook County","Tift County","Thurston County","Throckmorton County","Thomas County","Thayer County","Texas County","Teton County","Terry County","Terrell County","Terrebonne Parish","Tensas Parish","Teller County","Telfair County","Tehama County","Tazewell County","Taylor County","Tattnall County","Tate County","Tarrant County","Taos County","Tangipahoa Parish","Taney County","Tama County","Tallapoosa County","Tallahatchie County","Talladega County","Taliaferro County","Talbot County","Switzerland County","Swisher County","Swift County","Sweetwater County","Sweet Grass County","Swain County","Suwannee County","Sutton County","Sutter County","Sussex County","Susquehanna County","Surry County","Sunflower County","Sumter County","Sumner County","Summit County","Summers County","Sully County","Sullivan County","Suffolk County","Suffolk city","Sublette County","Stutsman County","Strafford County","Story County","Storey County","Stonewall County","Stone County","Stokes County","Stoddard County","Stillwater County","Stewart County","Stevens County","Steuben County","Sterling County","Stephenson County","Stephens County","Steele County","Stearns County","Staunton city","Starr County","Starke County","Stark County","Stanton County","Stanly County","Stanley County","Stanislaus County","Stafford County","Spotsylvania County","Spokane County","Spink County","Spencer County","Spartanburg County","Spalding County","Southampton County","Sonoma County","Somervell County","Somerset County","Solano County","Socorro County","Snyder County","Snohomish County","Smyth County","Smith County","Slope County","Skamania County","Skagit County","Sitka Borough","Siskiyou County","Sioux County","Simpson County","Silver Bow County","Sierra County","Sibley County","Shoshone County","Shiawassee County","Sherman County","Sheridan County","Sherburne County","Shenandoah County","Shelby County","Sheboygan County","Shawnee County","Shawano County","Shasta County","Sharp County","Sharkey County","Shannon County","Shackelford County","Seward County","Sevier County","Sequoyah County","Sequatchie County","Seneca County","Seminole County","Sedgwick County","Sebastian County","Searcy County","Scurry County","Screven County","Scotts Bluff County","Scott County","Scotland County","Scioto County","Schuylkill County","Schuyler County","Schoolcraft County","Schoharie County","Schley County","Schleicher County","Schenectady County","Sawyer County","Saunders County","Sauk County","Sarpy County","Sargent County","Saratoga County","Sarasota County","Santa Rosa County","Santa Fe County","Santa Cruz County","Santa Clara County","Santa Barbara County","Sanpete County","Sanilac County","Sangamon County","Sandusky County","Sandoval County","Sanders County","Sanborn County","San Saba County","San Patricio County","San Miguel County","San Mateo County","San Luis Obispo County","San Juan County","San Joaquin County","San Jacinto County","San Francisco County","San Diego County","San Bernardino County","San Benito County","San Augustine County","Sampson County","Saluda County","Salt Lake County","Saline County","Salem County","Salem city","Saguache County","Saginaw County","Sagadahoc County","Sacramento County","Sac County","Sabine Parish","Sabine County","Rutland County","Rutherford County","Russell County","Rusk County","Rush County","Runnels County","Rowan County","Routt County","Ross County","Rosebud County","Roseau County","Roscommon County","Roosevelt County","Rooks County","Rolette County","Rogers County","Roger Mills County","Rockwall County","Rockland County","Rockingham County","Rockdale County","Rockcastle County","Rockbridge County","Rock Island County","Rock County","Robeson County","Robertson County","Roberts County","Roanoke County","Roanoke city","Roane County","Riverside County","Ritchie County","Ripley County","Rio Grande County","Rio Blanco County","Rio Arriba County","Ringgold County","Riley County","Richmond County","Richmond city","Richland Parish","Richland County","Richardson County","Rich County","Rice County","Rhea County","Reynolds County","Republic County","Renville County","Rensselaer County","Reno County","Refugio County","Reeves County","Redwood County","Red Willow County","Red River Parish","Red River County","Red Lake County","Real County","Reagan County","Ray County","Rawlins County","Ravalli County","Rappahannock County","Rapides Parish","Ransom County","Rankin County","Randolph County","Randall County","Ramsey County","Ralls County","Raleigh County","Rains County","Radford city","Racine County","Rabun County","Quitman County","Queens County","Queen Anne County","Quay County","Putnam County","Pushmataha County","Pulaski County","Pueblo County","Prowers County","Providence County","Prince William County","Prince George County","Prince Edward County","Price County","Preston County","Presque Isle County","Presidio County","Prentiss County","Preble County","Pratt County","Prairie County","Powhatan County","Poweshiek County","Power County","Powell County","Powder River County","Potter County","Pottawattamie County","Pottawatomie County","Posey County","Portsmouth city","Porter County","Portage County","Poquoson city","Pope County","Pontotoc County","Pondera County","Polk County","Pointe Coupee Parish","Poinsett County","Pocahontas County","Plymouth County","Plumas County","Pleasants County","Platte County","Plaquemines Parish","Placer County","Piute County","Pittsylvania County","Pittsburg County","Pitt County","Pitkin County","Piscataquis County","Pipestone County","Pinellas County","Pine County","Pinal County","Pima County","Pike County","Pierce County","Pickett County","Pickens County","Pickaway County","Piatt County","Phillips County","Philadelphia County","Phelps County","Pettis County","Petroleum County","Petersburg city","Person County","Pershing County","Perry County","Perquimans County","Perkins County","Pepin County","Peoria County","Penobscot County","Pennington County","Pendleton County","Pender County","Pend Oreille County","Pemiscot County","Pembina County","Pecos County","Pearl River County","Peach County","Payne County","Payette County","Pawnee County","Paulding County","Patrick County","Passaic County","Pasquotank County","Pasco County","Parmer County","Parker County","Parke County","Park County","Panola County","Pamlico County","Palo Pinto County","Palo Alto County","Palm Beach County","Page County","Pacific County","Ozaukee County","Ozark County","Oxford County","Owyhee County","Owsley County","Owen County","Overton County","Outagamie County","Ouray County","Ouachita Parish","Ouachita County","Otter Tail County","Ottawa County","Otsego County","Otoe County","Otero County","Oswego County","Oscoda County","Osceola County","Osborne County","Osage County","Orleans Parish","Orleans County","Oregon County","Orangeburg County","Orange County","Ontonagon County","Ontario County","Onslow County","Onondaga County","Oneida County","Olmsted County","Oliver County","Oldham County","Oktibbeha County","Okmulgee County","Oklahoma County","Okfuskee County","Okeechobee County","Okanogan County","Okaloosa County","Ohio County","Oglethorpe County","Ogle County","Ogemaw County","Oconto County","Oconee County","Ochiltree County","Oceana County","Ocean County","Obion County","Oakland County","O-Brien County","Nye County","Nueces County","Nuckolls County","Noxubee County","Nowata County","Nottoway County","Norton County","Norton city","Northwest Arctic Borough","Northumberland County","Northampton County","North Slope Borough","Norman County","Norfolk County","Norfolk city","Nome Census Area","Nolan County","Nodaway County","Nobles County","Noble County","Niobrara County","Nicollet County","Nicholas County","Niagara County","Nez Perce County","Newton County","Newport News city","Newport County","Newberry County","Newaygo County","New York County","New Madrid County","New London County","New Kent County","New Haven County","New Hanover County","New Castle County","Nevada County","Ness County","Neshoba County","Neosho County","Nemaha County","Nelson County","Navarro County","Navajo County","Natrona County","Natchitoches Parish","Nassau County","Nash County","Napa County","Nantucket County","Nance County","Nacogdoches County","Musselshell County","Muskogee County","Muskingum County","Muskegon County","Muscogee County","Muscatine County","Murray County","Multnomah County","Muhlenberg County","Mower County","Mountrail County","Moultrie County","Motley County","Morton County","Morrow County","Morrison County","Morris County","Morrill County","Morgan County","Morehouse Parish","Mora County","Moore County","Moody County","Montrose County","Montour County","Montmorency County","Montgomery County","Montezuma County","Monterey County","Montcalm County","Montague County","Monroe County","Monongalia County","Monona County","Mono County","Monmouth County","Moniteau County","Mohave County","Moffat County","Modoc County","Mobile County","Mitchell County","Missoula County","Mississippi County","Missaukee County","Minnehaha County","Minidoka County","Mingo County","Mineral County","Miner County","Milwaukee County","Mills County","Miller County","Mille Lacs County","Millard County","Milam County","Mifflin County","Midland County","Middlesex County","Miami County","Metcalfe County","Mesa County","Merrimack County","Merrick County","Meriwether County","Mercer County","Merced County","Menominee County","Menifee County","Mendocino County","Menard County","Mellette County","Meigs County","Meeker County","Medina County","Mecosta County","Mecklenburg County","Meagher County","Meade County","McPherson County","McNairy County","McMullen County","McMinn County","McLeod County","McLennan County","McLean County","McKinley County","McKenzie County","McKean County","McIntosh County","McHenry County","McDuffie County","McDowell County","McDonough County","McDonald County","McCurtain County","McCulloch County","McCreary County","McCracken County","McCormick County","McCook County","McCone County","McClain County","Mayes County","Maverick County","Maury County","Maui County","Mathews County","Matanuska-Susitna Borough","Matagorda County","Massac County","Mason County","Martinsville city","Martin County","Marshall County","Marquette County","Marlboro County","Mariposa County","Marion County","Marinette County","Marin County","Maries County","Maricopa County","Marengo County","Marathon County","Manitowoc County","Manistee County","Manatee County","Manassas Park city","Manassas city","Malheur County","Major County","Mahoning County","Mahnomen County","Mahaska County","Magoffin County","Madison Parish","Madison County","Madera County","Macoupin County","Macon County","Macomb County","Mackinac County","Lyon County","Lynn County","Lynchburg city","Lyman County","Lycoming County","Luzerne County","Lunenburg County","Luna County","Lumpkin County","Luce County","Lucas County","Lubbock County","Lowndes County","Loving County","Love County","Loup County","Louisa County","Loudoun County","Loudon County","Los Angeles County","Los Alamos County","Lorain County","Lonoke County","Long County","Logan County","Llano County","Livingston Parish","Livingston County","Live Oak County","Little River County","Litchfield County","Lipscomb County","Linn County","Lincoln Parish","Lincoln County","Limestone County","Licking County","Liberty County","Lexington County","Lexington city","Lewis County","Lewis and Clark County","Levy County","Letcher County","Leslie County","Leon County","Lenoir County","Lenawee County","Lemhi County","Lehigh County","Leflore County","Leelanau County","Lee County","Lebanon County","Leavenworth County","Leake County","Lea County","Le Sueur County","Le Flore County","Lawrence County","Lavaca County","Laurens County","Laurel County","Lauderdale County","Latimer County","Latah County","Lassen County","Las Animas County","Larue County","Larimer County","Laramie County","Lapeer County","Lanier County","Langlade County","Lane County","Lander County","Lancaster County","Lampasas County","LaMoure County","Lamoille County","Lamb County","Lamar County","Lake of the Woods County","Lake County","Lake and Peninsula Borough","Lagrange County","Lafourche Parish","Lafayette Parish","Lafayette County","Laclede County","Lackawanna County","Lac qui Parle County","Labette County","La Salle Parish","La Salle County","La Porte County","La Plata County","La Paz County","La Crosse County","Kossuth County","Kosciusko County","Kootenai County","Koochiching County","Kodiak Island Borough","Knox County","Knott County","Klickitat County","Kleberg County","Klamath County","Kittson County","Kittitas County","Kitsap County","Kit Carson County","Kiowa County","Kinney County","Kingsbury County","Kings County","Kingman County","Kingfisher County","King William County","King George County","King County","King and Queen County","Kimble County","Kimball County","Kidder County","Keya Paha County","Keweenaw County","Kewaunee County","Ketchikan Gateway Borough","Kershaw County","Kerr County","Kern County","Keokuk County","Kenton County","Kent County","Kenosha County","Kennebec County","Kenedy County","Kendall County","Kenai Peninsula Borough","Kemper County","Keith County","Kearny County","Kearney County","Kay County","Kaufman County","Kauai County","Karnes County","Kankakee County","Kane County","Kandiyohi County","Kanawha County","Kanabec County","Kalkaska County","Kalamazoo County","Juniata County","Juneau County","Juneau Borough","Judith Basin County","Juab County","Josephine County","Jones County","Johnston County","Johnson County","Jo Daviess County","Jim Wells County","Jim Hogg County","Jewell County","Jessamine County","Jersey County","Jerome County","Jerauld County","Jennings County","Jenkins County","Jefferson Parish","Jefferson Davis Parish","Jefferson Davis County","Jefferson County","Jeff Davis County","Jay County","Jasper County","James City County","Jackson Parish","Jackson County","Jack County","Izard County","Itawamba County","Itasca County","Issaquena County","Isle of Wight County","Island County","Isanti County","Isabella County","Irwin County","Iroquois County","Iron County","Irion County","Iredell County","Iowa County","Iosco County","Ionia County","Inyo County","Ingham County","Indiana County","Indian River County","Independence County","Imperial County","Idaho County","Ida County","Iberville Parish","Iberia Parish","Hyde County","Hutchinson County","Huron County","Huntington County","Huntingdon County","Hunterdon County","Hunt County","Humphreys County","Humboldt County","Hughes County","Huerfano County","Hudspeth County","Hudson County","Hubbard County","Howell County","Howard County","Houston County","Houghton County","Hot Springs County","Hot Spring County","Horry County","Hopkins County","Hopewell city","Hooker County","Hood River County","Hood County","Honolulu County","Holt County","Holmes County","Hoke County","Hodgeman County","Hockley County","Hocking County","Hitchcock County","Hinsdale County","Hinds County","Hillsdale County","Hillsborough County","Hill County","Highlands County","Highland County","Hidalgo County","Hickory County","Hickman County","Hettinger County","Hertford County","Hernando County","Herkimer County","Henry County","Henrico County","Hennepin County","Hendry County","Hendricks County","Henderson County","Hempstead County","Hemphill County","Heard County","Haywood County","Hays County","Hayes County","Hawkins County","Hawaii County","Haskell County","Harvey County","Hartley County","Hartford County","Hart County","Harrisonburg city","Harrison County","Harris County","Harper County","Harney County","Harnett County","Harmon County","Harlan County","Harford County","Hardy County","Harding County","Hardin County","Hardeman County","Hardee County","Haralson County","Hanson County","Hansford County","Hanover County","Hand County","Hancock County","Hampton County","Hampton city","Hampshire County","Hampden County","Hamlin County","Hamilton County","Hamblen County","Hall County","Halifax County","Hale County","Haines Borough","Habersham County","Haakon County","Gwinnett County","Guthrie County","Gunnison County","Gulf County","Guilford County","Guernsey County","Guadalupe County","Grundy County","Grimes County","Griggs County","Grenada County","Gregory County","Gregg County","Greer County","Greenwood County","Greenville County","Greenup County","Greensville County","Greenlee County","Greene County","Greenbrier County","Green Lake County","Green County","Greeley County","Grayson County","Grays Harbor County","Gray County","Graves County","Gratiot County","Granville County","Grant Parish","Grant County","Granite County","Grand Traverse County","Grand Isle County","Grand Forks County","Grand County","Grainger County","Graham County","Grafton County","Grady County","Gove County","Gosper County","Goshen County","Gordon County","Gooding County","Goodhue County","Goochland County","Gonzales County","Goliad County","Golden Valley County","Gogebic County","Glynn County","Gloucester County","Glenn County","Glasscock County","Glascock County","Gladwin County","Glades County","Glacier County","Gilpin County","Gilmer County","Gilliam County","Gillespie County","Giles County","Gilchrist County","Gila County","Gibson County","Georgetown County","George County","Gentry County","Geneva County","Genesee County","Gem County","Geauga County","Geary County","Gates County","Gaston County","Gasconade County","Garza County","Garvin County","Garrett County","Garrard County","Garland County","Garfield County","Garden County","Galveston County","Gallia County","Gallatin County","Galax city","Gaines County","Gage County","Gadsden County","Furnas County","Fulton County","Frontier County","Frio County","Fresno County","Fremont County","Freestone County","Freeborn County","Fredericksburg city","Frederick County","Franklin Parish","Franklin County","Franklin city","Fountain County","Foster County","Fort Bend County","Forsyth County","Forrest County","Forest County","Ford County","Fond du Lac County","Foard County","Fluvanna County","Floyd County","Florence County","Fleming County","Flathead County","Flagler County","Fisher County","Finney County","Fillmore County","Ferry County","Fergus County","Fentress County","Fayette County","Fauquier County","Faulkner County","Faulk County","Faribault County","Fannin County","Falls County","Falls Church city","Fallon County","Fall River County","Fairfield County","Fairfax County","Fairfax city","Fairbanks North Star Borough","Evans County","Evangeline Parish","Eureka County","Etowah County","Estill County","Essex County","Esmeralda County","Escambia County","Erie County","Erath County","Emporia city","Emmons County","Emmet County","Emery County","Emanuel County","Elmore County","Ellsworth County","Ellis County","Elliott County","Elko County","Elkhart County","Elk County","Elbert County","El Paso County","El Dorado County","Effingham County","Edwards County","Edmunds County","Edmonson County","Edgefield County","Edgecombe County","Edgar County","Eddy County","Ector County","Echols County","Eau Claire County","Eaton County","Eastland County","East Feliciana Parish","East Carroll Parish","East Baton Rouge Parish","Early County","Eagle County","Dyer County","Duval County","Dutchess County","Durham County","Duplin County","DuPage County","Dunn County","Dunklin County","Dundy County","Dukes County","Duchesne County","Dubuque County","Dubois County","Drew County","Douglas County","Dougherty County","Dorchester County","Door County","Dooly County","Donley County","Doniphan County","Dona Ana County","Dolores County","Dodge County","Doddridge County","Dixon County","Dixie County","Divide County","District of Columbia","Dinwiddie County","Dimmit County","Dillon County","Dillingham Census Area","Dickson County","Dickinson County","Dickey County","Dickenson County","Dickens County","DeWitt County","Dewey County","Deuel County","DeSoto County","Desha County","Deschutes County","Des Moines County","Denver County","Denton County","Dent County","Denali Borough","Delta County","Delaware County","Del Norte County","DeKalb County","Defiance County","Deer Lodge County","Decatur County","DeBaca County","Dearborn County","Deaf Smith County","De Witt County","De Soto Parish","De Kalb County","Day County","Dawson County","Dawes County","Davison County","Davis County","Daviess County","Davie County","Davidson County","Dauphin County","Darlington County","Darke County","Dare County","Danville city","Daniels County","Dane County","Dallas County","Dallam County","Dale County","Dakota County","Daggett County","Dade County","Cuyahoga County","Custer County","Curry County","Currituck County","Cuming County","Cumberland County","Culpeper County","Cullman County","Culberson County","Crowley County","Crow Wing County","Cross County","Crosby County","Crook County","Crockett County","Crittenden County","Crisp County","Crenshaw County","Creek County","Crawford County","Craven County","Crane County","Craighead County","Craig County","Cowlitz County","Cowley County","Coweta County","Covington County","Covington city","Cottonwood County","Cotton County","Cottle County","Costilla County","Coshocton County","Coryell County","Cortland County","Corson County","Copiah County","Coosa County","Coos County","Cooper County","Cooke County","Cook County","Conway County","Converse County","Contra Costa County","Conejos County","Conecuh County","Concordia Parish","Concho County","Comanche County","Comal County","Colusa County","Columbus County","Columbiana County","Columbia County","Colquitt County","Colorado County","Colonial Heights city","Collingsworth County","Collin County","Collier County","Colleton County","Colfax County","Coles County","Coleman County","Cole County","Colbert County","Coke County","Coffey County","Coffee County","Codington County","Coconino County","Cocke County","Cochran County","Cochise County","Cobb County","Coal County","Coahoma County","Cloud County","Clinton County","Clinch County","Clifton Forge city","Cleveland County","Clermont County","Cleburne County","Clearwater County","Clearfield County","Clear Creek County","Clayton County","Clay County","Clatsop County","Clarke County","Clark County","Clarion County","Clarendon County","Clare County","Clallam County","Claiborne Parish","Claiborne County","Clackamas County","Citrus County","Cimarron County","Cibola County","Churchill County","Christian County","Chowan County","Chouteau County","Choctaw County","Chittenden County","Chisago County","Chippewa County","Chilton County","Childress County","Chicot County","Chickasaw County","Cheyenne County","Chesterfield County","Chester County","Cheshire County","Chesapeake city","Cherry County","Cherokee County","Chenango County","Chemung County","Chelan County","Cheboygan County","Cheatham County","Chaves County","Chautauqua County","Chattooga County","Chattahoochee County","Chatham County","Chase County","Charlton County","Charlottesville city","Charlotte County","Charlevoix County","Charleston County","Charles Mix County","Charles County","Charles City County","Chariton County","Champaign County","Chambers County","Chaffee County","Cerro Gordo County","Centre County","Cedar County","Cecil County","Cayuga County","Cavalier County","Cattaraugus County","Catron County","Catoosa County","Catawba County","Catahoula Parish","Caswell County","Castro County","Cassia County","Cass County","Casey County","Cascade County","Carver County","Carteret County","Carter County","Carson County","Carson City","Carroll County","Caroline County","Carlton County","Carlisle County","Caribou County","Carbon County","Cape May County","Cape Girardeau County","Canyon County","Cannon County","Candler County","Canadian County","Campbell County","Camp County","Cameron Parish","Cameron County","Camden County","Cambria County","Camas County","Calvert County","Calumet County","Calloway County","Callaway County","Callahan County","Calhoun County","Caledonia County","Caldwell Parish","Caldwell County","Calcasieu Parish","Calaveras County","Caddo Parish","Caddo County","Cache County","Cabell County","Cabarrus County","Butts County","Butte County","Butler County","Burt County","Burnett County","Burnet County","Burlington County","Burleson County","Burleigh County","Burke County","Bureau County","Buncombe County","Bullock County","Bulloch County","Bullitt County","Buffalo County","Buena Vista County","Buena Vista city","Bucks County","Buckingham County","Buchanan County","Bryan County","Brunswick County","Brule County","Brown County","Broward County","Broome County","Brooks County","Brookings County","Brooke County","Bronx County","Broadwater County","Bristol County","Bristol city","Bristol Bay Borough","Briscoe County","Brewster County","Brevard County","Bremer County","Breckinridge County","Breathitt County","Brazos County","Brazoria County","Braxton County","Brantley County","Branch County","Bradley County","Bradford County","Bracken County","Boyle County","Boyd County","Box Elder County","Box Butte County","Bowman County","Bowie County","Bourbon County","Boundary County","Boulder County","Bottineau County","Botetourt County","Bossier Parish","Bosque County","Borden County","Boone County","Bonneville County","Bonner County","Bond County","Bon Homme County","Bollinger County","Bolivar County","Boise County","Blue Earth County","Blount County","Bledsoe County","Bleckley County","Bland County","Blanco County","Blair County","Blaine County","Bladen County","Blackford County","Black Hawk County","Bingham County","Billings County","Big Stone County","Big Horn County","Bienville Parish","Bibb County","Bexar County","Bethel Census Area","Bertie County","Berrien County","Bernalillo County","Berkshire County","Berks County","Berkeley County","Bergen County","Benzie County","Benton County","Bent County","Benson County","Bennington County","Bennett County","Benewah County","Ben Hill County","Beltrami County","Belmont County","Bell County","Belknap County","Bee County","Bedford County","Bedford city","Beckham County","Becker County","Beaverhead County","Beaver County","Beauregard Parish","Beaufort County","Bear Lake County","Beadle County","Baylor County","Bayfield County","Bay County","Baxter County","Bath County","Bates County","Bastrop County","Bartow County","Barton County","Bartholomew County","Barry County","Barrow County","Barron County","Barren County","Barnwell County","Barnstable County","Barnes County","Barbour County","Barber County","Baraga County","Bannock County","Banner County","Banks County","Bandera County","Bamberg County","Baltimore County","Baltimore city","Ballard County","Baldwin County","Baker County","Bailey County","Bacon County","Baca County","Avoyelles Parish","Avery County","Autauga County","Austin County","Aurora County","Augusta County","Auglaize County","Audubon County","Audrain County","Attala County","Atoka County","Atlantic County","Atkinson County","Athens County","Atchison County","Atascosa County","Assumption Parish","Asotin County","Ashtabula County","Ashley County","Ashland County","Ashe County","Ascension Parish","Arthur County","Aroostook County","Armstrong County","Arlington County","Arkansas County","Arenac County","Archuleta County","Archer County","Arapahoe County","Aransas County","Appomattox County","Appling County","Appanoose County","Apache County","Antrim County","Antelope County","Anson County","Anoka County","Anne Arundel County","Angelina County","Androscoggin County","Andrews County","Andrew County","Anderson County","Anchorage Borough","Amite County","Amherst County","Amelia County","Amador County","Alpine County","Alpena County","Allendale County","Allen Parish","Allen County","Allegheny County","Alleghany County","Allegany County","Allegan County","Allamakee County","Alger County","Alfalfa County","Alexandria city","Alexander County","Aleutians West Census Area","Aleutians East Borough","Alcorn County","Alcona County","Albemarle County","Albany County","Alamosa County","Alameda County","Alamance County","Alachua County","Aitkin County","Aiken County","Addison County","Adams County","Adair County","Ada County","Accomack County","Acadia Parish","Abbeville County"]
			},
			'MONTH': {
			  'type': "integer",
			  'range': [2,5]
			},
			'STATE': {
			  'type': "list",
			  'range': ["AK","AL","AR","AZ","CA","CO","CT","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","ME","MI","MN","MO","MS","MT","NC","ND","NE","NJ","NM","NV","OH","OK","OR","PA","SC","SD","TN","TX","UT","VA","WA","WI","WV"]
			},
			'YEAR': {
			  'type': "integer",
			  'range': [1999,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q17",
		'query': """ select i_item_id
			,i_item_desc
			,s_state
			,count(ss_quantity) as store_sales_quantitycount
			,avg(ss_quantity) as store_sales_quantityave
			,stddev_samp(ss_quantity) as store_sales_quantitystdev
			,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
			,count(sr_return_quantity) as store_returns_quantitycount
			,avg(sr_return_quantity) as store_returns_quantityave
			,stddev_samp(sr_return_quantity) as store_returns_quantitystdev
			,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
			,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
			,stddev_samp(cs_quantity) as catalog_sales_quantitystdev
			,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
		from store_sales
			,store_returns
			,catalog_sales
			,date_dim d1
			,date_dim d2
			,date_dim d3
			,store
			,item
		where d1.d_quarter_name = '{YEAR}Q1'
		and d1.d_date_sk = ss_sold_date_sk
		and i_item_sk = ss_item_sk
		and s_store_sk = ss_store_sk
		and ss_customer_sk = sr_customer_sk
		and ss_item_sk = sr_item_sk
		and ss_ticket_number = sr_ticket_number
		and sr_returned_date_sk = d2.d_date_sk
		and d2.d_quarter_name in ('{YEAR}Q1','{YEAR}Q2','{YEAR}Q3')
		and sr_customer_sk = cs_bill_customer_sk
		and sr_item_sk = cs_item_sk
		and cs_sold_date_sk = d3.d_date_sk
		and d3.d_quarter_name in ('{YEAR}Q1','{YEAR}Q2','{YEAR}Q3')
		group by i_item_id
				,i_item_desc
				,s_state
		order by i_item_id
				,i_item_desc
				,s_state
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q18",
		'query': """select i_item_id,
			ca_country,
			ca_state, 
			ca_county,
			avg( cast(cs_quantity as decimal(12,2))) agg1,
			avg( cast(cs_list_price as decimal(12,2))) agg2,
			avg( cast(cs_coupon_amt as decimal(12,2))) agg3,
			avg( cast(cs_sales_price as decimal(12,2))) agg4,
			avg( cast(cs_net_profit as decimal(12,2))) agg5,
			avg( cast(c_birth_year as decimal(12,2))) agg6,
			avg( cast(cd1.cd_dep_count as decimal(12,2))) agg7
		from catalog_sales, customer_demographics cd1, 
			customer_demographics cd2, customer, customer_address, date_dim, item
		where cs_sold_date_sk = d_date_sk and
			cs_item_sk = i_item_sk and
			cs_bill_cdemo_sk = cd1.cd_demo_sk and
			cs_bill_customer_sk = c_customer_sk and
			cd1.cd_gender = '{GEN}' and 
			cd1.cd_education_status = '{ES}' and
			c_current_cdemo_sk = cd2.cd_demo_sk and
			c_current_addr_sk = ca_address_sk and
			c_birth_month in ({MONTH1},{MONTH2},{MONTH3},{MONTH4},{MONTH5},{MONTH6}) and
			d_year = {YEAR} and
			ca_state in ('{STATE1}','{STATE2}','{STATE3}','{STATE4}','{STATE5}','{STATE6}','{STATE7}')
		group by i_item_id, ca_country, ca_state, ca_county with rollup
		order by ca_country is not null, ca_country,
				ca_state is not null, ca_state, 
				ca_county is not null, ca_county,
		i_item_id is not null, i_item_id
		limit 100""",
			'DBMS': {
			'PostgreSQL': """select i_item_id,
				ca_country,
				ca_state, 
				ca_county,
				avg( cast(cs_quantity as decimal(12,2))) agg1,
				avg( cast(cs_list_price as decimal(12,2))) agg2,
				avg( cast(cs_coupon_amt as decimal(12,2))) agg3,
				avg( cast(cs_sales_price as decimal(12,2))) agg4,
				avg( cast(cs_net_profit as decimal(12,2))) agg5,
				avg( cast(c_birth_year as decimal(12,2))) agg6,
				avg( cast(cd1.cd_dep_count as decimal(12,2))) agg7
			from catalog_sales, customer_demographics cd1, 
				customer_demographics cd2, customer, customer_address, date_dim, item
			where cs_sold_date_sk = d_date_sk and
				cs_item_sk = i_item_sk and
				cs_bill_cdemo_sk = cd1.cd_demo_sk and
				cs_bill_customer_sk = c_customer_sk and
				cd1.cd_gender = '{GEN}' and 
				cd1.cd_education_status = '{ES}' and
				c_current_cdemo_sk = cd2.cd_demo_sk and
				c_current_addr_sk = ca_address_sk and
				c_birth_month in ({MONTH1},{MONTH2},{MONTH3},{MONTH4},{MONTH5},{MONTH6}) and
				d_year = {YEAR} and
				ca_state in ('{STATE1}','{STATE2}','{STATE3}','{STATE4}','{STATE5}','{STATE6}','{STATE7}')
			group by rollup(i_item_id, ca_country, ca_state, ca_county)
			order by ca_country is not null, ca_country,
					ca_state is not null, ca_state, 
					ca_county is not null, ca_county,
			i_item_id is not null, i_item_id
			limit 100""",
			'MonetDB': """select i_item_id,
					ca_country,
					ca_state, 
					ca_county,
					avg( cast(cs_quantity as decimal(12,2))) agg1,
					avg( cast(cs_list_price as decimal(12,2))) agg2,
					avg( cast(cs_coupon_amt as decimal(12,2))) agg3,
					avg( cast(cs_sales_price as decimal(12,2))) agg4,
					avg( cast(cs_net_profit as decimal(12,2))) agg5,
					avg( cast(c_birth_year as decimal(12,2))) agg6,
					avg( cast(cd1.cd_dep_count as decimal(12,2))) agg7
			from catalog_sales, customer_demographics cd1, 
				customer_demographics cd2, customer, customer_address, date_dim, item
			where cs_sold_date_sk = d_date_sk and
				cs_item_sk = i_item_sk and
				cs_bill_cdemo_sk = cd1.cd_demo_sk and
				cs_bill_customer_sk = c_customer_sk and
				cd1.cd_gender = '{GEN}' and 
				cd1.cd_education_status = '{ES}' and
				c_current_cdemo_sk = cd2.cd_demo_sk and
				c_current_addr_sk = ca_address_sk and
				c_birth_month in ({MONTH1},{MONTH2},{MONTH3},{MONTH4},{MONTH5},{MONTH6}) and
				d_year = {YEAR} and
				ca_state in ('{STATE1}','{STATE2}','{STATE3}','{STATE4}','{STATE5}','{STATE6}','{STATE7}')
			group by rollup(i_item_id, ca_country, ca_state, ca_county)
			order by ca_country is not null, ca_country,
					ca_state is not null, ca_state, 
					ca_county is not null, ca_county,
			i_item_id is not null, i_item_id
			limit 100""",			
			'MariaDB': """with total as (select i_item_id,
						ca_country,
						ca_state, 
						ca_county,
						avg( cast(cs_quantity as decimal(12,2))) agg1,
						avg( cast(cs_list_price as decimal(12,2))) agg2,
						avg( cast(cs_coupon_amt as decimal(12,2))) agg3,
						avg( cast(cs_sales_price as decimal(12,2))) agg4,
						avg( cast(cs_net_profit as decimal(12,2))) agg5,
						avg( cast(c_birth_year as decimal(12,2))) agg6,
						avg( cast(cd1.cd_dep_count as decimal(12,2))) agg7
				from catalog_sales, customer_demographics cd1, 
					customer_demographics cd2, customer, customer_address, date_dim, item
				where cs_sold_date_sk = d_date_sk and
					cs_item_sk = i_item_sk and
					cs_bill_cdemo_sk = cd1.cd_demo_sk and
					cs_bill_customer_sk = c_customer_sk and
					cd1.cd_gender = '{GEN}' and 
					cd1.cd_education_status = '{ES}' and
					c_current_cdemo_sk = cd2.cd_demo_sk and
					c_current_addr_sk = ca_address_sk and
					c_birth_month in ({MONTH1},{MONTH2},{MONTH3},{MONTH4},{MONTH5},{MONTH6}) and
					d_year = {YEAR} and
					ca_state in ('{STATE1}','{STATE2}','{STATE3}','{STATE4}','{STATE5}','{STATE6}','{STATE7}')
				group by i_item_id, ca_country, ca_state, ca_county with rollup)
				select * from total
				order by ca_country is not null, ca_country,
						ca_state is not null, ca_state, 
						ca_county is not null, ca_county,
				i_item_id is not null, i_item_id
				limit 100"""
		},
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'STATE': {
				'type': "list",
				'size': 7,
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","ME","MI","MN","MO","MS","MT","NC","ND","NE","NJ","NM","NV","OH","OK","OR","PA","SC","SD","TN","TX","UT","VA","WA","WI","WV"]
			},
			'MONTH': {
				'type': "integer",
				'size': 6,
				'range': [1,12]
			},
			'GEN': {
				'type': "list",
				'range': ["M","F"]
			},
			'ES': {
				'type': "list",
				'range': ["Primary","Secondary","College","2 yr Degree","4 yr Degree", "Advanced Degree","Unknown"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q19",
		'query': """select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
		sum(ss_ext_sales_price) ext_price
		from date_dim, store_sales, item,customer,customer_address,store
		where d_date_sk = ss_sold_date_sk
		and ss_item_sk = i_item_sk
		and i_manager_id={MANAGER}
		and d_moy={MONTH}
		and d_year={YEAR}
		and ss_customer_sk = c_customer_sk 
		and c_current_addr_sk = ca_address_sk
		and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
		and ss_store_sk = s_store_sk 
		group by i_brand
			,i_brand_id
			,i_manufact_id
			,i_manufact
		order by ext_price desc
				,i_brand
				,i_brand_id
				,i_manufact_id
				,i_manufact
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'MONTH': {
				'type': "integer",
				'range': [11,12]
			},
			'MANAGER': {
				'type': "integer",
				'range': [1,100]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q20",
		'query': """ select i_item_id
			,i_item_desc 
			,i_category 
			,i_class 
			,i_current_price
			,sum(cs_ext_sales_price) as itemrevenue 
			,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
				(partition by i_class) as revenueratio
		from catalog_sales
			,item 
			,date_dim
		where cs_item_sk = i_item_sk 
		and i_category in ('{CATEGORY1}', '{CATEGORY2}','{CATEGORY3}')
		and cs_sold_date_sk = d_date_sk
		and d_date between cast('{YEAR}-01-01' as date) 
			and (cast('{YEAR}-01-01' as date) + interval '30' day)
		group by i_item_id
				,i_item_desc 
				,i_category
				,i_class
				,i_current_price
		order by i_category
				,i_class
				,i_item_id
				,i_item_desc
				,revenueratio
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'CATEGORY': {
				'type': "list",
				'size': 3,
				'range': ["Books","Children","Electronics","Home","Jewelry","Men","Music","Shoes","Sports","Women"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q21",
		'query': """ select *
		from(select w_warehouse_name
			,i_item_id
			,sum(case when (cast(d_date as date) < cast('{YEAR}-{MONTH}-{DAY}' as date))
				then inv_quantity_on_hand 
				else 0 end) as inv_before
			,sum(case when (cast(d_date as date) >= cast('{YEAR}-{MONTH}-{DAY}' as date))
				then inv_quantity_on_hand 
				else 0 end) as inv_after
		from inventory
			,warehouse
			,item
			,date_dim
		where i_current_price between 0.99 and 1.49
			and i_item_sk          = inv_item_sk
			and inv_warehouse_sk   = w_warehouse_sk
			and inv_date_sk    = d_date_sk
			and d_date between (cast('{YEAR}-{MONTH}-{DAY}' as date) - interval '30' day)
							and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '30' day)
		group by w_warehouse_name, i_item_id) x
		where (case when inv_before > 0 
					then inv_after / inv_before 
					else null
					end) between 2.0/3.0 and 3.0/2.0
		order by w_warehouse_name is not null, w_warehouse_name
				,i_item_id is not null, i_item_id, inv_before, inv_after
		limit 100""",
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [1,12]
			},
			'DAY': {
				'type': "integer",
				'range': [1,28]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q22",
		'query': """select i_product_name
				,i_brand
				,i_class
				,i_category
				,avg(inv_quantity_on_hand) qoh
			from inventory
				,date_dim
				,item
			where inv_date_sk=d_date_sk
				and inv_item_sk=i_item_sk
				and d_month_seq between {DMS} and {DMS} + 11
			group by i_product_name
				,i_brand
				,i_class
				,i_category with rollup
		order by qoh is not null, qoh, i_product_name is not null, i_product_name, i_brand is not null, i_brand, i_class is not null, i_class, i_category is not null, i_category
		limit 100""",
		'DBMS': {
			'MariaDB': """with total as (select i_product_name
				,i_brand
				,i_class
				,i_category
				,avg(inv_quantity_on_hand) qoh
				from inventory
					,date_dim
					,item
				where inv_date_sk=d_date_sk
						and inv_item_sk=i_item_sk
						and d_month_seq between {DMS} and {DMS} + 11
				group by i_product_name
								,i_brand
								,i_class
								,i_category with rollup)
			select * from total
			order by qoh is not null, qoh, i_product_name is not null, i_product_name, i_brand is not null, i_brand, i_class is not null, i_class, i_category is not null, i_category
			limit 100""",
			'MonetDB': """select i_product_name
				,i_brand
				,i_class
				,i_category
				,avg(inv_quantity_on_hand) qoh
				from inventory
					,date_dim
					,item
				where inv_date_sk=d_date_sk
						and inv_item_sk=i_item_sk
						and d_month_seq between {DMS} and {DMS} + 11
				group by rollup(i_product_name
								,i_brand
								,i_class
								,i_category)
			order by avg(inv_quantity_on_hand) is not null, avg(inv_quantity_on_hand), i_product_name is not null, i_product_name, i_brand is not null, i_brand, i_class is not null, i_class, i_category is not null, i_category
			limit 100""",
			'PostgreSQL': """select i_product_name
				,i_brand
				,i_class
				,i_category
				,avg(inv_quantity_on_hand) qoh
				from inventory
					,date_dim
					,item
				where inv_date_sk=d_date_sk
						and inv_item_sk=i_item_sk
						and d_month_seq between {DMS} and {DMS} + 11
				group by rollup(i_product_name
								,i_brand
								,i_class
								,i_category)
			order by avg(inv_quantity_on_hand) is not null, avg(inv_quantity_on_hand), i_product_name is not null, i_product_name, i_brand is not null, i_brand, i_class is not null, i_class, i_category is not null, i_category
			limit 100"""
		},
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
		{
		'title': "TPC-DS Q23a+b",
		'query': ["""with frequent_ss_items as 
		(select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
		from store_sales
			,date_dim 
			,item
		where ss_sold_date_sk = d_date_sk
			and ss_item_sk = i_item_sk 
			and d_year in ({YEAR},{YEAR}+1,{YEAR}+2,{YEAR}+3)
		group by substr(i_item_desc,1,30),i_item_sk,d_date
		having count(*) >4),
		max_store_sales as
		(select max(csales) tpcds_cmax 
		from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
				from store_sales
					,customer
					,date_dim 
				where ss_customer_sk = c_customer_sk
				and ss_sold_date_sk = d_date_sk
				and d_year in ({YEAR},{YEAR}+1,{YEAR}+2,{YEAR}+3) 
				group by c_customer_sk) x),
		best_ss_customer as
		(select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
		from store_sales
			,customer
		where ss_customer_sk = c_customer_sk
		group by c_customer_sk
		having sum(ss_quantity*ss_sales_price) > ({TOPPERCENT}/100.0) * (select
		*
		from
		max_store_sales))
		select sum(sales)
		from (select cs_quantity*cs_list_price sales
			from catalog_sales
				,date_dim 
			where d_year = {YEAR} 
				and d_moy = {MONTH} 
				and cs_sold_date_sk = d_date_sk 
				and cs_item_sk in (select item_sk from frequent_ss_items)
				and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer)
			union all
			select ws_quantity*ws_list_price sales
			from web_sales 
				,date_dim 
			where d_year = {YEAR} 
				and d_moy = {MONTH} 
				and ws_sold_date_sk = d_date_sk 
				and ws_item_sk in (select item_sk from frequent_ss_items)
				and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer)) y
		limit 100""", """with frequent_ss_items as
		(select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
		from store_sales
			,date_dim
			,item
		where ss_sold_date_sk = d_date_sk
			and ss_item_sk = i_item_sk
			and d_year in ({YEAR},{YEAR} + 1,{YEAR} + 2,{YEAR} + 3)
		group by substr(i_item_desc,1,30),i_item_sk,d_date
		having count(*) >4),
		max_store_sales as
		(select max(csales) tpcds_cmax
		from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
				from store_sales
					,customer
					,date_dim 
				where ss_customer_sk = c_customer_sk
				and ss_sold_date_sk = d_date_sk
				and d_year in ({YEAR},{YEAR}+1,{YEAR}+2,{YEAR}+3)
				group by c_customer_sk) x),
		best_ss_customer as
		(select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
		from store_sales
			,customer
		where ss_customer_sk = c_customer_sk
		group by c_customer_sk
		having sum(ss_quantity*ss_sales_price) > ({TOPPERCENT}/100.0) * (select
		*
		from max_store_sales))
		select c_last_name,c_first_name,sales
		from (select c_last_name,c_first_name,sum(cs_quantity*cs_list_price) sales
				from catalog_sales
					,customer
					,date_dim 
				where d_year = {YEAR} 
				and d_moy = {MONTH} 
				and cs_sold_date_sk = d_date_sk 
				and cs_item_sk in (select item_sk from frequent_ss_items)
				and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer)
				and cs_bill_customer_sk = c_customer_sk 
			group by c_last_name,c_first_name
			union all
			select c_last_name,c_first_name,sum(ws_quantity*ws_list_price) sales
			from web_sales
				,customer
				,date_dim 
			where d_year = {YEAR} 
				and d_moy = {MONTH} 
				and ws_sold_date_sk = d_date_sk 
				and ws_item_sk in (select item_sk from frequent_ss_items)
				and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer)
				and ws_bill_customer_sk = c_customer_sk
			group by c_last_name,c_first_name) y
			order by c_last_name,c_first_name,sales
		limit 100"""],
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [1,7]
			},
			'TOPPERCENT': {
				'type': "integer",
				'range': [95,95]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2000]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q24a+b",
		'query': ["""with ssales as
		(select c_last_name
			,c_first_name
			,s_store_name
			,ca_state
			,s_state
			,i_color
			,i_current_price
			,i_manager_id
			,i_units
			,i_size
			,sum({AMOUNTONE}) netpaid
		from store_sales
			,store_returns
			,store
			,item
			,customer
			,customer_address
		where ss_ticket_number = sr_ticket_number
		and ss_item_sk = sr_item_sk
		and ss_customer_sk = c_customer_sk
		and ss_item_sk = i_item_sk
		and ss_store_sk = s_store_sk
		and c_current_addr_sk = ca_address_sk
		and c_birth_country <> upper(ca_country)
		and s_zip = ca_zip
		and s_market_id={MARKET}
		group by c_last_name
			,c_first_name
			,s_store_name
			,ca_state
			,s_state
			,i_color
			,i_current_price
			,i_manager_id
			,i_units
			,i_size)
		select c_last_name
			,c_first_name
			,s_store_name
			,sum(netpaid) paid
		from ssales
		where i_color = '{COLOR}'
		group by c_last_name
			,c_first_name
			,s_store_name
		having sum(netpaid) > (select 0.05*avg(netpaid)
										from ssales)
		order by c_last_name
				,c_first_name
				,s_store_name
		""", """
		with ssales as
		(select c_last_name
			,c_first_name
			,s_store_name
			,ca_state
			,s_state
			,i_color
			,i_current_price
			,i_manager_id
			,i_units
			,i_size
			,sum({AMOUNTONE}) netpaid
		from store_sales
			,store_returns
			,store
			,item
			,customer
			,customer_address
		where ss_ticket_number = sr_ticket_number
		and ss_item_sk = sr_item_sk
		and ss_customer_sk = c_customer_sk
		and ss_item_sk = i_item_sk
		and ss_store_sk = s_store_sk
		and c_current_addr_sk = ca_address_sk
		and c_birth_country <> upper(ca_country)
		and s_zip = ca_zip
		and s_market_id = {MARKET}
		group by c_last_name
				,c_first_name
				,s_store_name
				,ca_state
				,s_state
				,i_color
				,i_current_price
				,i_manager_id
				,i_units
				,i_size)
		select c_last_name
			,c_first_name
			,s_store_name
			,sum(netpaid) paid
		from ssales
		where i_color = '{COLOR}'
		group by c_last_name
				,c_first_name
				,s_store_name
		having sum(netpaid) > (select 0.05*avg(netpaid)
								from ssales)
		order by c_last_name
				,c_first_name
				,s_store_name
		"""],
		'parameter':
		{
			'MARKET': {
				'type': "integer",
				'range': [5,10]
			},
			'COLOR': {
				'type': "list",
				'range': ["bisque","black","blue","blush","chocolate","coral","cream","cyan","firebrick","frosted","gainsboro","ghost","goldenrod","green","grey","honeydew","hot","indian","ivory","khaki","lace","lavender","lawn","lime","linen","maroon","medium","midnight","mint","misty","moccasin","navy","olive","orange","orchid","pale","papaya","peach","peru","pink","plum","powder","puff","purple","red","rose","rosy","royal","saddle","salmon","sandy","seashell","sienna","sky","slate","smoke","snow","spring","steel","tan","thistle","tomato","turquoise","violet","wheat","white","yellow"]
			},
			'AMOUNTONE': {
				'type': "list",
				'range': ["ss_net_paid","ss_net_paid_inc_tax","ss_net_profit","ss_sales_price","ss_ext_sales_price"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q25",
		'query': """ select
			i_item_id
			,i_item_desc
			,s_store_id
			,s_store_name
			,{AGG}(ss_net_profit) as store_sales_profit
			,{AGG}(sr_net_loss) as store_returns_loss
			,{AGG}(cs_net_profit) as catalog_sales_profit
		from
			store_sales
			,store_returns
			,catalog_sales
			,date_dim d1
			,date_dim d2
			,date_dim d3
			,store
			,item
		where
			d1.d_moy = 4
			and d1.d_year = {YEAR}
			and d1.d_date_sk = ss_sold_date_sk
			and i_item_sk = ss_item_sk
			and s_store_sk = ss_store_sk
			and ss_customer_sk = sr_customer_sk
			and ss_item_sk = sr_item_sk
			and ss_ticket_number = sr_ticket_number
			and sr_returned_date_sk = d2.d_date_sk
			and d2.d_moy               between 4 and  10
			and d2.d_year              = {YEAR}
			and sr_customer_sk = cs_bill_customer_sk
			and sr_item_sk = cs_item_sk
			and cs_sold_date_sk = d3.d_date_sk
			and d3.d_moy               between 4 and  10 
			and d3.d_year              = {YEAR}
		group by
			i_item_id
			,i_item_desc
			,s_store_id
			,s_store_name
		order by
			i_item_id
			,i_item_desc
			,s_store_id
			,s_store_name
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'AGG': {
				'type': "list",
				'range': ["sum","min","max","avg","stddev_samp"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q26",
		'query': """  select  i_item_id, 
				avg(cs_quantity) agg1,
				avg(cs_list_price) agg2,
				avg(cs_coupon_amt) agg3,
				avg(cs_sales_price) agg4 
		from catalog_sales, customer_demographics, date_dim, item, promotion
		where cs_sold_date_sk = d_date_sk and
			cs_item_sk = i_item_sk and
			cs_bill_cdemo_sk = cd_demo_sk and
			cs_promo_sk = p_promo_sk and
			cd_gender = '{GEN}' and 
			cd_marital_status = '{MS}' and
			cd_education_status = '{ES}' and
			(p_channel_email = 'N' or p_channel_event = 'N') and
			d_year = {YEAR} 
		group by i_item_id
		order by i_item_id
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'MS': {
				'type': "list",
				'range': ["M","S","D","W","U"]
			},
			'GEN': {
				'type': "list",
				'range': ["M","F"]
			},
			'ES': {
				'type': "list",
				'range': ["Primary","Secondary","College","2 yr Degree","4 yr Degree", "Advanced Degree","Unknown"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q27",
		'query': """  select  i_item_id,
			s_state, grouping(s_state) g_state,
			avg(ss_quantity) agg1,
			avg(ss_list_price) agg2,
			avg(ss_coupon_amt) agg3,
			avg(ss_sales_price) agg4
		from store_sales, customer_demographics, date_dim, store, item
		where ss_sold_date_sk = d_date_sk and
			ss_item_sk = i_item_sk and
			ss_store_sk = s_store_sk and
			ss_cdemo_sk = cd_demo_sk and
			cd_gender = '{GEN}' and
			cd_marital_status = '{MS}' and
			cd_education_status = '{ES}' and
			d_year = {YEAR} and
			s_state in ('{STATE1}','{STATE2}', '{STATE3}', '{STATE4}', '{STATE5}', '{STATE6}')
		group by i_item_id, s_state with rollup
		order by i_item_id
				,s_state
		limit 100""",
		'DBMS': {
			'MariaDB': """  SELECT i_item_id,
			       s_state,
			       CASE WHEN s_state IS NULL THEN 1 ELSE 0 END AS g_state,
			       AVG(ss_quantity) AS agg1,
			       AVG(ss_list_price) AS agg2,
			       AVG(ss_coupon_amt) AS agg3,
			       AVG(ss_sales_price) AS agg4
			FROM store_sales
			JOIN customer_demographics ON ss_cdemo_sk = cd_demo_sk
			JOIN date_dim ON ss_sold_date_sk = d_date_sk
			JOIN store ON ss_store_sk = s_store_sk
			JOIN item ON ss_item_sk = i_item_sk
			WHERE cd_gender = '{GEN}'
			  AND cd_marital_status = '{MS}'
			  AND cd_education_status = '{ES}'
			  AND d_year = {YEAR}
			  AND s_state IN ('{STATE1}', '{STATE2}', '{STATE3}', '{STATE4}', '{STATE5}', '{STATE6}')
			GROUP BY i_item_id, s_state with ROLLUP
			LIMIT 100""",
			'MonetDB': """  select  i_item_id,
				s_state, grouping(s_state) g_state,
				avg(ss_quantity) agg1,
				avg(ss_list_price) agg2,
				avg(ss_coupon_amt) agg3,
				avg(ss_sales_price) agg4
			from store_sales, customer_demographics, date_dim, store, item
			where ss_sold_date_sk = d_date_sk and
				ss_item_sk = i_item_sk and
				ss_store_sk = s_store_sk and
				ss_cdemo_sk = cd_demo_sk and
				cd_gender = '{GEN}' and
				cd_marital_status = '{MS}' and
				cd_education_status = '{ES}' and
				d_year = '{YEAR}' and
				s_state in ('{STATE1}','{STATE2}', '{STATE3}', '{STATE4}', '{STATE5}', '{STATE6}')
			group by rollup(i_item_id, s_state)
			order by i_item_id
					,s_state
			limit 100""",
			'PostgreSQL': """  select  i_item_id,
				s_state, grouping(s_state) g_state,
				avg(ss_quantity) agg1,
				avg(ss_list_price) agg2,
				avg(ss_coupon_amt) agg3,
				avg(ss_sales_price) agg4
			from store_sales, customer_demographics, date_dim, store, item
			where ss_sold_date_sk = d_date_sk and
				ss_item_sk = i_item_sk and
				ss_store_sk = s_store_sk and
				ss_cdemo_sk = cd_demo_sk and
				cd_gender = '{GEN}' and
				cd_marital_status = '{MS}' and
				cd_education_status = '{ES}' and
				d_year = '{YEAR}' and
				s_state in ('{STATE1}','{STATE2}', '{STATE3}', '{STATE4}', '{STATE5}', '{STATE6}')
			group by rollup(i_item_id, s_state)
			order by i_item_id
					,s_state
			limit 100""",
		},
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'STATE': {
				'type': "list",
				'size': 6,
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","ME","MI","MN","MO","MS","MT","NC","ND","NE","NJ","NM","NV","OH","OK","OR","PA","SC","SD","TN","TX","UT","VA","WA","WI","WV"]
			},
			'MS': {
				'type': "list",
				'range': ["M","S","D","W","U"]
			},
			'GEN': {
				'type': "list",
				'range': ["M","F"]
			},
			'ES': {
				'type': "list",
				'range': ["Primary","Secondary","College","2 yr Degree","4 yr Degree","Advanced Degree","Unknown"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q28",
		'query': """ select  *
		from (select avg(ss_list_price) B1_LP
					,count(ss_list_price) B1_CNT
					,count(distinct ss_list_price) B1_CNTD
			from store_sales
			where ss_quantity between 0 and 5
				and (ss_list_price between {LISTPRICE1} and {LISTPRICE1}+10 
					or ss_coupon_amt between {COUPONAMT1} and {COUPONAMT1}+1000
					or ss_wholesale_cost between {WHOLESALECOST1} and {WHOLESALECOST1}+20)) B1,
			(select avg(ss_list_price) B2_LP
					,count(ss_list_price) B2_CNT
					,count(distinct ss_list_price) B2_CNTD
			from store_sales
			where ss_quantity between 6 and 10
				and (ss_list_price between {LISTPRICE2} and {LISTPRICE2}+10
				or ss_coupon_amt between {COUPONAMT2} and {COUPONAMT2}+1000
				or ss_wholesale_cost between {WHOLESALECOST2} and {WHOLESALECOST2}+20)) B2,
			(select avg(ss_list_price) B3_LP
					,count(ss_list_price) B3_CNT
					,count(distinct ss_list_price) B3_CNTD
			from store_sales
			where ss_quantity between 11 and 15
				and (ss_list_price between {LISTPRICE3} and {LISTPRICE3}+10
				or ss_coupon_amt between {COUPONAMT3} and {COUPONAMT3}+1000
				or ss_wholesale_cost between {WHOLESALECOST3} and {WHOLESALECOST3}+20)) B3,
			(select avg(ss_list_price) B4_LP
					,count(ss_list_price) B4_CNT
					,count(distinct ss_list_price) B4_CNTD
			from store_sales
			where ss_quantity between 16 and 20
				and (ss_list_price between {LISTPRICE4} and {LISTPRICE4}+10
				or ss_coupon_amt between {COUPONAMT4} and {COUPONAMT4}+1000
				or ss_wholesale_cost between {WHOLESALECOST4} and {WHOLESALECOST4}+20)) B4,
			(select avg(ss_list_price) B5_LP
					,count(ss_list_price) B5_CNT
					,count(distinct ss_list_price) B5_CNTD
			from store_sales
			where ss_quantity between 21 and 25
				and (ss_list_price between {LISTPRICE5} and {LISTPRICE5}+10
				or ss_coupon_amt between {COUPONAMT5} and {COUPONAMT5}+1000
				or ss_wholesale_cost between {WHOLESALECOST5} and {WHOLESALECOST5}+20)) B5,
			(select avg(ss_list_price) B6_LP
					,count(ss_list_price) B6_CNT
					,count(distinct ss_list_price) B6_CNTD
			from store_sales
			where ss_quantity between 26 and 30
				and (ss_list_price between {LISTPRICE6} and {LISTPRICE6}+10
				or ss_coupon_amt between {COUPONAMT6} and {COUPONAMT6}+1000
				or ss_wholesale_cost between {WHOLESALECOST6} and {WHOLESALECOST6}+20)) B6
		limit 100""",
		'parameter':
		{
			'WHOLESALECOST': {
				'type': "integer",
				'size': 6,
				'range': [0,80]
			},
			'LISTPRICE': {
				'type': "integer",
				'size': 6,
				'range': [0,190]
			},
			'COUPONAMT': {
				'type': "integer",
				'size': 6,
				'range': [0,18000]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q29",
		'query': """  select   
			i_item_id
			,i_item_desc
			,s_store_id
			,s_store_name
			,{AGG}(ss_quantity)        as store_sales_quantity
			,{AGG}(sr_return_quantity) as store_returns_quantity
			,{AGG}(cs_quantity)        as catalog_sales_quantity
		from
			store_sales
			,store_returns
			,catalog_sales
			,date_dim             d1
			,date_dim             d2
			,date_dim             d3
			,store
			,item
		where
			d1.d_moy               = {MONTH} 
			and d1.d_year              = {YEAR}
			and d1.d_date_sk           = ss_sold_date_sk
			and i_item_sk              = ss_item_sk
			and s_store_sk             = ss_store_sk
			and ss_customer_sk         = sr_customer_sk
			and ss_item_sk             = sr_item_sk
			and ss_ticket_number       = sr_ticket_number
			and sr_returned_date_sk    = d2.d_date_sk
			and d2.d_moy               between {MONTH} and  {MONTH} + 3 
			and d2.d_year              = {YEAR}
			and sr_customer_sk         = cs_bill_customer_sk
			and sr_item_sk             = cs_item_sk
			and cs_sold_date_sk        = d3.d_date_sk     
			and d3.d_year              in ({YEAR},{YEAR}+1,{YEAR}+2)
		group by
			i_item_id
			,i_item_desc
			,s_store_id
			,s_store_name
		order by
			i_item_id 
			,i_item_desc
			,s_store_id
			,s_store_name
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2000]
			},
			'MONTH': {
				'type': "integer",
				'range': [4,4]
			},
			'AGG': {
				'type': "list",
				'range': ["sum","min","max","avg","stddev_samp"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
				'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q30",
		'query': """ with customer_total_return as
		(select wr_returning_customer_sk as ctr_customer_sk
				,ca_state as ctr_state, 
		sum(wr_return_amt) as ctr_total_return
		from web_returns
			,date_dim
			,customer_address
		where wr_returned_date_sk = d_date_sk 
		and d_year ={YEAR}
		and wr_returning_addr_sk = ca_address_sk 
		group by wr_returning_customer_sk
				,ca_state)
		select  c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
			,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
			,c_last_review_date,ctr_total_return
		from customer_total_return ctr1
			,customer_address
			,customer
		where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
			from customer_total_return ctr2 
							where ctr1.ctr_state = ctr2.ctr_state)
			and ca_address_sk = c_current_addr_sk
			and ca_state = '{STATE}'
			and ctr1.ctr_customer_sk = c_customer_sk
		order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
						,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
						,c_last_review_date,ctr_total_return
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'STATE': {
				'type': "list",
				'range': ["TN"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q31",
		'query': """ with ss as
		(select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
		from store_sales,date_dim,customer_address
		where ss_sold_date_sk = d_date_sk
		and ss_addr_sk=ca_address_sk
		group by ca_county,d_qoy, d_year),
		ws as
		(select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
		from web_sales,date_dim,customer_address
		where ws_sold_date_sk = d_date_sk
		and ws_bill_addr_sk=ca_address_sk
		group by ca_county,d_qoy, d_year)
		select 
				ss1.ca_county
			,ss1.d_year
			,ws2.web_sales/ws1.web_sales web_q1_q2_increase
			,ss2.store_sales/ss1.store_sales store_q1_q2_increase
			,ws3.web_sales/ws2.web_sales web_q2_q3_increase
			,ss3.store_sales/ss2.store_sales store_q2_q3_increase
		from
				ss ss1
			,ss ss2
			,ss ss3
			,ws ws1
			,ws ws2
			,ws ws3
		where
			ss1.d_qoy = 1
			and ss1.d_year = {YEAR}
			and ss1.ca_county = ss2.ca_county
			and ss2.d_qoy = 2
			and ss2.d_year = {YEAR}
		and ss2.ca_county = ss3.ca_county
			and ss3.d_qoy = 3
			and ss3.d_year = {YEAR}
			and ss1.ca_county = ws1.ca_county
			and ws1.d_qoy = 1
			and ws1.d_year = {YEAR}
			and ws1.ca_county = ws2.ca_county
			and ws2.d_qoy = 2
			and ws2.d_year = {YEAR}
			and ws1.ca_county = ws3.ca_county
			and ws3.d_qoy = 3
			and ws3.d_year ={YEAR}
			and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
			> case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
			and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
			> case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
		order by {AGG}""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'AGG': {
				'type': "list",
				'range': ["ss1.ca_county","ss1.d_year","web_q1_q2_increase","store_q1_q2_increase","web_q2_q3_increase","store_q2_q3_increase"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q32",
		'query': """ select  sum(cs_ext_discount_amt)  as "excess discount amount" 
		from 
		catalog_sales 
		,item 
		,date_dim
		where
		i_manufact_id = {IMID}
		and i_item_sk = cs_item_sk 
		and d_date between '{YEAR}-{MONTH}-01' and 
				(cast('{YEAR}-{MONTH}-01' as date) + interval '90' day)
		and d_date_sk = cs_sold_date_sk 
		and cs_ext_discount_amt  
			> ( 
				select 
					1.3 * avg(cs_ext_discount_amt) 
				from 
					catalog_sales 
				,date_dim
				where 
					cs_item_sk = i_item_sk 
				and d_date between '{YEAR}-{MONTH}-01' and
									(cast('{YEAR}-{MONTH}-01' as date) + interval '90' day)
				and d_date_sk = cs_sold_date_sk 
			) 
		limit 100; """,
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [1,4]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'IMID': {
				'type': "integer",
				'range': [1,1000]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q33",
		'query': """ with ss as (
		select
				i_manufact_id,sum(ss_ext_sales_price) total_sales
		from
		store_sales,
		date_dim,
				customer_address,
				item
		where
				i_manufact_id in (select
		i_manufact_id
		from
		item
		where i_category in ('{CATEGORY}'))
		and     ss_item_sk              = i_item_sk
		and     ss_sold_date_sk         = d_date_sk
		and     d_year                  = {YEAR}
		and     d_moy                   = {MONTH}
		and     ss_addr_sk              = ca_address_sk
		and     ca_gmt_offset           = {GMT} 
		group by i_manufact_id),
		cs as (
		select
				i_manufact_id,sum(cs_ext_sales_price) total_sales
		from
		catalog_sales,
		date_dim,
				customer_address,
				item
		where
				i_manufact_id               in (select
		i_manufact_id
		from
		item
		where i_category in ('{CATEGORY}'))
		and     cs_item_sk              = i_item_sk
		and     cs_sold_date_sk         = d_date_sk
		and     d_year                  = {YEAR}
		and     d_moy                   = {MONTH}
		and     cs_bill_addr_sk         = ca_address_sk
		and     ca_gmt_offset           = {GMT} 
		group by i_manufact_id),
		ws as (
		select
				i_manufact_id,sum(ws_ext_sales_price) total_sales
		from
		web_sales,
		date_dim,
				customer_address,
				item
		where
				i_manufact_id               in (select
		i_manufact_id
		from
		item
		where i_category in ('{CATEGORY}'))
		and     ws_item_sk              = i_item_sk
		and     ws_sold_date_sk         = d_date_sk
		and     d_year                  = {YEAR}
		and     d_moy                   = {MONTH}
		and     ws_bill_addr_sk         = ca_address_sk
		and     ca_gmt_offset           = {GMT}
		group by i_manufact_id)
		select  i_manufact_id ,sum(total_sales) total_sales
		from  (select * from ss 
				union all
				select * from cs 
				union all
				select * from ws) tmp1
		group by i_manufact_id
		order by total_sales
		limit 100""",
		'parameter':
		{
			'GMT': {
				'type': "list",
				'range': ["-10.00","-9.00","-8.00","-7.00","-6.00","-5.00"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'MONTH': {
				'type': "integer",
				'range': [1,7]
			},
			'CATEGORY': {
				'type': "list",
				'range': ["Books","Home","Electronics","Jewelry","Sports"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q34",
		'query': """ select c_last_name
			,c_first_name
			,c_salutation
			,c_preferred_cust_flag
			,ss_ticket_number
			,cnt from
		(select ss_ticket_number
				,ss_customer_sk
				,count(*) cnt
			from store_sales,date_dim,store,household_demographics
			where store_sales.ss_sold_date_sk = date_dim.d_date_sk
			and store_sales.ss_store_sk = store.s_store_sk  
			and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
			and (date_dim.d_dom between 1 and 3 or date_dim.d_dom between 25 and 28)
			and (household_demographics.hd_buy_potential = '{BPONE}' or
				household_demographics.hd_buy_potential = '{BPTWO}')
			and household_demographics.hd_vehicle_count > 0
			and (case when household_demographics.hd_vehicle_count > 0 
		then household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count 
		else null 
		end)  > 1.2
			and date_dim.d_year in ({YEAR},{YEAR}+1,{YEAR}+2)
			and store.s_county in ('{COUNTY1}','{COUNTY2}','{COUNTY3}','{COUNTY4}','{COUNTY5}','{COUNTY6}','{COUNTY7}','{COUNTY8}')
			group by ss_ticket_number,ss_customer_sk) dn,customer
			where ss_customer_sk = c_customer_sk
			and cnt between 15 and 20
			order by c_last_name,c_first_name,c_salutation,c_preferred_cust_flag desc, ss_ticket_number""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'BPONE': {
			  'type': "list",
			  'range': ["1001-5000",">10000","501-1000"]
			},
			'BPTWO': {
			  'type': "list",
			  'range': ["0-500","Unknown","5001-10000"]
			},
			'COUNTY': {
				'type': "list",
				'size': 8,
				'range': ["Ziebach County","Zavala County","Zapata County","Yuma County","Yukon-Koyukuk Census Area","Yuba County","Young County","York County","Yolo County","Yoakum County","Yellowstone County","Yellow Medicine County","Yell County","Yazoo County","Yavapai County","Yates County","Yankton County","Yancey County","Yamhill County","Yalobusha County","Yakutat Borough","Yakima County","Yadkin County","Wythe County","Wyoming County","Wyandotte County","Wyandot County","Wright County","Worth County","Worcester County","Woodward County","Woodson County","Woods County","Woodruff County","Woodford County","Woodbury County","Wood County","Wolfe County","Wise County","Wirt County","Winston County","Winona County","Winneshiek County","Winnebago County","Winn Parish","Winkler County","Windsor County","Windham County","Winchester city","Wilson County","Williamson County","Williamsburg County","Williamsburg city","Williams County","Willacy County","Will County","Wilkinson County","Wilkin County","Wilkes County","Wilcox County","Wilbarger County","Wicomico County","Wichita County","Wibaux County","Whitman County","Whitley County","Whitfield County","Whiteside County","White Pine County","White County","Wheeler County","Wheatland County","Whatcom County","Wharton County","Wexford County","Wetzel County","Weston County","Westmoreland County","Westchester County","West Feliciana Parish","West Carroll Parish","West Baton Rouge Parish","Wells County","Weld County","Webster Parish","Webster County","Weber County","Webb County","Weakley County","Waynesboro city","Wayne County","Waushara County","Waupaca County","Waukesha County","Watonwan County","Watauga County","Washtenaw County","Washoe County","Washita County","Washington Parish","Washington County","Washburn County","Washakie County","Waseca County","Wasco County","Wasatch County","Warrick County","Warren County","Ware County","Ward County","Wapello County","Walworth County","Walton County","Walthall County","Walsh County","Wallowa County","Waller County","Wallace County","Walla Walla County","Walker County","Waldo County","Wakulla County","Wake County","Wahkiakum County","Wagoner County","Wadena County","Wade Hampton Census Area","Wabaunsee County","Wabasha County","Wabash County","Volusia County","Virginia Beach city","Vinton County","Vilas County","Vigo County","Victoria County","Vernon Parish","Vernon County","Vermillion County","Vermilion Parish","Vermilion County","Ventura County","Venango County","Vanderburgh County","Vance County","Van Zandt County","Van Wert County","Van Buren County","Valley County","Valencia County","Valdez-Cordova Census Area","Val Verde County","Uvalde County","Utah County","Upton County","Upson County","Upshur County","Union Parish","Union County","Unicoi County","Umatilla County","Ulster County","Uintah County","Uinta County","Tyrrell County","Tyler County","Twin Falls County","Twiggs County","Tuscola County","Tuscarawas County","Tuscaloosa County","Turner County","Tuolumne County","Tunica County","Tulsa County","Tulare County","Tucker County","Trumbull County","Trousdale County","Troup County","Tripp County","Trinity County","Trimble County","Trigg County","Treutlen County","Trempealeau County","Trego County","Treasure County","Travis County","Traverse County","Transylvania County","Traill County","Towns County","Towner County","Torrance County","Toombs County","Toole County","Tooele County","Tompkins County","Tom Green County","Tolland County","Todd County","Titus County","Tishomingo County","Tipton County","Tippecanoe County","Tippah County","Tioga County","Tillman County","Tillamook County","Tift County","Thurston County","Throckmorton County","Thomas County","Thayer County","Texas County","Teton County","Terry County","Terrell County","Terrebonne Parish","Tensas Parish","Teller County","Telfair County","Tehama County","Tazewell County","Taylor County","Tattnall County","Tate County","Tarrant County","Taos County","Tangipahoa Parish","Taney County","Tama County","Tallapoosa County","Tallahatchie County","Talladega County","Taliaferro County","Talbot County","Switzerland County","Swisher County","Swift County","Sweetwater County","Sweet Grass County","Swain County","Suwannee County","Sutton County","Sutter County","Sussex County","Susquehanna County","Surry County","Sunflower County","Sumter County","Sumner County","Summit County","Summers County","Sully County","Sullivan County","Suffolk County","Suffolk city","Sublette County","Stutsman County","Strafford County","Story County","Storey County","Stonewall County","Stone County","Stokes County","Stoddard County","Stillwater County","Stewart County","Stevens County","Steuben County","Sterling County","Stephenson County","Stephens County","Steele County","Stearns County","Staunton city","Starr County","Starke County","Stark County","Stanton County","Stanly County","Stanley County","Stanislaus County","Stafford County","Spotsylvania County","Spokane County","Spink County","Spencer County","Spartanburg County","Spalding County","Southampton County","Sonoma County","Somervell County","Somerset County","Solano County","Socorro County","Snyder County","Snohomish County","Smyth County","Smith County","Slope County","Skamania County","Skagit County","Sitka Borough","Siskiyou County","Sioux County","Simpson County","Silver Bow County","Sierra County","Sibley County","Shoshone County","Shiawassee County","Sherman County","Sheridan County","Sherburne County","Shenandoah County","Shelby County","Sheboygan County","Shawnee County","Shawano County","Shasta County","Sharp County","Sharkey County","Shannon County","Shackelford County","Seward County","Sevier County","Sequoyah County","Sequatchie County","Seneca County","Seminole County","Sedgwick County","Sebastian County","Searcy County","Scurry County","Screven County","Scotts Bluff County","Scott County","Scotland County","Scioto County","Schuylkill County","Schuyler County","Schoolcraft County","Schoharie County","Schley County","Schleicher County","Schenectady County","Sawyer County","Saunders County","Sauk County","Sarpy County","Sargent County","Saratoga County","Sarasota County","Santa Rosa County","Santa Fe County","Santa Cruz County","Santa Clara County","Santa Barbara County","Sanpete County","Sanilac County","Sangamon County","Sandusky County","Sandoval County","Sanders County","Sanborn County","San Saba County","San Patricio County","San Miguel County","San Mateo County","San Luis Obispo County","San Juan County","San Joaquin County","San Jacinto County","San Francisco County","San Diego County","San Bernardino County","San Benito County","San Augustine County","Sampson County","Saluda County","Salt Lake County","Saline County","Salem County","Salem city","Saguache County","Saginaw County","Sagadahoc County","Sacramento County","Sac County","Sabine Parish","Sabine County","Rutland County","Rutherford County","Russell County","Rusk County","Rush County","Runnels County","Rowan County","Routt County","Ross County","Rosebud County","Roseau County","Roscommon County","Roosevelt County","Rooks County","Rolette County","Rogers County","Roger Mills County","Rockwall County","Rockland County","Rockingham County","Rockdale County","Rockcastle County","Rockbridge County","Rock Island County","Rock County","Robeson County","Robertson County","Roberts County","Roanoke County","Roanoke city","Roane County","Riverside County","Ritchie County","Ripley County","Rio Grande County","Rio Blanco County","Rio Arriba County","Ringgold County","Riley County","Richmond County","Richmond city","Richland Parish","Richland County","Richardson County","Rich County","Rice County","Rhea County","Reynolds County","Republic County","Renville County","Rensselaer County","Reno County","Refugio County","Reeves County","Redwood County","Red Willow County","Red River Parish","Red River County","Red Lake County","Real County","Reagan County","Ray County","Rawlins County","Ravalli County","Rappahannock County","Rapides Parish","Ransom County","Rankin County","Randolph County","Randall County","Ramsey County","Ralls County","Raleigh County","Rains County","Radford city","Racine County","Rabun County","Quitman County","Queens County","Queen Anne County","Quay County","Putnam County","Pushmataha County","Pulaski County","Pueblo County","Prowers County","Providence County","Prince William County","Prince George County","Prince Edward County","Price County","Preston County","Presque Isle County","Presidio County","Prentiss County","Preble County","Pratt County","Prairie County","Powhatan County","Poweshiek County","Power County","Powell County","Powder River County","Potter County","Pottawattamie County","Pottawatomie County","Posey County","Portsmouth city","Porter County","Portage County","Poquoson city","Pope County","Pontotoc County","Pondera County","Polk County","Pointe Coupee Parish","Poinsett County","Pocahontas County","Plymouth County","Plumas County","Pleasants County","Platte County","Plaquemines Parish","Placer County","Piute County","Pittsylvania County","Pittsburg County","Pitt County","Pitkin County","Piscataquis County","Pipestone County","Pinellas County","Pine County","Pinal County","Pima County","Pike County","Pierce County","Pickett County","Pickens County","Pickaway County","Piatt County","Phillips County","Philadelphia County","Phelps County","Pettis County","Petroleum County","Petersburg city","Person County","Pershing County","Perry County","Perquimans County","Perkins County","Pepin County","Peoria County","Penobscot County","Pennington County","Pendleton County","Pender County","Pend Oreille County","Pemiscot County","Pembina County","Pecos County","Pearl River County","Peach County","Payne County","Payette County","Pawnee County","Paulding County","Patrick County","Passaic County","Pasquotank County","Pasco County","Parmer County","Parker County","Parke County","Park County","Panola County","Pamlico County","Palo Pinto County","Palo Alto County","Palm Beach County","Page County","Pacific County","Ozaukee County","Ozark County","Oxford County","Owyhee County","Owsley County","Owen County","Overton County","Outagamie County","Ouray County","Ouachita Parish","Ouachita County","Otter Tail County","Ottawa County","Otsego County","Otoe County","Otero County","Oswego County","Oscoda County","Osceola County","Osborne County","Osage County","Orleans Parish","Orleans County","Oregon County","Orangeburg County","Orange County","Ontonagon County","Ontario County","Onslow County","Onondaga County","Oneida County","Olmsted County","Oliver County","Oldham County","Oktibbeha County","Okmulgee County","Oklahoma County","Okfuskee County","Okeechobee County","Okanogan County","Okaloosa County","Ohio County","Oglethorpe County","Ogle County","Ogemaw County","Oconto County","Oconee County","Ochiltree County","Oceana County","Ocean County","Obion County","Oakland County","O-Brien County","Nye County","Nueces County","Nuckolls County","Noxubee County","Nowata County","Nottoway County","Norton County","Norton city","Northwest Arctic Borough","Northumberland County","Northampton County","North Slope Borough","Norman County","Norfolk County","Norfolk city","Nome Census Area","Nolan County","Nodaway County","Nobles County","Noble County","Niobrara County","Nicollet County","Nicholas County","Niagara County","Nez Perce County","Newton County","Newport News city","Newport County","Newberry County","Newaygo County","New York County","New Madrid County","New London County","New Kent County","New Haven County","New Hanover County","New Castle County","Nevada County","Ness County","Neshoba County","Neosho County","Nemaha County","Nelson County","Navarro County","Navajo County","Natrona County","Natchitoches Parish","Nassau County","Nash County","Napa County","Nantucket County","Nance County","Nacogdoches County","Musselshell County","Muskogee County","Muskingum County","Muskegon County","Muscogee County","Muscatine County","Murray County","Multnomah County","Muhlenberg County","Mower County","Mountrail County","Moultrie County","Motley County","Morton County","Morrow County","Morrison County","Morris County","Morrill County","Morgan County","Morehouse Parish","Mora County","Moore County","Moody County","Montrose County","Montour County","Montmorency County","Montgomery County","Montezuma County","Monterey County","Montcalm County","Montague County","Monroe County","Monongalia County","Monona County","Mono County","Monmouth County","Moniteau County","Mohave County","Moffat County","Modoc County","Mobile County","Mitchell County","Missoula County","Mississippi County","Missaukee County","Minnehaha County","Minidoka County","Mingo County","Mineral County","Miner County","Milwaukee County","Mills County","Miller County","Mille Lacs County","Millard County","Milam County","Mifflin County","Midland County","Middlesex County","Miami County","Metcalfe County","Mesa County","Merrimack County","Merrick County","Meriwether County","Mercer County","Merced County","Menominee County","Menifee County","Mendocino County","Menard County","Mellette County","Meigs County","Meeker County","Medina County","Mecosta County","Mecklenburg County","Meagher County","Meade County","McPherson County","McNairy County","McMullen County","McMinn County","McLeod County","McLennan County","McLean County","McKinley County","McKenzie County","McKean County","McIntosh County","McHenry County","McDuffie County","McDowell County","McDonough County","McDonald County","McCurtain County","McCulloch County","McCreary County","McCracken County","McCormick County","McCook County","McCone County","McClain County","Mayes County","Maverick County","Maury County","Maui County","Mathews County","Matanuska-Susitna Borough","Matagorda County","Massac County","Mason County","Martinsville city","Martin County","Marshall County","Marquette County","Marlboro County","Mariposa County","Marion County","Marinette County","Marin County","Maries County","Maricopa County","Marengo County","Marathon County","Manitowoc County","Manistee County","Manatee County","Manassas Park city","Manassas city","Malheur County","Major County","Mahoning County","Mahnomen County","Mahaska County","Magoffin County","Madison Parish","Madison County","Madera County","Macoupin County","Macon County","Macomb County","Mackinac County","Lyon County","Lynn County","Lynchburg city","Lyman County","Lycoming County","Luzerne County","Lunenburg County","Luna County","Lumpkin County","Luce County","Lucas County","Lubbock County","Lowndes County","Loving County","Love County","Loup County","Louisa County","Loudoun County","Loudon County","Los Angeles County","Los Alamos County","Lorain County","Lonoke County","Long County","Logan County","Llano County","Livingston Parish","Livingston County","Live Oak County","Little River County","Litchfield County","Lipscomb County","Linn County","Lincoln Parish","Lincoln County","Limestone County","Licking County","Liberty County","Lexington County","Lexington city","Lewis County","Lewis and Clark County","Levy County","Letcher County","Leslie County","Leon County","Lenoir County","Lenawee County","Lemhi County","Lehigh County","Leflore County","Leelanau County","Lee County","Lebanon County","Leavenworth County","Leake County","Lea County","Le Sueur County","Le Flore County","Lawrence County","Lavaca County","Laurens County","Laurel County","Lauderdale County","Latimer County","Latah County","Lassen County","Las Animas County","Larue County","Larimer County","Laramie County","Lapeer County","Lanier County","Langlade County","Lane County","Lander County","Lancaster County","Lampasas County","LaMoure County","Lamoille County","Lamb County","Lamar County","Lake of the Woods County","Lake County","Lake and Peninsula Borough","Lagrange County","Lafourche Parish","Lafayette Parish","Lafayette County","Laclede County","Lackawanna County","Lac qui Parle County","Labette County","La Salle Parish","La Salle County","La Porte County","La Plata County","La Paz County","La Crosse County","Kossuth County","Kosciusko County","Kootenai County","Koochiching County","Kodiak Island Borough","Knox County","Knott County","Klickitat County","Kleberg County","Klamath County","Kittson County","Kittitas County","Kitsap County","Kit Carson County","Kiowa County","Kinney County","Kingsbury County","Kings County","Kingman County","Kingfisher County","King William County","King George County","King County","King and Queen County","Kimble County","Kimball County","Kidder County","Keya Paha County","Keweenaw County","Kewaunee County","Ketchikan Gateway Borough","Kershaw County","Kerr County","Kern County","Keokuk County","Kenton County","Kent County","Kenosha County","Kennebec County","Kenedy County","Kendall County","Kenai Peninsula Borough","Kemper County","Keith County","Kearny County","Kearney County","Kay County","Kaufman County","Kauai County","Karnes County","Kankakee County","Kane County","Kandiyohi County","Kanawha County","Kanabec County","Kalkaska County","Kalamazoo County","Juniata County","Juneau County","Juneau Borough","Judith Basin County","Juab County","Josephine County","Jones County","Johnston County","Johnson County","Jo Daviess County","Jim Wells County","Jim Hogg County","Jewell County","Jessamine County","Jersey County","Jerome County","Jerauld County","Jennings County","Jenkins County","Jefferson Parish","Jefferson Davis Parish","Jefferson Davis County","Jefferson County","Jeff Davis County","Jay County","Jasper County","James City County","Jackson Parish","Jackson County","Jack County","Izard County","Itawamba County","Itasca County","Issaquena County","Isle of Wight County","Island County","Isanti County","Isabella County","Irwin County","Iroquois County","Iron County","Irion County","Iredell County","Iowa County","Iosco County","Ionia County","Inyo County","Ingham County","Indiana County","Indian River County","Independence County","Imperial County","Idaho County","Ida County","Iberville Parish","Iberia Parish","Hyde County","Hutchinson County","Huron County","Huntington County","Huntingdon County","Hunterdon County","Hunt County","Humphreys County","Humboldt County","Hughes County","Huerfano County","Hudspeth County","Hudson County","Hubbard County","Howell County","Howard County","Houston County","Houghton County","Hot Springs County","Hot Spring County","Horry County","Hopkins County","Hopewell city","Hooker County","Hood River County","Hood County","Honolulu County","Holt County","Holmes County","Hoke County","Hodgeman County","Hockley County","Hocking County","Hitchcock County","Hinsdale County","Hinds County","Hillsdale County","Hillsborough County","Hill County","Highlands County","Highland County","Hidalgo County","Hickory County","Hickman County","Hettinger County","Hertford County","Hernando County","Herkimer County","Henry County","Henrico County","Hennepin County","Hendry County","Hendricks County","Henderson County","Hempstead County","Hemphill County","Heard County","Haywood County","Hays County","Hayes County","Hawkins County","Hawaii County","Haskell County","Harvey County","Hartley County","Hartford County","Hart County","Harrisonburg city","Harrison County","Harris County","Harper County","Harney County","Harnett County","Harmon County","Harlan County","Harford County","Hardy County","Harding County","Hardin County","Hardeman County","Hardee County","Haralson County","Hanson County","Hansford County","Hanover County","Hand County","Hancock County","Hampton County","Hampton city","Hampshire County","Hampden County","Hamlin County","Hamilton County","Hamblen County","Hall County","Halifax County","Hale County","Haines Borough","Habersham County","Haakon County","Gwinnett County","Guthrie County","Gunnison County","Gulf County","Guilford County","Guernsey County","Guadalupe County","Grundy County","Grimes County","Griggs County","Grenada County","Gregory County","Gregg County","Greer County","Greenwood County","Greenville County","Greenup County","Greensville County","Greenlee County","Greene County","Greenbrier County","Green Lake County","Green County","Greeley County","Grayson County","Grays Harbor County","Gray County","Graves County","Gratiot County","Granville County","Grant Parish","Grant County","Granite County","Grand Traverse County","Grand Isle County","Grand Forks County","Grand County","Grainger County","Graham County","Grafton County","Grady County","Gove County","Gosper County","Goshen County","Gordon County","Gooding County","Goodhue County","Goochland County","Gonzales County","Goliad County","Golden Valley County","Gogebic County","Glynn County","Gloucester County","Glenn County","Glasscock County","Glascock County","Gladwin County","Glades County","Glacier County","Gilpin County","Gilmer County","Gilliam County","Gillespie County","Giles County","Gilchrist County","Gila County","Gibson County","Georgetown County","George County","Gentry County","Geneva County","Genesee County","Gem County","Geauga County","Geary County","Gates County","Gaston County","Gasconade County","Garza County","Garvin County","Garrett County","Garrard County","Garland County","Garfield County","Garden County","Galveston County","Gallia County","Gallatin County","Galax city","Gaines County","Gage County","Gadsden County","Furnas County","Fulton County","Frontier County","Frio County","Fresno County","Fremont County","Freestone County","Freeborn County","Fredericksburg city","Frederick County","Franklin Parish","Franklin County","Franklin city","Fountain County","Foster County","Fort Bend County","Forsyth County","Forrest County","Forest County","Ford County","Fond du Lac County","Foard County","Fluvanna County","Floyd County","Florence County","Fleming County","Flathead County","Flagler County","Fisher County","Finney County","Fillmore County","Ferry County","Fergus County","Fentress County","Fayette County","Fauquier County","Faulkner County","Faulk County","Faribault County","Fannin County","Falls County","Falls Church city","Fallon County","Fall River County","Fairfield County","Fairfax County","Fairfax city","Fairbanks North Star Borough","Evans County","Evangeline Parish","Eureka County","Etowah County","Estill County","Essex County","Esmeralda County","Escambia County","Erie County","Erath County","Emporia city","Emmons County","Emmet County","Emery County","Emanuel County","Elmore County","Ellsworth County","Ellis County","Elliott County","Elko County","Elkhart County","Elk County","Elbert County","El Paso County","El Dorado County","Effingham County","Edwards County","Edmunds County","Edmonson County","Edgefield County","Edgecombe County","Edgar County","Eddy County","Ector County","Echols County","Eau Claire County","Eaton County","Eastland County","East Feliciana Parish","East Carroll Parish","East Baton Rouge Parish","Early County","Eagle County","Dyer County","Duval County","Dutchess County","Durham County","Duplin County","DuPage County","Dunn County","Dunklin County","Dundy County","Dukes County","Duchesne County","Dubuque County","Dubois County","Drew County","Douglas County","Dougherty County","Dorchester County","Door County","Dooly County","Donley County","Doniphan County","Dona Ana County","Dolores County","Dodge County","Doddridge County","Dixon County","Dixie County","Divide County","District of Columbia","Dinwiddie County","Dimmit County","Dillon County","Dillingham Census Area","Dickson County","Dickinson County","Dickey County","Dickenson County","Dickens County","DeWitt County","Dewey County","Deuel County","DeSoto County","Desha County","Deschutes County","Des Moines County","Denver County","Denton County","Dent County","Denali Borough","Delta County","Delaware County","Del Norte County","DeKalb County","Defiance County","Deer Lodge County","Decatur County","DeBaca County","Dearborn County","Deaf Smith County","De Witt County","De Soto Parish","De Kalb County","Day County","Dawson County","Dawes County","Davison County","Davis County","Daviess County","Davie County","Davidson County","Dauphin County","Darlington County","Darke County","Dare County","Danville city","Daniels County","Dane County","Dallas County","Dallam County","Dale County","Dakota County","Daggett County","Dade County","Cuyahoga County","Custer County","Curry County","Currituck County","Cuming County","Cumberland County","Culpeper County","Cullman County","Culberson County","Crowley County","Crow Wing County","Cross County","Crosby County","Crook County","Crockett County","Crittenden County","Crisp County","Crenshaw County","Creek County","Crawford County","Craven County","Crane County","Craighead County","Craig County","Cowlitz County","Cowley County","Coweta County","Covington County","Covington city","Cottonwood County","Cotton County","Cottle County","Costilla County","Coshocton County","Coryell County","Cortland County","Corson County","Copiah County","Coosa County","Coos County","Cooper County","Cooke County","Cook County","Conway County","Converse County","Contra Costa County","Conejos County","Conecuh County","Concordia Parish","Concho County","Comanche County","Comal County","Colusa County","Columbus County","Columbiana County","Columbia County","Colquitt County","Colorado County","Colonial Heights city","Collingsworth County","Collin County","Collier County","Colleton County","Colfax County","Coles County","Coleman County","Cole County","Colbert County","Coke County","Coffey County","Coffee County","Codington County","Coconino County","Cocke County","Cochran County","Cochise County","Cobb County","Coal County","Coahoma County","Cloud County","Clinton County","Clinch County","Clifton Forge city","Cleveland County","Clermont County","Cleburne County","Clearwater County","Clearfield County","Clear Creek County","Clayton County","Clay County","Clatsop County","Clarke County","Clark County","Clarion County","Clarendon County","Clare County","Clallam County","Claiborne Parish","Claiborne County","Clackamas County","Citrus County","Cimarron County","Cibola County","Churchill County","Christian County","Chowan County","Chouteau County","Choctaw County","Chittenden County","Chisago County","Chippewa County","Chilton County","Childress County","Chicot County","Chickasaw County","Cheyenne County","Chesterfield County","Chester County","Cheshire County","Chesapeake city","Cherry County","Cherokee County","Chenango County","Chemung County","Chelan County","Cheboygan County","Cheatham County","Chaves County","Chautauqua County","Chattooga County","Chattahoochee County","Chatham County","Chase County","Charlton County","Charlottesville city","Charlotte County","Charlevoix County","Charleston County","Charles Mix County","Charles County","Charles City County","Chariton County","Champaign County","Chambers County","Chaffee County","Cerro Gordo County","Centre County","Cedar County","Cecil County","Cayuga County","Cavalier County","Cattaraugus County","Catron County","Catoosa County","Catawba County","Catahoula Parish","Caswell County","Castro County","Cassia County","Cass County","Casey County","Cascade County","Carver County","Carteret County","Carter County","Carson County","Carson City","Carroll County","Caroline County","Carlton County","Carlisle County","Caribou County","Carbon County","Cape May County","Cape Girardeau County","Canyon County","Cannon County","Candler County","Canadian County","Campbell County","Camp County","Cameron Parish","Cameron County","Camden County","Cambria County","Camas County","Calvert County","Calumet County","Calloway County","Callaway County","Callahan County","Calhoun County","Caledonia County","Caldwell Parish","Caldwell County","Calcasieu Parish","Calaveras County","Caddo Parish","Caddo County","Cache County","Cabell County","Cabarrus County","Butts County","Butte County","Butler County","Burt County","Burnett County","Burnet County","Burlington County","Burleson County","Burleigh County","Burke County","Bureau County","Buncombe County","Bullock County","Bulloch County","Bullitt County","Buffalo County","Buena Vista County","Buena Vista city","Bucks County","Buckingham County","Buchanan County","Bryan County","Brunswick County","Brule County","Brown County","Broward County","Broome County","Brooks County","Brookings County","Brooke County","Bronx County","Broadwater County","Bristol County","Bristol city","Bristol Bay Borough","Briscoe County","Brewster County","Brevard County","Bremer County","Breckinridge County","Breathitt County","Brazos County","Brazoria County","Braxton County","Brantley County","Branch County","Bradley County","Bradford County","Bracken County","Boyle County","Boyd County","Box Elder County","Box Butte County","Bowman County","Bowie County","Bourbon County","Boundary County","Boulder County","Bottineau County","Botetourt County","Bossier Parish","Bosque County","Borden County","Boone County","Bonneville County","Bonner County","Bond County","Bon Homme County","Bollinger County","Bolivar County","Boise County","Blue Earth County","Blount County","Bledsoe County","Bleckley County","Bland County","Blanco County","Blair County","Blaine County","Bladen County","Blackford County","Black Hawk County","Bingham County","Billings County","Big Stone County","Big Horn County","Bienville Parish","Bibb County","Bexar County","Bethel Census Area","Bertie County","Berrien County","Bernalillo County","Berkshire County","Berks County","Berkeley County","Bergen County","Benzie County","Benton County","Bent County","Benson County","Bennington County","Bennett County","Benewah County","Ben Hill County","Beltrami County","Belmont County","Bell County","Belknap County","Bee County","Bedford County","Bedford city","Beckham County","Becker County","Beaverhead County","Beaver County","Beauregard Parish","Beaufort County","Bear Lake County","Beadle County","Baylor County","Bayfield County","Bay County","Baxter County","Bath County","Bates County","Bastrop County","Bartow County","Barton County","Bartholomew County","Barry County","Barrow County","Barron County","Barren County","Barnwell County","Barnstable County","Barnes County","Barbour County","Barber County","Baraga County","Bannock County","Banner County","Banks County","Bandera County","Bamberg County","Baltimore County","Baltimore city","Ballard County","Baldwin County","Baker County","Bailey County","Bacon County","Baca County","Avoyelles Parish","Avery County","Autauga County","Austin County","Aurora County","Augusta County","Auglaize County","Audubon County","Audrain County","Attala County","Atoka County","Atlantic County","Atkinson County","Athens County","Atchison County","Atascosa County","Assumption Parish","Asotin County","Ashtabula County","Ashley County","Ashland County","Ashe County","Ascension Parish","Arthur County","Aroostook County","Armstrong County","Arlington County","Arkansas County","Arenac County","Archuleta County","Archer County","Arapahoe County","Aransas County","Appomattox County","Appling County","Appanoose County","Apache County","Antrim County","Antelope County","Anson County","Anoka County","Anne Arundel County","Angelina County","Androscoggin County","Andrews County","Andrew County","Anderson County","Anchorage Borough","Amite County","Amherst County","Amelia County","Amador County","Alpine County","Alpena County","Allendale County","Allen Parish","Allen County","Allegheny County","Alleghany County","Allegany County","Allegan County","Allamakee County","Alger County","Alfalfa County","Alexandria city","Alexander County","Aleutians West Census Area","Aleutians East Borough","Alcorn County","Alcona County","Albemarle County","Albany County","Alamosa County","Alameda County","Alamance County","Alachua County","Aitkin County","Aiken County","Addison County","Adams County","Adair County","Ada County","Accomack County","Acadia Parish","Abbeville County"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q35",
		'query': """  select   
		ca_state,
		cd_gender,
		cd_marital_status,
		cd_dep_count,
		count(*) cnt1,
		{AGGONE}(cd_dep_count) {AGGONE}_cd_dep_count1,
		{AGGTWO}(cd_dep_count) {AGGTWO}_cd_dep_count2,
		{AGGTHREE}(cd_dep_count) {AGGTHREE}_cd_dep_count3,
		cd_dep_employed_count,
		count(*) cnt2,
		{AGGONE}(cd_dep_employed_count) {AGGONE}_cd_dep_employed_count1,
		{AGGTWO}(cd_dep_employed_count) {AGGTWO}_cd_dep_employed_count2,
		{AGGTHREE}(cd_dep_employed_count) {AGGTHREE}_cd_dep_employed_count3,
		cd_dep_college_count,
		count(*) cnt3,
		{AGGONE}(cd_dep_college_count) {AGGONE}_cd_dep_college_count1,
		{AGGTWO}(cd_dep_college_count) {AGGTWO}_cd_dep_college_count2,
		{AGGTHREE}(cd_dep_college_count) {AGGTHREE}_cd_dep_college_count3
		from
		customer c,customer_address ca,customer_demographics
		where
		c.c_current_addr_sk = ca.ca_address_sk and
		cd_demo_sk = c.c_current_cdemo_sk and 
		exists (select *
				from store_sales,date_dim
				where c.c_customer_sk = ss_customer_sk and
						ss_sold_date_sk = d_date_sk and
						d_year = {YEAR} and
						d_qoy < 4) and
		(exists (select *
					from web_sales,date_dim
					where c.c_customer_sk = ws_bill_customer_sk and
						ws_sold_date_sk = d_date_sk and
						d_year = {YEAR} and
						d_qoy < 4) or 
			exists (select * 
					from catalog_sales,date_dim
					where c.c_customer_sk = cs_ship_customer_sk and
						cs_sold_date_sk = d_date_sk and
						d_year = {YEAR} and
						d_qoy < 4))
		group by ca_state,
				cd_gender,
				cd_marital_status,
				cd_dep_count,
				cd_dep_employed_count,
				cd_dep_college_count
		order by ca_state is not null, ca_state,
				cd_gender is not null, cd_gender,
				cd_marital_status is not null, cd_marital_status,
				cd_dep_count is not null, cd_dep_count,
				cd_dep_employed_count is not null, cd_dep_employed_count,
				cd_dep_college_count is not null, cd_dep_college_count
		limit 100""",
		'parameter':
		{
			'AGGONE': {
				'type': "list",
				'range': ["sum","min","max","avg","stddev_samp"]
			},
			'AGGTHREE': {
				'type': "list",
				'range': ["sum","min","max","avg","stddev_samp"]
			},
			'AGGTWO': {
				'type': "list",
				'range': ["sum","min","max","avg","stddev_samp"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1999,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q36",
		'query': """  select  
			sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
		,i_category
		,i_class
		,grouping(i_category)+grouping(i_class) as lochierarchy
		,rank() over (
		partition by grouping(i_category)+grouping(i_class),
		case when grouping(i_class) = 0 then i_category end 
		order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
		from
			store_sales
		,date_dim       d1
		,item
		,store
		where
			d1.d_year = {YEAR} 
		and d1.d_date_sk = ss_sold_date_sk
		and i_item_sk  = ss_item_sk 
		and s_store_sk  = ss_store_sk
		and s_state in ('{STATE1}','{STATE2}','{STATE3}','{STATE4}','{STATE5}','{STATE6}','{STATE7}','{STATE8}')
		group by i_category,i_class with rollup
		order by
		lochierarchy desc
		,case when lochierarchy = 0 then i_category end
		,rank_within_parent
		limit 100""",
		'DBMS': {
			'MariaDB': """  SELECT 
			    gross_margin,
			    i_category,
			    i_class,
			    CASE WHEN i_category IS NULL THEN 1 ELSE 0 END +
			    CASE WHEN i_class IS NULL THEN 1 ELSE 0 END AS lochierarchy,
			    RANK() OVER (
			        PARTITION BY lochierarchy, 
			        CASE WHEN i_class IS NOT NULL THEN i_category END 
			        ORDER BY gross_margin ASC
			    ) AS rank_within_parent
			FROM (
			    SELECT  
			        i_category,
			        i_class,
			        SUM(ss_net_profit) / SUM(ss_ext_sales_price) AS gross_margin,
			        CASE WHEN i_category IS NULL THEN 1 ELSE 0 END +
			        CASE WHEN i_class IS NULL THEN 1 ELSE 0 END AS lochierarchy
			    FROM
			        store_sales
			    JOIN date_dim AS d1 ON d1.d_date_sk = ss_sold_date_sk
			    JOIN item ON i_item_sk = ss_item_sk
			    JOIN store ON s_store_sk = ss_store_sk
			    WHERE
			        d1.d_year = {YEAR}
			        AND s_state IN ('{STATE1}', '{STATE2}', '{STATE3}', '{STATE4}', '{STATE5}', '{STATE6}', '{STATE7}', '{STATE8}')
			    GROUP BY i_category, i_class WITH ROLLUP
			) AS summary
			LIMIT 100""",
			'MonetDB': """select * FROM
			(
					select
					sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
				,i_category
				,i_class
				,grouping(i_category)+grouping(i_class) as lochierarchy
				,rank() over (
				partition by grouping(i_category)+grouping(i_class),
				case when grouping(i_class) = 0 then i_category end 
				order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
				from
					store_sales
				,date_dim       d1
				,item
				,store
				where
					d1.d_year = {YEAR} 
				and d1.d_date_sk = ss_sold_date_sk
				and i_item_sk  = ss_item_sk 
				and s_store_sk  = ss_store_sk
				and s_state in ('{STATE1}','{STATE2}','{STATE3}','{STATE4}','{STATE5}','{STATE6}','{STATE7}','{STATE8}')
				group by rollup(i_category,i_class)
			) tmp
			order by
			lochierarchy desc
			,case when lochierarchy = 0 then i_category end
			,rank_within_parent
			limit 100""",
			'PostgreSQL': """  select  
				sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
			,i_category
			,i_class
			,grouping(i_category)+grouping(i_class) as lochierarchy
			,rank() over (
			partition by grouping(i_category)+grouping(i_class),
			case when grouping(i_class) = 0 then i_category end 
			order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
			from
				store_sales
			,date_dim       d1
			,item
			,store
			where
				d1.d_year = {YEAR} 
			and d1.d_date_sk = ss_sold_date_sk
			and i_item_sk  = ss_item_sk 
			and s_store_sk  = ss_store_sk
			and s_state in ('{STATE1}','{STATE2}','{STATE3}','{STATE4}','{STATE5}','{STATE6}','{STATE7}','{STATE8}')
			group by rollup(i_category,i_class)
			order by
			grouping(i_category)+grouping(i_class) desc
			,case when grouping(i_category)+grouping(i_class) = 0 then i_category end
			,rank_within_parent
			limit 100"""
		},
		'parameter':
		{
			'STATE': {
				'type': "list",
				'size': 8,
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q37",
		'query': """  select  i_item_id
			,i_item_desc
			,i_current_price
		from item, inventory, date_dim, catalog_sales
		where i_current_price between {PRICE} and {PRICE} + 30
		and inv_item_sk = i_item_sk
		and d_date_sk=inv_date_sk
		and d_date between cast('{YEAR}-{MONTH}-01' as date) and (cast('{YEAR}-{MONTH}-01' as date) + interval '60' day)
		and i_manufact_id in ({MANUFACT_ID1},{MANUFACT_ID2},{MANUFACT_ID3},{MANUFACT_ID4})
		and inv_quantity_on_hand between 100 and 500
		and cs_item_sk = i_item_sk
		group by i_item_id,i_item_desc,i_current_price
		order by i_item_id
		limit 100""",
		'parameter':
		{
			'MANUFACT_ID': {
				'type': "integer",
				'size': 4,
				'range': [667,1000]
			},
			'PRICE': {
				'type': "integer",
				'range': [10,70]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'MONTH': {
				'type': "integer",
				'range': [1,7]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q38",
		'query': """select count(*) as counter from (
			select distinct c_last_name, c_first_name, d_date
			from store_sales, date_dim, customer
				where store_sales.ss_sold_date_sk = date_dim.d_date_sk
			and store_sales.ss_customer_sk = customer.c_customer_sk
			and d_month_seq between {DMS} and {DMS} + 11
		intersect
			select distinct c_last_name, c_first_name, d_date
			from catalog_sales, date_dim, customer
				where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
			and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
			and d_month_seq between {DMS} and {DMS} + 11
		intersect
			select distinct c_last_name, c_first_name, d_date
			from web_sales, date_dim, customer
				where web_sales.ws_sold_date_sk = date_dim.d_date_sk
			and web_sales.ws_bill_customer_sk = customer.c_customer_sk
			and d_month_seq between {DMS} and {DMS} + 11
		) hot_cust
		limit 100""",
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q39a+b",
		'query': ["""with inv as
		(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
			,stdev,mean, case mean when 0 then null else stdev/mean end cov
		from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
					,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
			from inventory
				,item
				,warehouse
				,date_dim
			where inv_item_sk = i_item_sk
				and inv_warehouse_sk = w_warehouse_sk
				and inv_date_sk = d_date_sk
				and d_year ={YEAR}
			group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
		where case mean when 0 then 0 else stdev/mean end > 1)
		select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
				,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
		from inv inv1,inv inv2
		where inv1.i_item_sk = inv2.i_item_sk
		and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
		and inv1.d_moy={MONTH}
		and inv2.d_moy={MONTH}+1
		order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
				,inv2.d_moy,inv2.mean, inv2.cov
		""", """ with inv as
		(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
			,stdev,mean, case mean when 0 then null else stdev/mean end cov
		from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
					,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
			from inventory
				,item
				,warehouse
				,date_dim
			where inv_item_sk = i_item_sk
				and inv_warehouse_sk = w_warehouse_sk
				and inv_date_sk = d_date_sk
				and d_year ={YEAR}
			group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
		where case mean when 0 then 0 else stdev/mean end > 1)
		select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
				,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
		from inv inv1,inv inv2
		where inv1.i_item_sk = inv2.i_item_sk
		and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
		and inv1.d_moy={MONTH}
		and inv2.d_moy={MONTH}+1
		and inv1.cov > 1.5
		order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
				,inv2.d_moy,inv2.mean, inv2.cov
		"""],
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [1,4]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q40",
		'query': """ select 
		w_state
		,i_item_id
		,sum(case when (cast(d_date as date) < cast('{YEAR}-{MONTH}-01' as date)) 
		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before
		,sum(case when (cast(d_date as date) >= cast('{YEAR}-{MONTH}-01' as date)) 
		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after
		from
		catalog_sales left outer join catalog_returns on
			(cs_order_number = cr_order_number 
				and cs_item_sk = cr_item_sk)
		,warehouse 
		,item
		,date_dim
		where
			i_current_price between 0.99 and 1.49
		and i_item_sk          = cs_item_sk
		and cs_warehouse_sk    = w_warehouse_sk 
		and cs_sold_date_sk    = d_date_sk
		and d_date between (cast('{YEAR}-{MONTH}-01' as date) - interval '30' day)
						and (cast('{YEAR}-{MONTH}-01' as date) + interval '30' day) 
		group by
			w_state,i_item_id
		order by w_state,i_item_id
		limit 100""",
		'parameter':
		{
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'MONTH': {
				'type': "integer",
				'range': [2,7]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q41",
		'query': """  select  distinct(i_product_name)
		from item i1
		where i_manufact_id between {MANUFACT} and {MANUFACT}+40 
		and (select count(*) as item_cnt
				from item
				where (i_manufact = i1.i_manufact and
				((i_category = 'Women' and 
				(i_color = '{COLOR1}' or i_color = '{COLOR2}') and 
				(i_units = '{UNIT1}' or i_units = '{UNIT2}') and
				(i_size = '{SIZE1}' or i_size = '{SIZE2}')
				) or
				(i_category = 'Women' and
				(i_color = '{COLOR3}' or i_color = '{COLOR4}') and
				(i_units = '{UNIT3}' or i_units = '{UNIT4}') and
				(i_size = '{SIZE3}' or i_size = '{SIZE4}')
				) or
				(i_category = 'Men' and
				(i_color = '{COLOR5}' or i_color = '{COLOR6}') and
				(i_units = '{UNIT5}' or i_units = '{UNIT6}') and
				(i_size = '{SIZE5}' or i_size = '{SIZE6}')
				) or
				(i_category = 'Men' and
				(i_color = '{COLOR7}' or i_color = '{COLOR8}') and
				(i_units = '{UNIT7}' or i_units = '{UNIT8}') and
				(i_size = '{SIZE1}' or i_size = '{SIZE2}')
				))) or
			(i_manufact = i1.i_manufact and
				((i_category = 'Women' and 
				(i_color = '{COLOR9}' or i_color = '{COLOR10}') and 
				(i_units = '{UNIT9}' or i_units = '{UNIT10}') and
				(i_size = '{SIZE1}' or i_size = '{SIZE2}')
				) or
				(i_category = 'Women' and
				(i_color = '{COLOR11}' or i_color = '{COLOR12}') and
				(i_units = '{UNIT11}' or i_units = '{UNIT12}') and
				(i_size = '{SIZE3}' or i_size = '{SIZE4}')
				) or
				(i_category = 'Men' and
				(i_color = '{COLOR13}' or i_color = '{COLOR14}') and
				(i_units = '{UNIT13}' or i_units = '{UNIT14}') and
				(i_size = '{SIZE5}' or i_size = '{SIZE6}')
				) or
				(i_category = 'Men' and
				(i_color = '{COLOR15}' or i_color = '{COLOR16}') and
				(i_units = '{UNIT15}' or i_units = '{UNIT16}') and
				(i_size = '{SIZE1}' or i_size = '{SIZE2}')
				)))) > 0
		order by i_product_name
		limit 100""",
		'parameter':
		{
			'COLOR': {
				'type': "list",
				'size': 16,
				'range': ["bisque","black","blue","blush","chocolate","coral","cream","cyan","firebrick","frosted","gainsboro","ghost","goldenrod","green","grey","honeydew","hot","indian","ivory","khaki","lace","lavender","lawn","lime","linen","maroon","medium","midnight","mint","misty","moccasin","navy","olive","orange","orchid","pale","papaya","peach","peru","pink","plum","powder","puff","purple","red","rose","rosy","royal","saddle","salmon","sandy","seashell","sienna","sky","slate","smoke","snow","spring","steel","tan","thistle","tomato","turquoise","violet","wheat","white","yellow"]
			},
			'MANUFACT': {
				'type': "integer",
				'range': [667,1000]
			},
			'SIZE': {
				'type': "list",
				'size': 6,
				'range': ["N/A","petite","extra large","large","medium","small","economy"]
			},
			'UNIT': {
				'type': "list",
				'size': 16,
				'range': ["Box","Bunch","Bundle","Carton","Case","Cup","Dozen","Dram","Each","Gram","Gross","Lb","N/A","Ounce","Oz","Pallet","Pound","Tbl","Ton","Tsp","Unknown"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q42",
		'query': """ select  dt.d_year
		,item.i_category_id
		,item.i_category
		,sum(ss_ext_sales_price) as sum_sales_price
		from date_dim dt
		,store_sales
		,item
		where dt.d_date_sk = store_sales.ss_sold_date_sk
		and store_sales.ss_item_sk = item.i_item_sk
		and item.i_manager_id = 1   
		and dt.d_moy={MONTH}
		and dt.d_year={YEAR}
		group by dt.d_year
		,item.i_category_id
		,item.i_category
		order by sum(ss_ext_sales_price) desc,dt.d_year
		,item.i_category_id
		,item.i_category
		limit 100 """,
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [11,12]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q43",
		'query': """ select  s_store_name, s_store_id,
		sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
		sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
		sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
		sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
		sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
		sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
		sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
		from date_dim, store_sales, store
		where d_date_sk = ss_sold_date_sk and
		s_store_sk = ss_store_sk and
		s_gmt_offset = {GMT} and
		d_year = {YEAR} 
		group by s_store_name, s_store_id
		order by s_store_name, s_store_id,sun_sales,mon_sales,tue_sales,wed_sales,thu_sales,fri_sales,sat_sales
		limit 100""",
		'parameter':
		{
			'GMT': {
				'type': "list",
				'range': ["-10.00","-9.00","-8.00","-7.00","-6.00","-5.00"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q44",
		'query': """ select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
		from(select *
		from (select item_sk,rank() over (order by rank_col asc) rnk
		from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
			from store_sales ss1
			where ss_store_sk = {STORE}
			group by ss_item_sk
			having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
					from store_sales
					where ss_store_sk = {STORE}
					and {NULLCOLSS} is null
					group by ss_store_sk))V1)V11
		where rnk  < 11) asceding,
		(select *
		from (select item_sk,rank() over (order by rank_col desc) rnk
		from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
			from store_sales ss1
			where ss_store_sk = {STORE}
			group by ss_item_sk
			having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
					from store_sales
					where ss_store_sk = {STORE}
					and {NULLCOLSS} is null
					group by ss_store_sk))V2)V21
		where rnk  < 11) descending,
		item i1,
		item i2
		where asceding.rnk = descending.rnk 
		and i1.i_item_sk=asceding.item_sk
		and i2.i_item_sk=descending.item_sk
		order by asceding.rnk
		limit 100""",
		'parameter':
		{
			'NULLCOLSS': {
				'type': "list",
				'range': ["ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_promo_sk"]
			},
			'STORE': {
				'type': "integer",
				'range': [1,12]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q45",
		'query': """ select  ca_zip, {GBOBC}, sum(ws_sales_price) as sum_sales_prices
		from web_sales, customer, customer_address, date_dim, item
		where ws_bill_customer_sk = c_customer_sk
		and c_current_addr_sk = ca_address_sk 
		and ws_item_sk = i_item_sk 
		and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475', '85392', '85460', '80348', '81792')
		or 
		i_item_id in (select i_item_id
			from item
			where i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)
			)
		)
		and ws_sold_date_sk = d_date_sk
		and d_qoy = {QOY} and d_year = {YEAR}
		group by ca_zip, {GBOBC}
		order by ca_zip, {GBOBC}
		limit 100""",
		'parameter':
		{
			'GBOBC': {
				'type': "list",
				'range': ["ca_city","ca_county","ca_state"]
			},
			'QOY': {
				'type': "integer",
				'range': [1,2]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q46",
		'query': """ select  c_last_name
		,c_first_name
		,ca_city
		,bought_city
		,ss_ticket_number
		,amt,profit 
		from
		(select ss_ticket_number
		,ss_customer_sk
		,ca_city bought_city
		,sum(ss_coupon_amt) amt
		,sum(ss_net_profit) profit
		from store_sales,date_dim,store,household_demographics,customer_address 
		where store_sales.ss_sold_date_sk = date_dim.d_date_sk
		and store_sales.ss_store_sk = store.s_store_sk  
		and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
		and store_sales.ss_addr_sk = customer_address.ca_address_sk
		and (household_demographics.hd_dep_count = {DEPCNT} or
		household_demographics.hd_vehicle_count= {VEHCNT})
		and date_dim.d_dow in (6,0)
		and date_dim.d_year in ({YEAR},{YEAR}+1,{YEAR}+2) 
		and store.s_city in ('{CITY1}','{CITY2}','{CITY3}','{CITY4}','{CITY5}') 
		group by ss_ticket_number,ss_customer_sk,ss_addr_sk,ca_city) dn,customer,customer_address current_addr
		where ss_customer_sk = c_customer_sk
		and customer.c_current_addr_sk = current_addr.ca_address_sk
		and current_addr.ca_city <> bought_city
		order by c_last_name
		,c_first_name
		,ca_city
		,bought_city
		,ss_ticket_number
		limit 100""",
		'parameter':
		{
			'DEPCNT': {
				'type': "integer",
				'range': [0,9]
			},
			'VEHCNT': {
				'type': "integer",
				'range': [-1,4]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'CITY': {
				'type': "list",
				'size': 5,
				'range': ["Aberdeen","Acme","Adams","Adrian","Afton","Albany","Allentown","Allison","Alma","Alpha","Altamont","Amherst","Amity","Andover","Antioch","Appleton","Arcadia","Arcola","Argyle","Arlington","Armstrong","Arthur","Ashland","Ashley","Ashton","Athens","Avery","Avoca","Avon","Bailey","Baker","Barnes","Bartlett","Bath","Bay View","Bayside","Bayview","Bear Creek","Beech Grove","Beechwood","Belfast","Belleview","Belleville","Belmont","Bennett","Benton","Berea","Berlin","Bethany","Bethel","Bethesda","Bethlehem","Big Creek","Birmingham","Blaine","Blair","Blanchard","Bloomingdale","Blue Springs","Bolton","Boyd","Bradford","Bradley","Brandon","Brentwood","Bridgeport","Bristol","Brooklyn","Brooks","Brookville","Brookwood","Brownsville","Brunswick","Bryant","Buckhorn","Buckingham","Buena Vista","Buffalo","Bunker Hill","Burns","Burton","Butler","Byron","Caldwell","Caledonia","Calhoun","California","Cambridge","Camden","Camelot","Canaan","Carlisle","Carlton","Carpenter","Carter","Carthage","Cedar","Cedar Creek","Cedar Grove","Cedar Hill","Center","Center Point","Centerville","Chapel Hill","Charleston","Chatham","Chelsea","Cherokee","Cherry Grove","Cherry Valley","Chester","Chestnut Hill","Chestnut Ridge","Church Hill","Clearview","Clearwater","Clifford","Clifton","Climax","Clinton","Clyde","Coldwater","Colfax","Collinsville","Colonial Heights","Columbia","Columbus","Concord","Conway","Cooper","Cordova","Corinth","Cottonwood","Country Club Estates","Crawford","Crescent","Creston","Crestview","Crossroads","Crystal","Crystal Springs","Cuba","Cumberland","Cunningham","Curtis","Dale","Dallas","Darlington","Decatur","Deer Park","Deerfield","Delmar","Delta","Denmark","Denver","Derby","Dewey","Dover","Doyle","Duncan","Dunlap","Easton","Eastwood","Echo","Edgewater","Edgewood","Edwards","Egypt","Elba","Elgin","Elizabeth","Elkton","Ellisville","Ellsworth","Elm Grove","Elmwood","Empire","Enon","Enterprise","Eureka","Evans","Evansville","Evergreen","Fair Oaks","Fairbanks","Fairfax","Fairfield","Fairmont","Fairmount","Fairview","Farmersville","Farmington","Fayetteville","Ferguson","Ferndale","Fernwood","Fillmore","Fisher","Five Forks","Five Points","Flat Rock","Flatwoods","Flint","Flint Hill","Florence","Floyd","Forest","Forest Hills","Forest Park","Forestville","Foster","Four Points","Fowler","Fox","Frankfort","Franklin","Freedom","Freeman","Freeport","Fremont","Frenchtown","Friendship","Frogtown","Fulton","Galena","Gardner","Garfield","Garrison","Gary","Georgetown","Gilbert","Gilmore","Gladstone","Glencoe","Glendale","Glenville","Glenwood","Globe","Golden","Good Hope","Goshen","Grandview","Granite","Grant","Gravel Hill","Gray","Green Acres","Green Hill","Green Valley","Greenbrier","Greendale","Greenfield","Greenville","Greenwood","Griffin","Guilford","Gum Springs","Guthrie","Hamburg","Hamilton","Hampton","Hardy","Harmon","Harmony","Harper","Harris","Harrisburg","Hartland","Harvey","Hastings","Hawthorne","Hazelwood","Helena","Henry","Hidden Valley","Highland","Highland Park","Hillcrest","Hillsboro","Hillsdale","Hillside","Hilltop","Holiday Hills","Holland","Hollywood","Hopewell","Horton","Houston","Howell","Hubbard","Hunter","Huntington","Huntsville","Hurricane","Hyde Park","Indian Village","Ingleside","Jackson","Jacksonville","Jamestown","Jenkins","Jericho","Jerome","Jimtown","Johnson","Johnsonville","Johnstown","Jones","Jordan","Kelly","Kensington","Kent","Kimball","King","Kingston","Kirkland","Knollwood","La Grange","Lake Forest","Lake View","Lakeland","Lakeside","Lakeview","Lakeville","Lakewood","Lamont","Lancaster","Langdon","Laurel","Lawrence","Lawrenceville","Lebanon","Lee","Leesburg","Leesville","Leland","Lenox","Leon","Lewis","Lewisburg","Lewisville","Liberty","Lincoln","Linden","Lisbon","Little River","Littleton","Lodi","Lone Oak","Lone Pine","Lone Star","Long Branch","Longwood","Louisville","Lucas","Ludlow","Lynn","Macedonia","Macon","Manchester","Mansfield","Maple Grove","Maple Hill","Mapleton","Marietta","Marion","Marshall","Martin","Martinsville","Mason","Maxwell","Mayfield","Maywood","Meadowbrook","Mechanicsburg","Middletown","Midway","Milan","Milford","Millbrook","Milltown","Millwood","Milo","Mineral Springs","Monroe","Montague","Montezuma","Monticello","Montpelier","Montrose","Moore","Morgan","Morgantown","Morris","Morton","Mount Olive","Mount Pleasant","Mount Tabor","Mount Vernon","Mount Zion","Mountain View","Murphy","Murray","Nashville","Nebo","Needmore","New Boston","New Hope","New Salem","New Town","Newark","Newburg","Newport","Newton","Newtown","Nichols","Northwood","Norton","Norwood","Nottingham","Oak Grove","Oak Hill","Oak Ridge","Oakdale","Oakland","Oakley","Oakwood","Omega","Oneida","Orange","Owens","Page","Palmyra","Paradise","Parker","Parkwood","Patterson","Paxton","Payne","Peoria","Perkins","Perry","Peru","Philadelphia","Phillips","Phoenix","Pierce","Pine Grove","Pine Hill","Pine Ridge","Pine Valley","Pinecrest","Pineville","Piney Grove","Pinhook","Pioneer","Pisgah","Plainview","Plainville","Pleasant Grove","Pleasant Hill","Pleasant Valley","Point Pleasant","Pomona","Poplar Grove","Poplar Springs","Post Oak","Powell","Preston","Price","Proctor","Prospect","Prosperity","Providence","Pulaski","Pumpkin Center","Quincy","Randolph","Rankin","Raymond","Red Bank","Red Hill","Red Oak","Red Rock","Redland","Reno","Riceville","Richardson","Richfield","Richland","Richmond","Richville","Ridgeville","Ridgeway","Ridgewood","Riley","River Oaks","Riverdale","Riverside","Riverview","Roberts","Rochester","Rock Hill","Rock Springs","Rockford","Rockland","Rockwood","Rocky Point","Rolling Hills","Roscoe","Rose Hill","Rosebud","Roseville","Rosewood","Rossville","Roxbury","Roy","Royal","Ruby","Ruth","Rutland","Ryan","Saint Clair","Saint George","Saint James","Saint John","Saint Johns","Saint Paul","Salem","San Jose","Sand Hill","Sanford","Saratoga","Sardis","Sawyer","Scotland","Scottsville","Selma","Seneca","Shady Grove","Shamrock","Shannon","Sharon","Shaw","Shawnee","Sheffield","Shelby","Sheridan","Sherman","Sherwood Forest","Shiloh","Shore Acres","Sidney","Siloam","Silver City","Silver Creek","Silver Springs","Simpson","Slabtown","Sleepy Hollow","Smith","Smyrna","Snug Harbor","Somerset","Somerville","Spencer","Spring Grove","Spring Hill","Spring Lake","Spring Valley","Springdale","Springfield","Springhill","Springtown","Springville","Stafford","Star","State Line","Sterling","Stewart","Stony Point","Stratford","Stringtown","Sugar Hill","Sullivan","Sulphur Springs","Summerfield","Summerville","Summit","Sumner","Sunnyside","Sunrise","Sunset Beach","Sunshine","Superior","Sutton","Sycamore","Tabor","Taft","Tanglewood","Texas","The Meadows","Thomas","Thompson","Thompsonville","Three Forks","Tipton","Tracy","Tremont","Trenton","Trinity","Turner","Twin Oaks","Tyler","Tyrone","Union","Union City","Union Hill","Unionville","Unity","Utica","Valley View","Vance","Verona","Victoria","Vienna","Vista","Wakefield","Wallace","Walnut","Walnut Grove","Walton","Ward","Warwick","Washington Heights","Waterford","Waterloo","Waterville","Watkins","Wayland","Wayne","Webb","Welcome","Weldon","Wesley","West End","West Liberty","West Point","Westfield","Westgate","Westminster","Weston","Westport","Westville","Westwood","Wheatland","Whispering Pines","White City","White Hall","White Oak","White Plains","White Rock","Whitesville","Whitney","Wildwood","Willard","Williams","Williamsburg","Williamsville","Willis","Willow","Wilson","Wilton","Winchester","Winfield","Winona","Winslow","Wolf Creek","Woodbine","Woodbury","Woodcrest","Woodland","Woodland Hills","Woodland Park","Woodlawn","Woodrow","Woodruff","Woodside","Woodstock","Woodville","Wright","Wyoming","York","Yorktown","Youngstown"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q47",
		'query': """with v1 as(
		select i_category, i_brand,
		s_store_name, s_company_name,
		d_year, d_moy,
		sum(ss_sales_price) sum_sales,
		avg(sum(ss_sales_price)) over
		(partition by i_category, i_brand,
			s_store_name, s_company_name, d_year)
		avg_monthly_sales,
		rank() over
		(partition by i_category, i_brand,
			s_store_name, s_company_name
		order by d_year, d_moy) rn
		from item, store_sales, date_dim, store
		where ss_item_sk = i_item_sk and
		ss_sold_date_sk = d_date_sk and
		ss_store_sk = s_store_sk and
		(
		d_year = {YEAR} or
		( d_year = {YEAR}-1 and d_moy =12) or
		( d_year = {YEAR}+1 and d_moy =1)
		)
		group by i_category, i_brand,
		s_store_name, s_company_name,
		d_year, d_moy),
		v2 as(
		select {SELECTONE}
		{SELECTTWO}
		,v1.avg_monthly_sales
		,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
		from v1, v1 v1_lag, v1 v1_lead
		where v1.i_category = v1_lag.i_category and
		v1.i_category = v1_lead.i_category and
		v1.i_brand = v1_lag.i_brand and
		v1.i_brand = v1_lead.i_brand and
		v1.s_store_name = v1_lag.s_store_name and
		v1.s_store_name = v1_lead.s_store_name and
		v1.s_company_name = v1_lag.s_company_name and
		v1.s_company_name = v1_lead.s_company_name and
		v1.rn = v1_lag.rn + 1 and
		v1.rn = v1_lead.rn - 1)
		select  *
		from v2
		where  d_year = {YEAR} and    
		avg_monthly_sales > 0 and
		case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
		order by sum_sales - avg_monthly_sales, {ORDERBY}
		limit 100""",
		'parameter':
		{
			'ORDERBY': {
				'type': "list",
				'range': ["avg_monthly_sales","sum_sales","psum","nsum"]
			},
			'SELECTONE': {
				'type': "list",
				'range': ["v1.i_category","v1.i_brand","v1.i_category","v1.i_brand, v1.s_store_name","v1.s_company_name","v1.s_store_name, v1.s_company_name","v1.i_category, v1.i_brand, v1.s_store_name, v1.s_company_name"]
			},
			'SELECTTWO': {
				'type': "list",
				'range': [",v1.d_year",",v1.d_year, v1.d_moy"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q48",
		'query': """select sum(ss_quantity) as sum_quantity
		from store_sales, store, customer_demographics, customer_address, date_dim
		where s_store_sk = ss_store_sk
		and  ss_sold_date_sk = d_date_sk and d_year = {YEAR}
		and  
		(
		(
		cd_demo_sk = ss_cdemo_sk
		and 
		cd_marital_status = '{MS1}'
		and 
		cd_education_status = '{ES1}'
		and 
		ss_sales_price between 100.00 and 150.00  
		)
		or
		(
		cd_demo_sk = ss_cdemo_sk
		and 
		cd_marital_status = '{MS2}'
		and 
		cd_education_status = '{ES2}'
		and 
		ss_sales_price between 50.00 and 100.00   
		)
		or 
		(
		cd_demo_sk = ss_cdemo_sk
		and 
		cd_marital_status = '{MS3}'
		and 
		cd_education_status = '{ES3}'
		and 
		ss_sales_price between 150.00 and 200.00  
		)
		)
		and
		(
		(
		ss_addr_sk = ca_address_sk
		and
		ca_country = 'United States'
		and
		ca_state in ('{STATE1}', '{STATE2}', '{STATE3}')
		and ss_net_profit between 0 and 2000  
		)
		or
		(ss_addr_sk = ca_address_sk
		and
		ca_country = 'United States'
		and
		ca_state in ('{STATE4}', '{STATE5}', '{STATE6}')
		and ss_net_profit between 150 and 3000 
		)
		or
		(ss_addr_sk = ca_address_sk
		and
		ca_country = 'United States'
		and
		ca_state in ('{STATE7}', '{STATE8}', '{STATE9}')
		and ss_net_profit between 50 and 25000 
		)
		)
		""",
		'parameter':
		{
			'ES': {
				'type': "list",
				'size': 3,
				'range': ["Primary","Secondary","College","2 yr Degree","4 yr Degree", "Advanced Degree","Unknown"]
			},
			'MS': {
				'type': "list",
				'size': 3,
				'range': ["M","S","D","W","U"]
			},
			'STATE': {
				'type': "list",
				'size': 9,
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q49",
		'query': """(select  channel, item, return_ratio, return_rank, currency_rank from
		(select
		'web' as channel
		,web.item
		,web.return_ratio
		,web.return_rank
		,web.currency_rank
		from (
		select 
		item
		,return_ratio
		,currency_ratio
		,rank() over (order by return_ratio) as return_rank
		,rank() over (order by currency_ratio) as currency_rank
		from
		( select ws.ws_item_sk as item
		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as decimal(15,4))/
		cast(sum(coalesce(ws.ws_quantity,0)) as decimal(15,4) )) as return_ratio
		,(cast(sum(coalesce(wr.wr_return_amt,0)) as decimal(15,4))/
		cast(sum(coalesce(ws.ws_net_paid,0)) as decimal(15,4) )) as currency_ratio
		from 
		web_sales ws left outer join web_returns wr 
		on (ws.ws_order_number = wr.wr_order_number and 
		ws.ws_item_sk = wr.wr_item_sk)
			,date_dim
		where 
		wr.wr_return_amt > 10000 
		and ws.ws_net_profit > 1
			and ws.ws_net_paid > 0
			and ws.ws_quantity > 0
			and ws_sold_date_sk = d_date_sk
			and d_year = {YEAR}
			and d_moy = {MONTH}
		group by ws.ws_item_sk
		) in_web
		) web
		where 
		(
		web.return_rank <= 10
		or
		web.currency_rank <= 10
		)) x
		union
		(select 
		'catalog' as channel
		,catalog.item
		,catalog.return_ratio
		,catalog.return_rank
		,catalog.currency_rank
		from (
		select 
		item
		,return_ratio
		,currency_ratio
		,rank() over (order by return_ratio) as return_rank
		,rank() over (order by currency_ratio) as currency_rank
		from
		( select 
		cs.cs_item_sk as item
		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as decimal(15,4))/
		cast(sum(coalesce(cs.cs_quantity,0)) as decimal(15,4) )) as return_ratio
		,(cast(sum(coalesce(cr.cr_return_amount,0)) as decimal(15,4))/
		cast(sum(coalesce(cs.cs_net_paid,0)) as decimal(15,4) )) as currency_ratio
		from 
		catalog_sales cs left outer join catalog_returns cr
		on (cs.cs_order_number = cr.cr_order_number and 
		cs.cs_item_sk = cr.cr_item_sk)
			,date_dim
		where 
		cr.cr_return_amount > 10000 
		and cs.cs_net_profit > 1
			and cs.cs_net_paid > 0
			and cs.cs_quantity > 0
			and cs_sold_date_sk = d_date_sk
			and d_year = {YEAR}
			and d_moy = {MONTH}
			group by cs.cs_item_sk
		) in_cat
		) catalog
		where 
		(
		catalog.return_rank <= 10
		or
		catalog.currency_rank <=10
		))
		union
		(select 
		'store' as channel
		,store.item
		,store.return_ratio
		,store.return_rank
		,store.currency_rank
		from (
		select 
		item
		,return_ratio
		,currency_ratio
		,rank() over (order by return_ratio) as return_rank
		,rank() over (order by currency_ratio) as currency_rank
		from
		( select sts.ss_item_sk as item
		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as decimal(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as decimal(15,4) )) as return_ratio
		,(cast(sum(coalesce(sr.sr_return_amt,0)) as decimal(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as decimal(15,4) )) as currency_ratio
		from 
		store_sales sts left outer join store_returns sr
		on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
			,date_dim
		where 
		sr.sr_return_amt > 10000 
		and sts.ss_net_profit > 1
			and sts.ss_net_paid > 0 
			and sts.ss_quantity > 0
			and ss_sold_date_sk = d_date_sk
			and d_year = {YEAR}
			and d_moy = {MONTH}
		group by sts.ss_item_sk
		) in_store
		) store
		where  (
		store.return_rank <= 10
		or 
		store.currency_rank <= 10
		)
		))
		order by 1,4,5,2
		limit 100""",
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [11,12]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q50",
		'query': """ select  
		s_store_name
		,s_company_id
		,s_street_number
		,s_street_name
		,s_street_type
		,s_suite_number
		,s_city
		,s_county
		,s_state
		,s_zip
		,sum(case when (sr_returned_date_sk - ss_sold_date_sk <= 30 ) then 1 else 0 end)  as "30 days" 
		,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 30) and 
			(sr_returned_date_sk - ss_sold_date_sk <= 60) then 1 else 0 end )  as "31-60 days" 
		,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 60) and 
			(sr_returned_date_sk - ss_sold_date_sk <= 90) then 1 else 0 end)  as "61-90 days" 
		,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 90) and
			(sr_returned_date_sk - ss_sold_date_sk <= 120) then 1 else 0 end)  as "91-120 days" 
		,sum(case when (sr_returned_date_sk - ss_sold_date_sk  > 120) then 1 else 0 end)  as ">120 days" 
		from
		store_sales
		,store_returns
		,store
		,date_dim d1
		,date_dim d2
		where
		d2.d_year = {YEAR}
		and d2.d_moy  = {MONTH}
		and ss_ticket_number = sr_ticket_number
		and ss_item_sk = sr_item_sk
		and ss_sold_date_sk   = d1.d_date_sk
		and sr_returned_date_sk   = d2.d_date_sk
		and ss_customer_sk = sr_customer_sk
		and ss_store_sk = s_store_sk
		group by
		s_store_name
		,s_company_id
		,s_street_number
		,s_street_name
		,s_street_type
		,s_suite_number
		,s_city
		,s_county
		,s_state
		,s_zip
		order by s_store_name
		,s_company_id
		,s_street_number
		,s_street_name
		,s_street_type
		,s_suite_number
		,s_city
		,s_county
		,s_state
		,s_zip
		limit 100""",
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [8,10]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q51",
		'query': """WITH web_v1 as (
		select
		ws_item_sk item_sk, d_date,
		sum(sum(ws_sales_price))
		over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
		from web_sales
		,date_dim
		where ws_sold_date_sk=d_date_sk
		and d_month_seq between {DMS} and {DMS}+11
		and ws_item_sk is not NULL
		group by ws_item_sk, d_date),
		store_v1 as (
		select
		ss_item_sk item_sk, d_date,
		sum(sum(ss_sales_price))
		over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
		from store_sales
		,date_dim
		where ss_sold_date_sk=d_date_sk
		and d_month_seq between {DMS} and {DMS}+11
		and ss_item_sk is not NULL
		group by ss_item_sk, d_date)
		select *
		from (select item_sk
		,d_date
		,web_sales
		,store_sales
		,max(web_sales)
		over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
		,max(store_sales)
		over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
		from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
			,case when web.d_date is not null then web.d_date else store.d_date end d_date
			,web.cume_sales web_sales
			,store.cume_sales store_sales
		from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
					and web.d_date = store.d_date)
		)x )y
		where web_cumulative > store_cumulative
		order by item_sk
		,d_date
		limit 100""",
		'DBMS': {
		'MySQL': """WITH web_v1 AS (
    SELECT
        ws_item_sk AS item_sk,
        d_date,
        SUM(SUM(ws_sales_price)) OVER (PARTITION BY ws_item_sk ORDER BY d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cume_sales
    FROM web_sales, date_dim
    WHERE ws_sold_date_sk = d_date_sk
      AND d_month_seq BETWEEN {DMS} AND {DMS} + 11
      AND ws_item_sk IS NOT NULL
    GROUP BY ws_item_sk, d_date
),
store_v1 AS (
    SELECT
        ss_item_sk AS item_sk,
        d_date,
        SUM(SUM(ss_sales_price)) OVER (PARTITION BY ss_item_sk ORDER BY d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cume_sales
    FROM store_sales, date_dim
    WHERE ss_sold_date_sk = d_date_sk
      AND d_month_seq BETWEEN {DMS} AND {DMS} + 11
      AND ss_item_sk IS NOT NULL
    GROUP BY ss_item_sk, d_date
),
combined_sales AS (
    SELECT
        item_sk,
        d_date,
        MAX(CASE WHEN source = 'web' THEN cume_sales END) AS web_sales,
        MAX(CASE WHEN source = 'store' THEN cume_sales END) AS store_sales
    FROM (
        SELECT item_sk, d_date, cume_sales, 'web' AS source
        FROM web_v1
        UNION ALL
        SELECT item_sk, d_date, cume_sales, 'store' AS source
        FROM store_v1
    ) AS combined
    GROUP BY item_sk, d_date
),
cumulative AS (
	SELECT
	    item_sk,
	    d_date,
	    web_sales,
	    store_sales,
	    MAX(web_sales) OVER (PARTITION BY item_sk ORDER BY d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS web_cumulative,
	    MAX(store_sales) OVER (PARTITION BY item_sk ORDER BY d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS store_cumulative
	FROM combined_sales
)
SELECT * FROM cumulative
WHERE web_cumulative > store_cumulative
ORDER BY item_sk, d_date
LIMIT 100"""
		},
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q52",
		'query': """  select  dt.d_year
		,item.i_brand_id brand_id
		,item.i_brand brand
		,sum(ss_ext_sales_price) ext_price
		from date_dim dt
		,store_sales
		,item
		where dt.d_date_sk = store_sales.ss_sold_date_sk
		and store_sales.ss_item_sk = item.i_item_sk
		and item.i_manager_id = 1
		and dt.d_moy={MONTH}
		and dt.d_year={YEAR}
		group by dt.d_year
		,item.i_brand
		,item.i_brand_id
		order by dt.d_year
		,ext_price desc
		,brand_id
		limit 100 """,
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [11,12]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q53",
		'query': """select * from 
		(select i_manufact_id,
		sum(ss_sales_price) sum_sales,
		avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
		from item, store_sales, date_dim, store
		where ss_item_sk = i_item_sk and
		ss_sold_date_sk = d_date_sk and
		ss_store_sk = s_store_sk and
		d_month_seq in ({DMS},{DMS}+1,{DMS}+2,{DMS}+3,{DMS}+4,{DMS}+5,{DMS}+6,{DMS}+7,{DMS}+8,{DMS}+9,{DMS}+10,{DMS}+11) and
		((i_category in ('Books','Children','Electronics') and
		i_class in ('personal','portable','reference','self-help') and
		i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
		or(i_category in ('Women','Music','Men') and
		i_class in ('accessories','classical','fragrances','pants') and
		i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
		group by i_manufact_id, d_qoy ) tmp1
		where case when avg_quarterly_sales > 0 
		then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales 
		else null end > 0.1
		order by avg_quarterly_sales,
		sum_sales,
		i_manufact_id
		limit 100""",
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q54",
		'query': """with my_customers as (
		select distinct c_customer_sk
		, c_current_addr_sk
		from   
		( select cs_sold_date_sk sold_date_sk,
			cs_bill_customer_sk customer_sk,
			cs_item_sk item_sk
		from   catalog_sales
		union all
		select ws_sold_date_sk sold_date_sk,
			ws_bill_customer_sk customer_sk,
			ws_item_sk item_sk
		from   web_sales
		) cs_or_ws_sales,
		item,
		date_dim,
		customer
		where   sold_date_sk = d_date_sk
		and item_sk = i_item_sk
		and i_category = '{CATEGORY}'
		and i_class = '{CLASS}'
		and c_customer_sk = cs_or_ws_sales.customer_sk
		and d_moy = {MONTH}
		and d_year = {YEAR}
		)
		, my_revenue as (
		select c_customer_sk,
		sum(ss_ext_sales_price) as revenue
		from   my_customers,
		store_sales,
		customer_address,
		store,
		date_dim
		where  c_current_addr_sk = ca_address_sk
		and ca_county = s_county
		and ca_state = s_state
		and ss_sold_date_sk = d_date_sk
		and c_customer_sk = ss_customer_sk
		and d_month_seq between (select distinct d_month_seq+1
				from   date_dim where d_year = {YEAR} and d_moy = {MONTH})
			and  (select distinct d_month_seq+3
				from   date_dim where d_year = {YEAR} and d_moy = {MONTH})
		group by c_customer_sk
		)
		, segments as
		(select cast((revenue/50) as int) as segment
		from   my_revenue
		)
		select  segment, count(*) as num_customers, segment*50 as segment_base
		from segments
		group by segment
		order by segment, num_customers
		limit 100""",
		'DBMS': {
		'MySQL': """with my_customers as (
		select distinct c_customer_sk
		, c_current_addr_sk
		from   
		( select cs_sold_date_sk sold_date_sk,
			cs_bill_customer_sk customer_sk,
			cs_item_sk item_sk
		from   catalog_sales
		union all
		select ws_sold_date_sk sold_date_sk,
			ws_bill_customer_sk customer_sk,
			ws_item_sk item_sk
		from   web_sales
		) cs_or_ws_sales,
		item,
		date_dim,
		customer
		where   sold_date_sk = d_date_sk
		and item_sk = i_item_sk
		and i_category = '{CATEGORY}'
		and i_class = '{CLASS}'
		and c_customer_sk = cs_or_ws_sales.customer_sk
		and d_moy = {MONTH}
		and d_year = {YEAR}
		)
		, my_revenue as (
		select c_customer_sk,
		sum(ss_ext_sales_price) as revenue
		from   my_customers,
		store_sales,
		customer_address,
		store,
		date_dim
		where  c_current_addr_sk = ca_address_sk
		and ca_county = s_county
		and ca_state = s_state
		and ss_sold_date_sk = d_date_sk
		and c_customer_sk = ss_customer_sk
		and d_month_seq between (select distinct d_month_seq+1
				from   date_dim where d_year = {YEAR} and d_moy = {MONTH})
			and  (select distinct d_month_seq+3
				from   date_dim where d_year = {YEAR} and d_moy = {MONTH})
		group by c_customer_sk
		)
		, segments as
		(select cast((revenue/50) as signed) as segment
		from   my_revenue
		)
		select  segment, count(*) as num_customers, segment*50 as segment_base
		from segments
		group by segment
		order by segment, num_customers
		limit 100""",
		},
		'parameter':
		{
			'CATEGORY': {
				'type': "list",
				'range': ["Books","Children","Electronics","Home","Jewelry","Men","Music","Shoes","Sports","Women"]
			},
			'MONTH': {
				'type': "integer",
				'range': [1,7]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			},
			'CLASS': {
			  'type': "list",
			  'range': ["accent","accessories","archery","arts","athletic","athletic","shoes","audio","automotive","baseball","basketball","bathroom","bedding","birdal","blinds/shades","bracelets","business","camcorders","cameras","camping","classical","computers","consignment","cooking","costume","country","curtains/drapes","custom","decor","diamonds","disk","drives","dresses","dvd/vcr","players","earings","entertainments","estate","fiction","fishing","fitness","flatware","football","fragrances","furniture","glassware","gold","golf","guns","history","hockey","home","repair","infants","jewelry","boxes","karoke","kids","lighting","loose","stones","maternity","mattresses","memory","mens","mens","watch","monitors","musical","mystery","newborn","optics","outdoor","paint","pants","parenting","pendants","personal","pools","pop","portable","reference","rings","rock","romance","rugs","sailing","scanners","school-uniforms","science","self-help","semi-precious","shirts","sports","sports-apparel","stereo","swimwear","tables","televisions","tennis","toddlers","travel","wallpaper","wireless","womens","womens watch"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q55",
		'query': """  select  i_brand_id brand_id, i_brand brand,
		sum(ss_ext_sales_price) ext_price
		from date_dim, store_sales, item
		where d_date_sk = ss_sold_date_sk
		and ss_item_sk = i_item_sk
		and i_manager_id={MANAGER}
		and d_moy={MONTH}
		and d_year={YEAR}
		group by i_brand, i_brand_id
		order by ext_price desc, i_brand_id
		limit 100 """,
		'parameter':
		{
			'MANAGER': {
				'type': "integer",
				'range': [1,100]
			},
			'MONTH': {
				'type': "integer",
				'range': [11,12]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q56",
		'query': """with ss as (
		select i_item_id,sum(ss_ext_sales_price) total_sales
		from
		store_sales,
		date_dim,
		customer_address,
		item
		where i_item_id in (select
		i_item_id
		from item
		where i_color in ('{COLOR1}','{COLOR2}','{COLOR3}'))
		and     ss_item_sk              = i_item_sk
		and     ss_sold_date_sk         = d_date_sk
		and     d_year                  = {YEAR}
		and     d_moy                   = {MONTH}
		and     ss_addr_sk              = ca_address_sk
		and     ca_gmt_offset           = {GMT} 
		group by i_item_id),
		cs as (
		select i_item_id,sum(cs_ext_sales_price) total_sales
		from
		catalog_sales,
		date_dim,
		customer_address,
		item
		where
		i_item_id               in (select
		i_item_id
		from item
		where i_color in ('{COLOR1}','{COLOR2}','{COLOR3}'))
		and     cs_item_sk              = i_item_sk
		and     cs_sold_date_sk         = d_date_sk
		and     d_year                  = {YEAR}
		and     d_moy                   = {MONTH}
		and     cs_bill_addr_sk         = ca_address_sk
		and     ca_gmt_offset           = {GMT} 
		group by i_item_id),
		ws as (
		select i_item_id,sum(ws_ext_sales_price) total_sales
		from
		web_sales,
		date_dim,
		customer_address,
		item
		where
		i_item_id               in (select
		i_item_id
		from item
		where i_color in ('{COLOR1}','{COLOR2}','{COLOR3}'))
		and     ws_item_sk              = i_item_sk
		and     ws_sold_date_sk         = d_date_sk
		and     d_year                  = {YEAR}
		and     d_moy                   = {MONTH}
		and     ws_bill_addr_sk         = ca_address_sk
		and     ca_gmt_offset           = {GMT}
		group by i_item_id)
		select  i_item_id ,sum(total_sales) total_sales
		from  (select * from ss 
		union all
		select * from cs 
		union all
		select * from ws) tmp1
		group by i_item_id
		order by total_sales,
		i_item_id
		limit 100""",
		'parameter':
		{
			'COLOR': {
				'type': "list",
				'size': 3,
				'range': ["bisque","black","blue","blush","chocolate","coral","cream","cyan","firebrick","frosted","gainsboro","ghost","goldenrod","green","grey","honeydew","hot","indian","ivory","khaki","lace","lavender","lawn","lime","linen","maroon","medium","midnight","mint","misty","moccasin","navy","olive","orange","orchid","pale","papaya","peach","peru","pink","plum","powder","puff","purple","red","rose","rosy","royal","saddle","salmon","sandy","seashell","sienna","sky","slate","smoke","snow","spring","steel","tan","thistle","tomato","turquoise","violet","wheat","white","yellow"]
			},
			'GMT': {
				'type': "list",
				'range': ["-10.00","-9.00","-8.00","-7.00","-6.00","-5.00"]
			},
			'MONTH': {
				'type': "integer",
				'range': [1,7]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q57",
		'query': """with v1 as(
		select i_category, i_brand,
		cc_name,
		d_year, d_moy,
		sum(cs_sales_price) sum_sales,
		avg(sum(cs_sales_price)) over
		(partition by i_category, i_brand,
			cc_name, d_year)
		avg_monthly_sales,
		rank() over
		(partition by i_category, i_brand,
			cc_name
		order by d_year, d_moy) rn
		from item, catalog_sales, date_dim, call_center
		where cs_item_sk = i_item_sk and
		cs_sold_date_sk = d_date_sk and
		cc_call_center_sk= cs_call_center_sk and
		(
		d_year = {YEAR} or
		( d_year = {YEAR}-1 and d_moy =12) or
		( d_year = {YEAR}+1 and d_moy =1)
		)
		group by i_category, i_brand,
		cc_name , d_year, d_moy),
		v2 as(
		select {SELECTONE}
		{SELECTTWO}
		,v1.avg_monthly_sales
		,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
		from v1, v1 v1_lag, v1 v1_lead
		where v1.i_category = v1_lag.i_category and
		v1.i_category = v1_lead.i_category and
		v1.i_brand = v1_lag.i_brand and
		v1.i_brand = v1_lead.i_brand and
		v1. cc_name = v1_lag. cc_name and
		v1. cc_name = v1_lead. cc_name and
		v1.rn = v1_lag.rn + 1 and
		v1.rn = v1_lead.rn - 1)
		select  *
		from v2
		where  d_year = {YEAR} and
		avg_monthly_sales > 0 and
		case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
		order by sum_sales - avg_monthly_sales, {ORDERBY}
		limit 100""",
		'parameter':
		{
			'ORDERBY': {
				'type': "list",
				'range': ["avg_monthly_sales","sum_sales","psum","nsum"]
			},
			'SELECTONE': {
				'type': "list",
				'range': ["v1.i_category","v1.i_brand","v1.i_category, v1.i_brand","v1.cc_name","v1.i_category, v1.i_brand, v1.cc_name"]
			},
			'SELECTTWO': {
				'type': "list",
				'range': [",v1.d_year",",v1.d_year, v1.d_moy"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1999,2001]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q58",
		'query': """with ss_items as
		(select i_item_id item_id
		,sum(ss_ext_sales_price) ss_item_rev 
		from store_sales
		,item
		,date_dim
		where ss_item_sk = i_item_sk
		and d_date in (select d_date
			from date_dim
			where d_week_seq = (select d_week_seq 
				from date_dim
				where d_date = '{YEAR}-{MONTH}-{DAY}'))
		and ss_sold_date_sk   = d_date_sk
		group by i_item_id),
		cs_items as
		(select i_item_id item_id
		,sum(cs_ext_sales_price) cs_item_rev
		from catalog_sales
		,item
		,date_dim
		where cs_item_sk = i_item_sk
		and  d_date in (select d_date
			from date_dim
			where d_week_seq = (select d_week_seq 
				from date_dim
				where d_date = '{YEAR}-{MONTH}-{DAY}'))
		and  cs_sold_date_sk = d_date_sk
		group by i_item_id),
		ws_items as
		(select i_item_id item_id
		,sum(ws_ext_sales_price) ws_item_rev
		from web_sales
		,item
		,date_dim
		where ws_item_sk = i_item_sk
		and  d_date in (select d_date
			from date_dim
			where d_week_seq =(select d_week_seq 
				from date_dim
				where d_date = '{YEAR}-{MONTH}-{DAY}'))
		and ws_sold_date_sk   = d_date_sk
		group by i_item_id)
		select  ss_items.item_id
		,ss_item_rev
		,ss_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 ss_dev
		,cs_item_rev
		,cs_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 cs_dev
		,ws_item_rev
		,ws_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 ws_dev
		,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
		from ss_items,cs_items,ws_items
		where ss_items.item_id=cs_items.item_id
		and ss_items.item_id=ws_items.item_id 
		and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
		and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
		and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
		and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
		and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
		and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
		order by item_id
		,ss_item_rev
		limit 100""",
		'parameter':
		{
			'DAY': {
				'type': "integer",
				'range': [1,24]
			},
			'MONTH': {
				'type': "integer",
				'range': [1,7]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q59",
		'query': """with wss as 
		(select d_week_seq,
		ss_store_sk,
		sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
		sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
		sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
		sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
		sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
		sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
		sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
		from store_sales,date_dim
		where d_date_sk = ss_sold_date_sk
		group by d_week_seq,ss_store_sk
		)
		select  s_store_name1,s_store_id1,d_week_seq1
		,sun_sales1/sun_sales2 sun_sales, mon_sales1/mon_sales2 mon_sales
		,tue_sales1/tue_sales2 tue_sales, wed_sales1/wed_sales2 wed_sales
		,thu_sales1/thu_sales2 thu_sales
		,fri_sales1/fri_sales2 fri_sales, sat_sales1/sat_sales2 sat_sales
		from
		(select s_store_name s_store_name1,wss.d_week_seq d_week_seq1
		,s_store_id s_store_id1,sun_sales sun_sales1
		,mon_sales mon_sales1,tue_sales tue_sales1
		,wed_sales wed_sales1,thu_sales thu_sales1
		,fri_sales fri_sales1,sat_sales sat_sales1
		from wss,store,date_dim d
		where d.d_week_seq = wss.d_week_seq and
		ss_store_sk = s_store_sk and 
		d_month_seq between {DMS} and {DMS} + 11) y,
		(select s_store_name s_store_name2,wss.d_week_seq d_week_seq2
		,s_store_id s_store_id2,sun_sales sun_sales2
		,mon_sales mon_sales2,tue_sales tue_sales2
		,wed_sales wed_sales2,thu_sales thu_sales2
		,fri_sales fri_sales2,sat_sales sat_sales2
		from wss,store,date_dim d
		where d.d_week_seq = wss.d_week_seq and
		ss_store_sk = s_store_sk and 
		d_month_seq between {DMS}+ 12 and {DMS} + 23) x
		where s_store_id1=s_store_id2
		and d_week_seq1=d_week_seq2-52
		order by s_store_name1,s_store_id1,d_week_seq1
		limit 100""",
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1212]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q60",
		'query': """with ss as (
		select
		i_item_id,sum(ss_ext_sales_price) total_sales
		from
		store_sales,
		date_dim,
		customer_address,
		item
		where
		i_item_id in (select
		i_item_id
		from
		item
		where i_category in ('{CATEGORY}'))
		and     ss_item_sk              = i_item_sk
		and     ss_sold_date_sk         = d_date_sk
		and     d_year                  = {YEAR}
		and     d_moy                   = {MONTH}
		and     ss_addr_sk              = ca_address_sk
		and     ca_gmt_offset           = {GMT} 
		group by i_item_id),
		cs as (
		select
		i_item_id,sum(cs_ext_sales_price) total_sales
		from
		catalog_sales,
		date_dim,
		customer_address,
		item
		where
		i_item_id               in (select
		i_item_id
		from
		item
		where i_category in ('{CATEGORY}'))
		and     cs_item_sk              = i_item_sk
		and     cs_sold_date_sk         = d_date_sk
		and     d_year                  = {YEAR}
		and     d_moy                   = {MONTH}
		and     cs_bill_addr_sk         = ca_address_sk
		and     ca_gmt_offset           = {GMT} 
		group by i_item_id),
		ws as (
		select
		i_item_id,sum(ws_ext_sales_price) total_sales
		from
		web_sales,
		date_dim,
		customer_address,
		item
		where
		i_item_id               in (select
		i_item_id
		from
		item
		where i_category in ('{CATEGORY}'))
		and     ws_item_sk              = i_item_sk
		and     ws_sold_date_sk         = d_date_sk
		and     d_year                  = {YEAR}
		and     d_moy                   = {MONTH}
		and     ws_bill_addr_sk         = ca_address_sk
		and     ca_gmt_offset           = {GMT}
		group by i_item_id)
		select   
		i_item_id
		,sum(total_sales) total_sales
		from  (select * from ss 
		union all
		select * from cs 
		union all
		select * from ws) tmp1
		group by i_item_id
		order by i_item_id
		,total_sales
		limit 100""",
		'parameter':
		{
			'CATEGORY': {
				'type': "list",
				'range': ["Children","Men","Music","Jewelry","Shoes"]
			},
			'GMT': {
			  'type': "list",
			  'range': ["-10.00","-9.00","-8.00","-7.00","-6.00","-5.00"]
			},
			'MONTH': {
				'type': "integer",
				'range': [8,10]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q61",
		'query': """ select  promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100 prom_per_total
		from
		(select sum(ss_ext_sales_price) promotions
		from  store_sales
		,store
		,promotion
		,date_dim
		,customer
		,customer_address 
		,item
		where ss_sold_date_sk = d_date_sk
		and   ss_store_sk = s_store_sk
		and   ss_promo_sk = p_promo_sk
		and   ss_customer_sk= c_customer_sk
		and   ca_address_sk = c_current_addr_sk
		and   ss_item_sk = i_item_sk 
		and   ca_gmt_offset = {GMT}
		and   i_category = '{CATEGORY}'
		and   (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y')
		and   s_gmt_offset = {GMT}
		and   d_year = {YEAR}
		and   d_moy  = {MONTH}) promotional_sales,
		(select sum(ss_ext_sales_price) total
		from  store_sales
		,store
		,date_dim
		,customer
		,customer_address
		,item
		where ss_sold_date_sk = d_date_sk
		and   ss_store_sk = s_store_sk
		and   ss_customer_sk= c_customer_sk
		and   ca_address_sk = c_current_addr_sk
		and   ss_item_sk = i_item_sk
		and   ca_gmt_offset = {GMT}
		and   i_category = '{CATEGORY}'
		and   s_gmt_offset = {GMT}
		and   d_year = {YEAR}
		and   d_moy  = {MONTH}) all_sales
		order by promotions, total
		limit 100""",
		'parameter':
		{
			'CATEGORY': {
				'type': "list",
				'range': ["Books","Home","Electronics","Jewelry","Sports"]
			},
			'GMT': {
				'type': "list",
				'range': ["-6","-7"]
			},
			'MONTH': {
				'type': "integer",
				'range': [11,12]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q62",
		'query': """with total as (select  
		substr(w_warehouse_name,1,20) as warehouse_name
		,sm_type
		,web_name
		,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end) as "30 days" 
		,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and 
			(ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end ) as "31-60 days" 
		,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and 
			(ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end) as "61-90 days" 
		,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
			(ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end) as "91-120 days" 
		,sum(case when (ws_ship_date_sk - ws_sold_date_sk  > 120) then 1 else 0 end)  as ">120 days" 
		from
		web_sales
		,warehouse
		,ship_mode
		,web_site
		,date_dim
		where
		d_month_seq between {DMS} and {DMS} + 11
		and ws_ship_date_sk   = d_date_sk
		and ws_warehouse_sk   = w_warehouse_sk
		and ws_ship_mode_sk   = sm_ship_mode_sk
		and ws_web_site_sk    = web_site_sk
		group by
		substr(w_warehouse_name,1,20)
		,sm_type
		,web_name)
		select * from total
		order by warehouse_name is not null, warehouse_name
		,sm_type
		,web_name
		limit 100""",
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1212]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q63",
		'query': """ select  * 
		from (select i_manager_id
		,sum(ss_sales_price) sum_sales
		,avg(sum(ss_sales_price)) over (partition by i_manager_id) avg_monthly_sales
		from item
		,store_sales
		,date_dim
		,store
		where ss_item_sk = i_item_sk
		and ss_sold_date_sk = d_date_sk
		and ss_store_sk = s_store_sk
		and d_month_seq in ({DMS},{DMS}+1,{DMS}+2,{DMS}+3,{DMS}+4,{DMS}+5,{DMS}+6,{DMS}+7,{DMS}+8,{DMS}+9,{DMS}+10,{DMS}+11)
		and ((    i_category in ('Books','Children','Electronics')
		and i_class in ('personal','portable','reference','self-help')
		and i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
			'exportiunivamalg #9','scholaramalgamalg #9'))
		or(    i_category in ('Women','Music','Men')
		and i_class in ('accessories','classical','fragrances','pants')
		and i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
			'importoamalg #1')))
		group by i_manager_id, d_moy) tmp1
		where case when avg_monthly_sales > 0 then abs (sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
		order by i_manager_id
		,avg_monthly_sales
		,sum_sales
		limit 100""",
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q64",
		'query': """with cs_ui as
		(select cs_item_sk
		,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
		from catalog_sales
		,catalog_returns
		where cs_item_sk = cr_item_sk
		and cs_order_number = cr_order_number
		group by cs_item_sk
		having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
		cross_sales as
		(select i_product_name product_name
		,i_item_sk item_sk
		,s_store_name store_name
		,s_zip store_zip
		,ad1.ca_street_number b_street_number
		,ad1.ca_street_name b_street_name
		,ad1.ca_city b_city
		,ad1.ca_zip b_zip
		,ad2.ca_street_number c_street_number
		,ad2.ca_street_name c_street_name
		,ad2.ca_city c_city
		,ad2.ca_zip c_zip
		,d1.d_year as syear
		,d2.d_year as fsyear
		,d3.d_year s2year
		,count(*) cnt
		,sum(ss_wholesale_cost) s1
		,sum(ss_list_price) s2
		,sum(ss_coupon_amt) s3
		FROM   store_sales
		,store_returns
		,cs_ui
		,date_dim d1
		,date_dim d2
		,date_dim d3
		,store
		,customer
		,customer_demographics cd1
		,customer_demographics cd2
		,promotion
		,household_demographics hd1
		,household_demographics hd2
		,customer_address ad1
		,customer_address ad2
		,income_band ib1
		,income_band ib2
		,item
		WHERE  ss_store_sk = s_store_sk AND
		ss_sold_date_sk = d1.d_date_sk AND
		ss_customer_sk = c_customer_sk AND
		ss_cdemo_sk= cd1.cd_demo_sk AND
		ss_hdemo_sk = hd1.hd_demo_sk AND
		ss_addr_sk = ad1.ca_address_sk and
		ss_item_sk = i_item_sk and
		ss_item_sk = sr_item_sk and
		ss_ticket_number = sr_ticket_number and
		ss_item_sk = cs_ui.cs_item_sk and
		c_current_cdemo_sk = cd2.cd_demo_sk AND
		c_current_hdemo_sk = hd2.hd_demo_sk AND
		c_current_addr_sk = ad2.ca_address_sk and
		c_first_sales_date_sk = d2.d_date_sk and
		c_first_shipto_date_sk = d3.d_date_sk and
		ss_promo_sk = p_promo_sk and
		hd1.hd_income_band_sk = ib1.ib_income_band_sk and
		hd2.hd_income_band_sk = ib2.ib_income_band_sk and
		cd1.cd_marital_status <> cd2.cd_marital_status and
		i_color in ('{COLOR1}','{COLOR2}','{COLOR3}','{COLOR4}','{COLOR5}','{COLOR6}') and
		i_current_price between {PRICE} and {PRICE} + 10 and
		i_current_price between {PRICE} + 1 and {PRICE} + 15
		group by i_product_name
		,i_item_sk
		,s_store_name
		,s_zip
		,ad1.ca_street_number
		,ad1.ca_street_name
		,ad1.ca_city
		,ad1.ca_zip
		,ad2.ca_street_number
		,ad2.ca_street_name
		,ad2.ca_city
		,ad2.ca_zip
		,d1.d_year
		,d2.d_year
		,d3.d_year
		)
		select cs1.product_name
		,cs1.store_name
		,cs1.store_zip
		,cs1.b_street_number
		,cs1.b_street_name
		,cs1.b_city
		,cs1.b_zip
		,cs1.c_street_number
		,cs1.c_street_name
		,cs1.c_city
		,cs1.c_zip
		,cs1.syear syear1
		,cs1.cnt cnt1
		,cs1.s1 as s11
		,cs1.s2 as s21
		,cs1.s3 as s31
		,cs2.s1 as s12
		,cs2.s2 as s22
		,cs2.s3 as s32
		,cs2.syear syear2
		,cs2.cnt cnt2
		from cross_sales cs1,cross_sales cs2
		where cs1.item_sk=cs2.item_sk and
		cs1.syear = {YEAR} and
		cs2.syear = {YEAR} + 1 and
		cs2.cnt <= cs1.cnt and
		cs1.store_name = cs2.store_name and
		cs1.store_zip = cs2.store_zip
		order by cs1.product_name
		,cs1.store_name
		,cs2.cnt
		,cs1.s1
		,cs2.s1""",
		'parameter':
		{
			'COLOR': {
				'type': "list",
				'size': 6,
				'range': ["bisque","black","blue","blush","chocolate","coral","cream","cyan","firebrick","frosted","gainsboro","ghost","goldenrod","green","grey","honeydew","hot","indian","ivory","khaki","lace","lavender","lawn","lime","linen","maroon","medium","midnight","mint","misty","moccasin","navy","olive","orange","orchid","pale","papaya","peach","peru","pink","plum","powder","puff","purple","red","rose","rosy","royal","saddle","salmon","sandy","seashell","sienna","sky","slate","smoke","snow","spring","steel","tan","thistle","tomato","turquoise","violet","wheat","white","yellow"]
			},
			'PRICE': {
				'type': "integer",
				'range': [0,85]
			},
			'YEAR': {
				'type': "integer",
				'range': [1999,2001]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q65",
		'query': """ select 
		s_store_name,
		i_item_desc,
		sc.revenue,
		i_current_price,
		i_wholesale_cost,
		i_brand
		from store, item,
		(select ss_store_sk, avg(revenue) as ave
		from
		(select  ss_store_sk, ss_item_sk, 
		sum(ss_sales_price) as revenue
		from store_sales, date_dim
		where ss_sold_date_sk = d_date_sk and d_month_seq between {DMS} and {DMS}+11
		group by ss_store_sk, ss_item_sk) sa
		group by ss_store_sk) sb,
		(select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
		from store_sales, date_dim
		where ss_sold_date_sk = d_date_sk and d_month_seq between {DMS} and {DMS}+11
		group by ss_store_sk, ss_item_sk) sc
		where sb.ss_store_sk = sc.ss_store_sk and 
		sc.revenue <= 0.1 * sb.ave and
		s_store_sk = sc.ss_store_sk and
		i_item_sk = sc.ss_item_sk
		order by s_store_name, i_item_desc
		limit 100""",
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q66",
		'query': """ select   
		w_warehouse_name
		,w_warehouse_sq_ft
		,w_city
		,w_county
		,w_state
		,w_country
		,ship_carriers
		,years
		,sum(jan_sales) as jan_sales
		,sum(feb_sales) as feb_sales
		,sum(mar_sales) as mar_sales
		,sum(apr_sales) as apr_sales
		,sum(may_sales) as may_sales
		,sum(jun_sales) as jun_sales
		,sum(jul_sales) as jul_sales
		,sum(aug_sales) as aug_sales
		,sum(sep_sales) as sep_sales
		,sum(oct_sales) as oct_sales
		,sum(nov_sales) as nov_sales
		,sum(dec_sales) as dec_sales
		,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot
		,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot
		,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot
		,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot
		,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot
		,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot
		,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot
		,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot
		,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot
		,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot
		,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot
		,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot
		,sum(jan_net) as jan_net
		,sum(feb_net) as feb_net
		,sum(mar_net) as mar_net
		,sum(apr_net) as apr_net
		,sum(may_net) as may_net
		,sum(jun_net) as jun_net
		,sum(jul_net) as jul_net
		,sum(aug_net) as aug_net
		,sum(sep_net) as sep_net
		,sum(oct_net) as oct_net
		,sum(nov_net) as nov_net
		,sum(dec_net) as dec_net
		from (
		select 
		w_warehouse_name
		,w_warehouse_sq_ft
		,w_city
		,w_county
		,w_state
		,w_country
		,'{SMC1}' || ',' || '{SMC2}' as ship_carriers
		,d_year as years
		,sum(case when d_moy = 1 
		then {SALESONE}* ws_quantity else 0 end) as jan_sales
		,sum(case when d_moy = 2 
		then {SALESONE}* ws_quantity else 0 end) as feb_sales
		,sum(case when d_moy = 3 
		then {SALESONE}* ws_quantity else 0 end) as mar_sales
		,sum(case when d_moy = 4 
		then {SALESONE}* ws_quantity else 0 end) as apr_sales
		,sum(case when d_moy = 5 
		then {SALESONE}* ws_quantity else 0 end) as may_sales
		,sum(case when d_moy = 6 
		then {SALESONE}* ws_quantity else 0 end) as jun_sales
		,sum(case when d_moy = 7 
		then {SALESONE}* ws_quantity else 0 end) as jul_sales
		,sum(case when d_moy = 8 
		then {SALESONE}* ws_quantity else 0 end) as aug_sales
		,sum(case when d_moy = 9 
		then {SALESONE}* ws_quantity else 0 end) as sep_sales
		,sum(case when d_moy = 10 
		then {SALESONE}* ws_quantity else 0 end) as oct_sales
		,sum(case when d_moy = 11
		then {SALESONE}* ws_quantity else 0 end) as nov_sales
		,sum(case when d_moy = 12
		then {SALESONE}* ws_quantity else 0 end) as dec_sales
		,sum(case when d_moy = 1 
		then {NETONE} * ws_quantity else 0 end) as jan_net
		,sum(case when d_moy = 2
		then {NETONE} * ws_quantity else 0 end) as feb_net
		,sum(case when d_moy = 3 
		then {NETONE} * ws_quantity else 0 end) as mar_net
		,sum(case when d_moy = 4 
		then {NETONE} * ws_quantity else 0 end) as apr_net
		,sum(case when d_moy = 5 
		then {NETONE} * ws_quantity else 0 end) as may_net
		,sum(case when d_moy = 6 
		then {NETONE} * ws_quantity else 0 end) as jun_net
		,sum(case when d_moy = 7 
		then {NETONE} * ws_quantity else 0 end) as jul_net
		,sum(case when d_moy = 8 
		then {NETONE} * ws_quantity else 0 end) as aug_net
		,sum(case when d_moy = 9 
		then {NETONE} * ws_quantity else 0 end) as sep_net
		,sum(case when d_moy = 10 
		then {NETONE} * ws_quantity else 0 end) as oct_net
		,sum(case when d_moy = 11
		then {NETONE} * ws_quantity else 0 end) as nov_net
		,sum(case when d_moy = 12
		then {NETONE} * ws_quantity else 0 end) as dec_net
		from
		web_sales
		,warehouse
		,date_dim
		,time_dim
		,ship_mode
		where
		ws_warehouse_sk =  w_warehouse_sk
		and ws_sold_date_sk = d_date_sk
		and ws_sold_time_sk = t_time_sk
		and ws_ship_mode_sk = sm_ship_mode_sk
		and d_year = {YEAR}
		and t_time between {TIMEONE} and {TIMEONE}+28800 
		and sm_carrier in ('{SMC1}','{SMC2}')
		group by 
		w_warehouse_name
		,w_warehouse_sq_ft
		,w_city
		,w_county
		,w_state
		,w_country
		,d_year
		union all
		select 
		w_warehouse_name
		,w_warehouse_sq_ft
		,w_city
		,w_county
		,w_state
		,w_country
		,'{SMC1}' || ',' || '{SMC2}' as ship_carriers
		,d_year as years
		,sum(case when d_moy = 1 
		then {SALESTWO}* cs_quantity else 0 end) as jan_sales
		,sum(case when d_moy = 2 
		then {SALESTWO}* cs_quantity else 0 end) as feb_sales
		,sum(case when d_moy = 3 
		then {SALESTWO}* cs_quantity else 0 end) as mar_sales
		,sum(case when d_moy = 4 
		then {SALESTWO}* cs_quantity else 0 end) as apr_sales
		,sum(case when d_moy = 5 
		then {SALESTWO}* cs_quantity else 0 end) as may_sales
		,sum(case when d_moy = 6 
		then {SALESTWO}* cs_quantity else 0 end) as jun_sales
		,sum(case when d_moy = 7 
		then {SALESTWO}* cs_quantity else 0 end) as jul_sales
		,sum(case when d_moy = 8 
		then {SALESTWO}* cs_quantity else 0 end) as aug_sales
		,sum(case when d_moy = 9 
		then {SALESTWO}* cs_quantity else 0 end) as sep_sales
		,sum(case when d_moy = 10 
		then {SALESTWO}* cs_quantity else 0 end) as oct_sales
		,sum(case when d_moy = 11
		then {SALESTWO}* cs_quantity else 0 end) as nov_sales
		,sum(case when d_moy = 12
		then {SALESTWO}* cs_quantity else 0 end) as dec_sales
		,sum(case when d_moy = 1 
		then {NETTWO} * cs_quantity else 0 end) as jan_net
		,sum(case when d_moy = 2 
		then {NETTWO} * cs_quantity else 0 end) as feb_net
		,sum(case when d_moy = 3 
		then {NETTWO} * cs_quantity else 0 end) as mar_net
		,sum(case when d_moy = 4 
		then {NETTWO} * cs_quantity else 0 end) as apr_net
		,sum(case when d_moy = 5 
		then {NETTWO} * cs_quantity else 0 end) as may_net
		,sum(case when d_moy = 6 
		then {NETTWO} * cs_quantity else 0 end) as jun_net
		,sum(case when d_moy = 7 
		then {NETTWO} * cs_quantity else 0 end) as jul_net
		,sum(case when d_moy = 8 
		then {NETTWO} * cs_quantity else 0 end) as aug_net
		,sum(case when d_moy = 9 
		then {NETTWO} * cs_quantity else 0 end) as sep_net
		,sum(case when d_moy = 10 
		then {NETTWO} * cs_quantity else 0 end) as oct_net
		,sum(case when d_moy = 11
		then {NETTWO} * cs_quantity else 0 end) as nov_net
		,sum(case when d_moy = 12
		then {NETTWO} * cs_quantity else 0 end) as dec_net
		from
		catalog_sales
		,warehouse
		,date_dim
		,time_dim
		,ship_mode
		where
		cs_warehouse_sk =  w_warehouse_sk
		and cs_sold_date_sk = d_date_sk
		and cs_sold_time_sk = t_time_sk
		and cs_ship_mode_sk = sm_ship_mode_sk
		and d_year = {YEAR}
		and t_time between {TIMEONE} AND {TIMEONE}+28800 
		and sm_carrier in ('{SMC1}','{SMC2}')
		group by 
		w_warehouse_name
		,w_warehouse_sq_ft
		,w_city
		,w_county
		,w_state
		,w_country
		,d_year
		) x
		group by 
		w_warehouse_name
		,w_warehouse_sq_ft
		,w_city
		,w_county
		,w_state
		,w_country
		,ship_carriers
		,years
		order by w_warehouse_name
		limit 100""",
		'parameter':
		{
			'NETONE': {
				'type': "list",
				'range': ["ws_net_paid","ws_net_paid_inc_tax","ws_net_paid_inc_ship","ws_net_paid_inc_ship_tax","ws_net_profit"]
			},
			'NETTWO': {
				'type': "list",
				'range': ["cs_net_paid","cs_net_paid_inc_tax","cs_net_paid_inc_ship","cs_net_paid_inc_ship_tax","cs_net_profit"]
			},
			'SALESONE': {
				'type': "list",
				'range': ["ws_sales_price","ws_ext_sales_price","ws_ext_list_price"]
			},
			'SALESTWO': {
				'type': "list",
				'range': ["cs_sales_price","cs_ext_sales_price","cs_ext_list_price"]
			},
			'SMC': {
				'type': "list",
				'size': 2,
				'range': ["AIRBORNE","ALLIANCE","BARIAN","BOXBUNDLES","DHL","DIAMOND","FEDEX","GERMA","GREAT","EASTERN","HARMSTORF","LATVIAN","MSC","ORIENTAL","PRIVATECARRIER","RUPEKSA","TBS","UPS","USPS","ZHOU","ZOUROS"]
			},
			'TIMEONE': {
				'type': "integer",
				'range': [1,57597]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q67",
		'query': """ select  *
		from (select i_category
		,i_class
		,i_brand
		,i_product_name
		,d_year
		,d_qoy
		,d_moy
		,s_store_id
		,sumsales
		,rank() over (partition by i_category order by sumsales desc) rk
		from (select i_category
			,i_class
			,i_brand
			,i_product_name
			,d_year
			,d_qoy
			,d_moy
			,s_store_id
			,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales
		from store_sales
			,date_dim
			,store
			,item
		where  ss_sold_date_sk=d_date_sk
		and ss_item_sk=i_item_sk
		and ss_store_sk = s_store_sk
		and d_month_seq between {DMS} and {DMS}+11
		group by i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id with rollup )dw1) dw2
		where rk <= 100
		order by i_category is not null, i_category
		,i_class is not null, i_class
		,i_brand is not null, i_brand
		,i_product_name is not null, i_product_name
		,d_year is not null, d_year
		,d_qoy
		,d_moy
		,s_store_id
		,sumsales
		,rk
		limit 100""",
		'DBMS': {
			'MonetDB':
				""" select  *
				from (select i_category
				,i_class
				,i_brand
				,i_product_name
				,d_year
				,d_qoy
				,d_moy
				,s_store_id
				,sumsales
				,rank() over (partition by i_category order by sumsales desc) rk
				from (select i_category
					,i_class
					,i_brand
					,i_product_name
					,d_year
					,d_qoy
					,d_moy
					,s_store_id
					,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales
				from store_sales
					,date_dim
					,store
					,item
				where  ss_sold_date_sk=d_date_sk
				and ss_item_sk=i_item_sk
				and ss_store_sk = s_store_sk
				and d_month_seq between {DMS} and {DMS}+11
				group by rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id) )dw1) dw2
				where rk <= 100
				order by i_category is not null, i_category
				,i_class is not null, i_class
				,i_brand is not null, i_brand
				,i_product_name is not null, i_product_name
				,d_year is not null, d_year
				,d_qoy
				,d_moy
				,s_store_id
				,sumsales
				,rk
				limit 100""",
			'PostgreSQL':
				""" select  *
				from (select i_category
				,i_class
				,i_brand
				,i_product_name
				,d_year
				,d_qoy
				,d_moy
				,s_store_id
				,sumsales
				,rank() over (partition by i_category order by sumsales desc) rk
				from (select i_category
					,i_class
					,i_brand
					,i_product_name
					,d_year
					,d_qoy
					,d_moy
					,s_store_id
					,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales
				from store_sales
					,date_dim
					,store
					,item
				where  ss_sold_date_sk=d_date_sk
				and ss_item_sk=i_item_sk
				and ss_store_sk = s_store_sk
				and d_month_seq between {DMS} and {DMS}+11
				group by rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id) )dw1) dw2
				where rk <= 100
				order by i_category is not null, i_category
				,i_class is not null, i_class
				,i_brand is not null, i_brand
				,i_product_name is not null, i_product_name
				,d_year is not null, d_year
				,d_qoy
				,d_moy
				,s_store_id
				,sumsales
				,rk
				limit 100""",
		},
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q68",
		'query': """ select  c_last_name
		,c_first_name
		,ca_city
		,bought_city
		,ss_ticket_number
		,extended_price
		,extended_tax
		,list_price
		from (select ss_ticket_number
		,ss_customer_sk
		,ca_city bought_city
		,sum(ss_ext_sales_price) extended_price 
		,sum(ss_ext_list_price) list_price
		,sum(ss_ext_tax) extended_tax 
		from store_sales
		,date_dim
		,store
		,household_demographics
		,customer_address 
		where store_sales.ss_sold_date_sk = date_dim.d_date_sk
		and store_sales.ss_store_sk = store.s_store_sk  
		and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
		and store_sales.ss_addr_sk = customer_address.ca_address_sk
		and date_dim.d_dom between 1 and 2 
		and (household_demographics.hd_dep_count = {DEPCNT} or
		household_demographics.hd_vehicle_count= {VEHCNT})
		and date_dim.d_year in ({YEAR},{YEAR}+1,{YEAR}+2)
		and store.s_city in ('{CITY1}','{CITY2}')
		group by ss_ticket_number
		,ss_customer_sk
		,ss_addr_sk,ca_city) dn
		,customer
		,customer_address current_addr
		where ss_customer_sk = c_customer_sk
		and customer.c_current_addr_sk = current_addr.ca_address_sk
		and current_addr.ca_city <> bought_city
		order by c_last_name
		,ss_ticket_number
		limit 100""",
		'parameter':
		{
			'CITY': {
				'type': "list",
				'size': 2,
				'range': ["Aberdeen","Acme","Adams","Adrian","Afton","Albany","Allentown","Allison","Alma","Alpha","Altamont","Amherst","Amity","Andover","Antioch","Appleton","Arcadia","Arcola","Argyle","Arlington","Armstrong","Arthur","Ashland","Ashley","Ashton","Athens","Avery","Avoca","Avon","Bailey","Baker","Barnes","Bartlett","Bath","Bay View","Bayside","Bayview","Bear Creek","Beech Grove","Beechwood","Belfast","Belleview","Belleville","Belmont","Bennett","Benton","Berea","Berlin","Bethany","Bethel","Bethesda","Bethlehem","Big Creek","Birmingham","Blaine","Blair","Blanchard","Bloomingdale","Blue Springs","Bolton","Boyd","Bradford","Bradley","Brandon","Brentwood","Bridgeport","Bristol","Brooklyn","Brooks","Brookville","Brookwood","Brownsville","Brunswick","Bryant","Buckhorn","Buckingham","Buena Vista","Buffalo","Bunker Hill","Burns","Burton","Butler","Byron","Caldwell","Caledonia","Calhoun","California","Cambridge","Camden","Camelot","Canaan","Carlisle","Carlton","Carpenter","Carter","Carthage","Cedar","Cedar Creek","Cedar Grove","Cedar Hill","Center","Center Point","Centerville","Chapel Hill","Charleston","Chatham","Chelsea","Cherokee","Cherry Grove","Cherry Valley","Chester","Chestnut Hill","Chestnut Ridge","Church Hill","Clearview","Clearwater","Clifford","Clifton","Climax","Clinton","Clyde","Coldwater","Colfax","Collinsville","Colonial Heights","Columbia","Columbus","Concord","Conway","Cooper","Cordova","Corinth","Cottonwood","Country Club Estates","Crawford","Crescent","Creston","Crestview","Crossroads","Crystal","Crystal Springs","Cuba","Cumberland","Cunningham","Curtis","Dale","Dallas","Darlington","Decatur","Deer Park","Deerfield","Delmar","Delta","Denmark","Denver","Derby","Dewey","Dover","Doyle","Duncan","Dunlap","Easton","Eastwood","Echo","Edgewater","Edgewood","Edwards","Egypt","Elba","Elgin","Elizabeth","Elkton","Ellisville","Ellsworth","Elm Grove","Elmwood","Empire","Enon","Enterprise","Eureka","Evans","Evansville","Evergreen","Fair Oaks","Fairbanks","Fairfax","Fairfield","Fairmont","Fairmount","Fairview","Farmersville","Farmington","Fayetteville","Ferguson","Ferndale","Fernwood","Fillmore","Fisher","Five Forks","Five Points","Flat Rock","Flatwoods","Flint","Flint Hill","Florence","Floyd","Forest","Forest Hills","Forest Park","Forestville","Foster","Four Points","Fowler","Fox","Frankfort","Franklin","Freedom","Freeman","Freeport","Fremont","Frenchtown","Friendship","Frogtown","Fulton","Galena","Gardner","Garfield","Garrison","Gary","Georgetown","Gilbert","Gilmore","Gladstone","Glencoe","Glendale","Glenville","Glenwood","Globe","Golden","Good Hope","Goshen","Grandview","Granite","Grant","Gravel Hill","Gray","Green Acres","Green Hill","Green Valley","Greenbrier","Greendale","Greenfield","Greenville","Greenwood","Griffin","Guilford","Gum Springs","Guthrie","Hamburg","Hamilton","Hampton","Hardy","Harmon","Harmony","Harper","Harris","Harrisburg","Hartland","Harvey","Hastings","Hawthorne","Hazelwood","Helena","Henry","Hidden Valley","Highland","Highland Park","Hillcrest","Hillsboro","Hillsdale","Hillside","Hilltop","Holiday Hills","Holland","Hollywood","Hopewell","Horton","Houston","Howell","Hubbard","Hunter","Huntington","Huntsville","Hurricane","Hyde Park","Indian Village","Ingleside","Jackson","Jacksonville","Jamestown","Jenkins","Jericho","Jerome","Jimtown","Johnson","Johnsonville","Johnstown","Jones","Jordan","Kelly","Kensington","Kent","Kimball","King","Kingston","Kirkland","Knollwood","La Grange","Lake Forest","Lake View","Lakeland","Lakeside","Lakeview","Lakeville","Lakewood","Lamont","Lancaster","Langdon","Laurel","Lawrence","Lawrenceville","Lebanon","Lee","Leesburg","Leesville","Leland","Lenox","Leon","Lewis","Lewisburg","Lewisville","Liberty","Lincoln","Linden","Lisbon","Little River","Littleton","Lodi","Lone Oak","Lone Pine","Lone Star","Long Branch","Longwood","Louisville","Lucas","Ludlow","Lynn","Macedonia","Macon","Manchester","Mansfield","Maple Grove","Maple Hill","Mapleton","Marietta","Marion","Marshall","Martin","Martinsville","Mason","Maxwell","Mayfield","Maywood","Meadowbrook","Mechanicsburg","Middletown","Midway","Milan","Milford","Millbrook","Milltown","Millwood","Milo","Mineral Springs","Monroe","Montague","Montezuma","Monticello","Montpelier","Montrose","Moore","Morgan","Morgantown","Morris","Morton","Mount Olive","Mount Pleasant","Mount Tabor","Mount Vernon","Mount Zion","Mountain View","Murphy","Murray","Nashville","Nebo","Needmore","New Boston","New Hope","New Salem","New Town","Newark","Newburg","Newport","Newton","Newtown","Nichols","Northwood","Norton","Norwood","Nottingham","Oak Grove","Oak Hill","Oak Ridge","Oakdale","Oakland","Oakley","Oakwood","Omega","Oneida","Orange","Owens","Page","Palmyra","Paradise","Parker","Parkwood","Patterson","Paxton","Payne","Peoria","Perkins","Perry","Peru","Philadelphia","Phillips","Phoenix","Pierce","Pine Grove","Pine Hill","Pine Ridge","Pine Valley","Pinecrest","Pineville","Piney Grove","Pinhook","Pioneer","Pisgah","Plainview","Plainville","Pleasant Grove","Pleasant Hill","Pleasant Valley","Point Pleasant","Pomona","Poplar Grove","Poplar Springs","Post Oak","Powell","Preston","Price","Proctor","Prospect","Prosperity","Providence","Pulaski","Pumpkin Center","Quincy","Randolph","Rankin","Raymond","Red Bank","Red Hill","Red Oak","Red Rock","Redland","Reno","Riceville","Richardson","Richfield","Richland","Richmond","Richville","Ridgeville","Ridgeway","Ridgewood","Riley","River Oaks","Riverdale","Riverside","Riverview","Roberts","Rochester","Rock Hill","Rock Springs","Rockford","Rockland","Rockwood","Rocky Point","Rolling Hills","Roscoe","Rose Hill","Rosebud","Roseville","Rosewood","Rossville","Roxbury","Roy","Royal","Ruby","Ruth","Rutland","Ryan","Saint Clair","Saint George","Saint James","Saint John","Saint Johns","Saint Paul","Salem","San Jose","Sand Hill","Sanford","Saratoga","Sardis","Sawyer","Scotland","Scottsville","Selma","Seneca","Shady Grove","Shamrock","Shannon","Sharon","Shaw","Shawnee","Sheffield","Shelby","Sheridan","Sherman","Sherwood Forest","Shiloh","Shore Acres","Sidney","Siloam","Silver City","Silver Creek","Silver Springs","Simpson","Slabtown","Sleepy Hollow","Smith","Smyrna","Snug Harbor","Somerset","Somerville","Spencer","Spring Grove","Spring Hill","Spring Lake","Spring Valley","Springdale","Springfield","Springhill","Springtown","Springville","Stafford","Star","State Line","Sterling","Stewart","Stony Point","Stratford","Stringtown","Sugar Hill","Sullivan","Sulphur Springs","Summerfield","Summerville","Summit","Sumner","Sunnyside","Sunrise","Sunset Beach","Sunshine","Superior","Sutton","Sycamore","Tabor","Taft","Tanglewood","Texas","The Meadows","Thomas","Thompson","Thompsonville","Three Forks","Tipton","Tracy","Tremont","Trenton","Trinity","Turner","Twin Oaks","Tyler","Tyrone","Union","Union City","Union Hill","Unionville","Unity","Utica","Valley View","Vance","Verona","Victoria","Vienna","Vista","Wakefield","Wallace","Walnut","Walnut Grove","Walton","Ward","Warwick","Washington Heights","Waterford","Waterloo","Waterville","Watkins","Wayland","Wayne","Webb","Welcome","Weldon","Wesley","West End","West Liberty","West Point","Westfield","Westgate","Westminster","Weston","Westport","Westville","Westwood","Wheatland","Whispering Pines","White City","White Hall","White Oak","White Plains","White Rock","Whitesville","Whitney","Wildwood","Willard","Williams","Williamsburg","Williamsville","Willis","Willow","Wilson","Wilton","Winchester","Winfield","Winona","Winslow","Wolf Creek","Woodbine","Woodbury","Woodcrest","Woodland","Woodland Hills","Woodland Park","Woodlawn","Woodrow","Woodruff","Woodside","Woodstock","Woodville","Wright","Wyoming","York","Yorktown","Youngstown"]
			},
			'DEPCNT': {
				'type': "integer",
				'range': [0,9]
			},
			'VEHCNT': {
				'type': "integer",
				'range': [-1,4]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2000]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q69",
		'query': """ select  
		cd_gender,
		cd_marital_status,
		cd_education_status,
		count(*) cnt1,
		cd_purchase_estimate,
		count(*) cnt2,
		cd_credit_rating,
		count(*) cnt3
		from
		customer c,customer_address ca,customer_demographics
		where
		c.c_current_addr_sk = ca.ca_address_sk and
		ca_state in ('{STATE1}','{STATE2}','{STATE3}') and
		cd_demo_sk = c.c_current_cdemo_sk and 
		exists (select *
		from store_sales,date_dim
		where c.c_customer_sk = ss_customer_sk and
			ss_sold_date_sk = d_date_sk and
			d_year = {YEAR} and
			d_moy between {MONTH} and {MONTH}+2) and
		(not exists (select *
		from web_sales,date_dim
		where c.c_customer_sk = ws_bill_customer_sk and
			ws_sold_date_sk = d_date_sk and
			d_year = {YEAR} and
			d_moy between {MONTH} and {MONTH}+2) and
		not exists (select * 
		from catalog_sales,date_dim
		where c.c_customer_sk = cs_ship_customer_sk and
			cs_sold_date_sk = d_date_sk and
			d_year = {YEAR} and
			d_moy between {MONTH} and {MONTH}+2))
		group by cd_gender,
		cd_marital_status,
		cd_education_status,
		cd_purchase_estimate,
		cd_credit_rating
		order by cd_gender,
		cd_marital_status,
		cd_education_status,
		cd_purchase_estimate,
		cd_credit_rating
		limit 100""",
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [1,4]
			},
			'STATE': {
				'type': "list",
				'size': 3,
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1999,2004]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q70",
		'query': """ select  
		sum(ss_net_profit) as total_sum
		,s_state
		,s_county
		,grouping(s_state)+grouping(s_county) as lochierarchy
		,rank() over (
		partition by grouping(s_state)+grouping(s_county),
		case when grouping(s_county) = 0 then s_state end 
		order by sum(ss_net_profit) desc) as rank_within_parent
		from
		store_sales
		,date_dim       d1
		,store
		where
		d1.d_month_seq between {DMS} and {DMS}+11
		and d1.d_date_sk = ss_sold_date_sk
		and s_store_sk  = ss_store_sk
		and s_state in
		( select s_state
		from  (select s_state as s_state,
			rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
			from   store_sales, store, date_dim
			where  d_month_seq between {DMS} and {DMS}+11
			and d_date_sk = ss_sold_date_sk
			and s_store_sk  = ss_store_sk
			group by s_state
			) tmp1 
		where ranking <= 5
		)
		group by s_state,s_county with rollup
		order by
		lochierarchy desc
		,case when lochierarchy = 0 then s_state end
		,rank_within_parent
		limit 100""",
		'DBMS': {
			'MonetDB': """ -- Aggregation by s_state and s_county
SELECT  
    SUM(ss_net_profit) AS total_sum,
    s_state,
    s_county,
    0 AS lochierarchy,  -- Indicates detailed level
    RANK() OVER (
        PARTITION BY s_state 
        ORDER BY SUM(ss_net_profit) DESC
    ) AS rank_within_parent
FROM 
    store_sales
JOIN date_dim AS d1 ON d1.d_date_sk = ss_sold_date_sk
JOIN store ON s_store_sk = ss_store_sk
WHERE 
    d1.d_month_seq BETWEEN {DMS} AND {DMS} + 11
    AND s_state IN (
        SELECT s_state
        FROM (
            SELECT s_state,
                   RANK() OVER (PARTITION BY s_state ORDER BY SUM(ss_net_profit) DESC) AS ranking
            FROM store_sales
            JOIN store ON s_store_sk = ss_store_sk
            JOIN date_dim ON d_date_sk = ss_sold_date_sk
            WHERE d_month_seq BETWEEN {DMS} AND {DMS} + 11
            GROUP BY s_state
        ) AS tmp1
        WHERE ranking <= 5
    )
GROUP BY s_state, s_county

UNION ALL

-- Subtotal by s_state
SELECT 
    SUM(ss_net_profit) AS total_sum,
    s_state,
    NULL AS s_county,
    1 AS lochierarchy,  -- Indicates subtotal level
    RANK() OVER (
        PARTITION BY s_state
        ORDER BY SUM(ss_net_profit) DESC
    ) AS rank_within_parent
FROM 
    store_sales
JOIN date_dim AS d1 ON d1.d_date_sk = ss_sold_date_sk
JOIN store ON s_store_sk = ss_store_sk
WHERE 
    d1.d_month_seq BETWEEN {DMS} AND {DMS} + 11
    AND s_state IN (
        SELECT s_state
        FROM (
            SELECT s_state,
                   RANK() OVER (PARTITION BY s_state ORDER BY SUM(ss_net_profit) DESC) AS ranking
            FROM store_sales
            JOIN store ON s_store_sk = ss_store_sk
            JOIN date_dim ON d_date_sk = ss_sold_date_sk
            WHERE d_month_seq BETWEEN {DMS} AND {DMS} + 11
            GROUP BY s_state
        ) AS tmp1
        WHERE ranking <= 5
    )
GROUP BY s_state

UNION ALL

-- Grand total
SELECT 
    SUM(ss_net_profit) AS total_sum,
    NULL AS s_state,
    NULL AS s_county,
    2 AS lochierarchy,  -- Indicates grand total level
    NULL AS rank_within_parent
FROM 
    store_sales
JOIN date_dim AS d1 ON d1.d_date_sk = ss_sold_date_sk
JOIN store ON s_store_sk = ss_store_sk
WHERE 
    d1.d_month_seq BETWEEN {DMS} AND {DMS} + 11
    AND s_state IN (
        SELECT s_state
        FROM (
            SELECT s_state,
                   RANK() OVER (PARTITION BY s_state ORDER BY SUM(ss_net_profit) DESC) AS ranking
            FROM store_sales
            JOIN store ON s_store_sk = ss_store_sk
            JOIN date_dim ON d_date_sk = ss_sold_date_sk
            WHERE d_month_seq BETWEEN {DMS} AND {DMS} + 11
            GROUP BY s_state
        ) AS tmp1
        WHERE ranking <= 5
    )
ORDER BY
    lochierarchy DESC,
    s_state,
    rank_within_parent
LIMIT 100""",
			'PostgreSQL': """ select  
				sum(ss_net_profit) as total_sum
				,s_state
				,s_county
				,grouping(s_state)+grouping(s_county) as lochierarchy
				,rank() over (
				partition by grouping(s_state)+grouping(s_county),
				case when grouping(s_county) = 0 then s_state end 
				order by sum(ss_net_profit) desc) as rank_within_parent
				from
				store_sales
				,date_dim       d1
				,store
				where
				d1.d_month_seq between {DMS} and {DMS}+11
				and d1.d_date_sk = ss_sold_date_sk
				and s_store_sk  = ss_store_sk
				and s_state in
				( select s_state
				from  (select s_state as s_state,
					rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
					from   store_sales, store, date_dim
					where  d_month_seq between {DMS} and {DMS}+11
					and d_date_sk = ss_sold_date_sk
					and s_store_sk  = ss_store_sk
					group by s_state
					) tmp1 
				where ranking <= 5
				)
				group by rollup(s_state,s_county)
				order by
				lochierarchy desc
				,case when grouping(s_state)+grouping(s_county) = 0 then s_state end
				,rank_within_parent
				limit 100""",
			'Exasol': """ select  
				sum(ss_net_profit) as total_sum
				,s_state
				,s_county
				,grouping(s_state)+grouping(s_county) as lochierarchy
				,rank() over (
				partition by grouping(s_state)+grouping(s_county),
				case when grouping(s_county) = 0 then s_state end 
				order by sum(ss_net_profit) desc) as rank_within_parent
				from
				store_sales
				,date_dim       d1
				,store
				where
				d1.d_month_seq between {DMS} and {DMS}+11
				and d1.d_date_sk = ss_sold_date_sk
				and s_store_sk  = ss_store_sk
				and s_state in
				( select s_state
				from  (select s_state as s_state,
					rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
					from   store_sales, store, date_dim
					where  d_month_seq between {DMS} and {DMS}+11
					and d_date_sk = ss_sold_date_sk
					and s_store_sk  = ss_store_sk
					group by s_state
					) tmp1 
				where ranking <= 5
				)
				group by rollup('s_state','s_county')
				order by
				lochierarchy desc
				,case when lochierarchy = 0 then s_state end
				,rank_within_parent
				limit 100""",
			'MemSQL': """ select  
				sum(ss_net_profit) as total_sum
				,s_state
				,s_county
				,grouping(s_state)+grouping(s_county) as lochierarchy
				,rank() over (
				partition by grouping(s_state)+grouping(s_county),
				case when grouping(s_county) = 0 then s_state end 
				order by sum(ss_net_profit) desc) as rank_within_parent
				from
				store_sales
				,date_dim       d1
				,store
				where
				d1.d_month_seq between {DMS} and {DMS}+11
				and d1.d_date_sk = ss_sold_date_sk
				and s_store_sk  = ss_store_sk
				and s_state in
				( select s_state
				from  (select s_state as s_state,
					rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
					from   store_sales, store, date_dim
					where  d_month_seq between {DMS} and {DMS}+11
					and d_date_sk = ss_sold_date_sk
					and s_store_sk  = ss_store_sk
					group by s_state
					) tmp1 
				where ranking <= 5
				)
				group by rollup('s_state','s_county')
				order by
				lochierarchy desc
				,case when lochierarchy = 0 then s_state end
				,rank_within_parent
				limit 100""",
			'MariaDB': """SELECT *
FROM (
    SELECT  
        SUM(ss_net_profit) AS total_sum,
        s_state,
        s_county,
        CASE WHEN s_state IS NULL THEN 1 ELSE 0 END + 
        CASE WHEN s_county IS NULL THEN 1 ELSE 0 END AS lochierarchy,
        RANK() OVER (
            PARTITION BY 
                CASE WHEN s_state IS NULL THEN 1 ELSE 0 END +
                CASE WHEN s_county IS NULL THEN 1 ELSE 0 END,
            CASE WHEN s_county IS NOT NULL THEN s_state END
            ORDER BY SUM(ss_net_profit) DESC
        ) AS rank_within_parent
    FROM 
        store_sales
    JOIN date_dim AS d1 ON d1.d_date_sk = ss_sold_date_sk
    JOIN store ON s_store_sk = ss_store_sk
    WHERE 
        d1.d_month_seq BETWEEN {DMS} AND {DMS} + 11
        AND s_state IN (
            SELECT s_state
            FROM (
                SELECT s_state,
                       RANK() OVER (PARTITION BY s_state ORDER BY SUM(ss_net_profit) DESC) AS ranking
                FROM store_sales
                JOIN store ON s_store_sk = ss_store_sk
                JOIN date_dim ON d_date_sk = ss_sold_date_sk
                WHERE d_month_seq BETWEEN {DMS} AND {DMS} + 11
                GROUP BY s_state
            ) AS tmp1
            WHERE ranking <= 5
        )
    GROUP BY s_state, s_county WITH ROLLUP
) AS aggregated_data
ORDER BY
    lochierarchy DESC,
    CASE WHEN lochierarchy = 0 THEN s_state END,
    rank_within_parent
LIMIT 100"""
		},
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q71",
		'query': """select i_brand_id brand_id, i_brand brand,t_hour,t_minute,
		sum(ext_price) ext_price
		from item, (select ws_ext_sales_price as ext_price, 
			ws_sold_date_sk as sold_date_sk,
			ws_item_sk as sold_item_sk,
			ws_sold_time_sk as time_sk  
			from web_sales,date_dim
			where d_date_sk = ws_sold_date_sk
			and d_moy={MONTH}
			and d_year={YEAR}
			union all
			select cs_ext_sales_price as ext_price,
			cs_sold_date_sk as sold_date_sk,
			cs_item_sk as sold_item_sk,
			cs_sold_time_sk as time_sk
			from catalog_sales,date_dim
			where d_date_sk = cs_sold_date_sk
			and d_moy={MONTH}
			and d_year={YEAR}
			union all
			select ss_ext_sales_price as ext_price,
			ss_sold_date_sk as sold_date_sk,
			ss_item_sk as sold_item_sk,
			ss_sold_time_sk as time_sk
			from store_sales,date_dim
			where d_date_sk = ss_sold_date_sk
			and d_moy={MONTH}
			and d_year={YEAR}
			) tmp,time_dim
		where
		sold_item_sk = i_item_sk
		and i_manager_id=1
		and time_sk = t_time_sk
		and (t_meal_time = 'breakfast' or t_meal_time = 'dinner')
		group by i_brand, i_brand_id,t_hour,t_minute
		order by ext_price desc, i_brand_id
		""",
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [11,12]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q72",
		'query': """ select  i_item_desc
			,w_warehouse_name
			,d1.d_week_seq
			,sum(case when p_promo_sk is null then 1 else 0 end) no_promo
			,sum(case when p_promo_sk is not null then 1 else 0 end) promo
			,count(*) total_cnt
			from catalog_sales
			join inventory on (cs_item_sk = inv_item_sk)
			join warehouse on (w_warehouse_sk=inv_warehouse_sk)
			join item on (i_item_sk = cs_item_sk)
			join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
			join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
			join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
			join date_dim d2 on (inv_date_sk = d2.d_date_sk)
			join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
			left outer join promotion on (cs_promo_sk=p_promo_sk)
			left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
			where d1.d_week_seq = d2.d_week_seq
			and inv_quantity_on_hand < cs_quantity 
			and d3.d_date > d1.d_date + interval '5' day
			and hd_buy_potential = '{BP}'
			and d1.d_year = {YEAR}
			and cd_marital_status = '{MS}'
			group by i_item_desc,w_warehouse_name,d1.d_week_seq
			order by total_cnt desc, i_item_desc is not null, i_item_desc, w_warehouse_name is not null, w_warehouse_name, d_week_seq
			limit 100""",
		'parameter':
		{
			'BP': {
				'type': "list",
				'range': ["1001-5000",">10000","501-1000"]
			},
			'MS': {
				'type': "list",
				'range': ["M","S","D","W","U"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q73",
		'query': """select c_last_name
			,c_first_name
			,c_salutation
			,c_preferred_cust_flag 
			,ss_ticket_number
			,cnt from
			(select ss_ticket_number
			,ss_customer_sk
			,count(*) cnt
			from store_sales,date_dim,store,household_demographics
			where store_sales.ss_sold_date_sk = date_dim.d_date_sk
			and store_sales.ss_store_sk = store.s_store_sk  
			and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
			and date_dim.d_dom between 1 and 2 
			and (household_demographics.hd_buy_potential = '{BPONE}' or
			household_demographics.hd_buy_potential = '{BPTWO}')
			and household_demographics.hd_vehicle_count > 0
			and case when household_demographics.hd_vehicle_count > 0 then 
			household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count else null end > 1
			and date_dim.d_year in ({YEAR},{YEAR}+1,{YEAR}+2)
			and store.s_county in ('{COUNTY1}','{COUNTY2}','{COUNTY3}','{COUNTY4}')
			group by ss_ticket_number,ss_customer_sk) dj,customer
			where ss_customer_sk = c_customer_sk
			and cnt between 1 and 5
			order by cnt desc, c_last_name asc""",
		'parameter':
		{
			'BPONE': {
				'type': "list",
				'range': ["1001-5000",">10000","501-1000"]
			},
			'BPTWO': {
				'type': "list",
				'range': ["0-500","Unknown","5001-10000"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2000]
			},
			'COUNTY': {
			  'type': "list",
			  'size': 4,
			  'range': ["Ziebach County","Zavala County","Zapata County","Yuma County","Yukon-Koyukuk Census Area","Yuba County","Young County","York County","Yolo County","Yoakum County","Yellowstone County","Yellow Medicine County","Yell County","Yazoo County","Yavapai County","Yates County","Yankton County","Yancey County","Yamhill County","Yalobusha County","Yakutat Borough","Yakima County","Yadkin County","Wythe County","Wyoming County","Wyandotte County","Wyandot County","Wright County","Worth County","Worcester County","Woodward County","Woodson County","Woods County","Woodruff County","Woodford County","Woodbury County","Wood County","Wolfe County","Wise County","Wirt County","Winston County","Winona County","Winneshiek County","Winnebago County","Winn Parish","Winkler County","Windsor County","Windham County","Winchester city","Wilson County","Williamson County","Williamsburg County","Williamsburg city","Williams County","Willacy County","Will County","Wilkinson County","Wilkin County","Wilkes County","Wilcox County","Wilbarger County","Wicomico County","Wichita County","Wibaux County","Whitman County","Whitley County","Whitfield County","Whiteside County","White Pine County","White County","Wheeler County","Wheatland County","Whatcom County","Wharton County","Wexford County","Wetzel County","Weston County","Westmoreland County","Westchester County","West Feliciana Parish","West Carroll Parish","West Baton Rouge Parish","Wells County","Weld County","Webster Parish","Webster County","Weber County","Webb County","Weakley County","Waynesboro city","Wayne County","Waushara County","Waupaca County","Waukesha County","Watonwan County","Watauga County","Washtenaw County","Washoe County","Washita County","Washington Parish","Washington County","Washburn County","Washakie County","Waseca County","Wasco County","Wasatch County","Warrick County","Warren County","Ware County","Ward County","Wapello County","Walworth County","Walton County","Walthall County","Walsh County","Wallowa County","Waller County","Wallace County","Walla Walla County","Walker County","Waldo County","Wakulla County","Wake County","Wahkiakum County","Wagoner County","Wadena County","Wade Hampton Census Area","Wabaunsee County","Wabasha County","Wabash County","Volusia County","Virginia Beach city","Vinton County","Vilas County","Vigo County","Victoria County","Vernon Parish","Vernon County","Vermillion County","Vermilion Parish","Vermilion County","Ventura County","Venango County","Vanderburgh County","Vance County","Van Zandt County","Van Wert County","Van Buren County","Valley County","Valencia County","Valdez-Cordova Census Area","Val Verde County","Uvalde County","Utah County","Upton County","Upson County","Upshur County","Union Parish","Union County","Unicoi County","Umatilla County","Ulster County","Uintah County","Uinta County","Tyrrell County","Tyler County","Twin Falls County","Twiggs County","Tuscola County","Tuscarawas County","Tuscaloosa County","Turner County","Tuolumne County","Tunica County","Tulsa County","Tulare County","Tucker County","Trumbull County","Trousdale County","Troup County","Tripp County","Trinity County","Trimble County","Trigg County","Treutlen County","Trempealeau County","Trego County","Treasure County","Travis County","Traverse County","Transylvania County","Traill County","Towns County","Towner County","Torrance County","Toombs County","Toole County","Tooele County","Tompkins County","Tom Green County","Tolland County","Todd County","Titus County","Tishomingo County","Tipton County","Tippecanoe County","Tippah County","Tioga County","Tillman County","Tillamook County","Tift County","Thurston County","Throckmorton County","Thomas County","Thayer County","Texas County","Teton County","Terry County","Terrell County","Terrebonne Parish","Tensas Parish","Teller County","Telfair County","Tehama County","Tazewell County","Taylor County","Tattnall County","Tate County","Tarrant County","Taos County","Tangipahoa Parish","Taney County","Tama County","Tallapoosa County","Tallahatchie County","Talladega County","Taliaferro County","Talbot County","Switzerland County","Swisher County","Swift County","Sweetwater County","Sweet Grass County","Swain County","Suwannee County","Sutton County","Sutter County","Sussex County","Susquehanna County","Surry County","Sunflower County","Sumter County","Sumner County","Summit County","Summers County","Sully County","Sullivan County","Suffolk County","Suffolk city","Sublette County","Stutsman County","Strafford County","Story County","Storey County","Stonewall County","Stone County","Stokes County","Stoddard County","Stillwater County","Stewart County","Stevens County","Steuben County","Sterling County","Stephenson County","Stephens County","Steele County","Stearns County","Staunton city","Starr County","Starke County","Stark County","Stanton County","Stanly County","Stanley County","Stanislaus County","Stafford County","Spotsylvania County","Spokane County","Spink County","Spencer County","Spartanburg County","Spalding County","Southampton County","Sonoma County","Somervell County","Somerset County","Solano County","Socorro County","Snyder County","Snohomish County","Smyth County","Smith County","Slope County","Skamania County","Skagit County","Sitka Borough","Siskiyou County","Sioux County","Simpson County","Silver Bow County","Sierra County","Sibley County","Shoshone County","Shiawassee County","Sherman County","Sheridan County","Sherburne County","Shenandoah County","Shelby County","Sheboygan County","Shawnee County","Shawano County","Shasta County","Sharp County","Sharkey County","Shannon County","Shackelford County","Seward County","Sevier County","Sequoyah County","Sequatchie County","Seneca County","Seminole County","Sedgwick County","Sebastian County","Searcy County","Scurry County","Screven County","Scotts Bluff County","Scott County","Scotland County","Scioto County","Schuylkill County","Schuyler County","Schoolcraft County","Schoharie County","Schley County","Schleicher County","Schenectady County","Sawyer County","Saunders County","Sauk County","Sarpy County","Sargent County","Saratoga County","Sarasota County","Santa Rosa County","Santa Fe County","Santa Cruz County","Santa Clara County","Santa Barbara County","Sanpete County","Sanilac County","Sangamon County","Sandusky County","Sandoval County","Sanders County","Sanborn County","San Saba County","San Patricio County","San Miguel County","San Mateo County","San Luis Obispo County","San Juan County","San Joaquin County","San Jacinto County","San Francisco County","San Diego County","San Bernardino County","San Benito County","San Augustine County","Sampson County","Saluda County","Salt Lake County","Saline County","Salem County","Salem city","Saguache County","Saginaw County","Sagadahoc County","Sacramento County","Sac County","Sabine Parish","Sabine County","Rutland County","Rutherford County","Russell County","Rusk County","Rush County","Runnels County","Rowan County","Routt County","Ross County","Rosebud County","Roseau County","Roscommon County","Roosevelt County","Rooks County","Rolette County","Rogers County","Roger Mills County","Rockwall County","Rockland County","Rockingham County","Rockdale County","Rockcastle County","Rockbridge County","Rock Island County","Rock County","Robeson County","Robertson County","Roberts County","Roanoke County","Roanoke city","Roane County","Riverside County","Ritchie County","Ripley County","Rio Grande County","Rio Blanco County","Rio Arriba County","Ringgold County","Riley County","Richmond County","Richmond city","Richland Parish","Richland County","Richardson County","Rich County","Rice County","Rhea County","Reynolds County","Republic County","Renville County","Rensselaer County","Reno County","Refugio County","Reeves County","Redwood County","Red Willow County","Red River Parish","Red River County","Red Lake County","Real County","Reagan County","Ray County","Rawlins County","Ravalli County","Rappahannock County","Rapides Parish","Ransom County","Rankin County","Randolph County","Randall County","Ramsey County","Ralls County","Raleigh County","Rains County","Radford city","Racine County","Rabun County","Quitman County","Queens County","Queen Anne County","Quay County","Putnam County","Pushmataha County","Pulaski County","Pueblo County","Prowers County","Providence County","Prince William County","Prince George County","Prince Edward County","Price County","Preston County","Presque Isle County","Presidio County","Prentiss County","Preble County","Pratt County","Prairie County","Powhatan County","Poweshiek County","Power County","Powell County","Powder River County","Potter County","Pottawattamie County","Pottawatomie County","Posey County","Portsmouth city","Porter County","Portage County","Poquoson city","Pope County","Pontotoc County","Pondera County","Polk County","Pointe Coupee Parish","Poinsett County","Pocahontas County","Plymouth County","Plumas County","Pleasants County","Platte County","Plaquemines Parish","Placer County","Piute County","Pittsylvania County","Pittsburg County","Pitt County","Pitkin County","Piscataquis County","Pipestone County","Pinellas County","Pine County","Pinal County","Pima County","Pike County","Pierce County","Pickett County","Pickens County","Pickaway County","Piatt County","Phillips County","Philadelphia County","Phelps County","Pettis County","Petroleum County","Petersburg city","Person County","Pershing County","Perry County","Perquimans County","Perkins County","Pepin County","Peoria County","Penobscot County","Pennington County","Pendleton County","Pender County","Pend Oreille County","Pemiscot County","Pembina County","Pecos County","Pearl River County","Peach County","Payne County","Payette County","Pawnee County","Paulding County","Patrick County","Passaic County","Pasquotank County","Pasco County","Parmer County","Parker County","Parke County","Park County","Panola County","Pamlico County","Palo Pinto County","Palo Alto County","Palm Beach County","Page County","Pacific County","Ozaukee County","Ozark County","Oxford County","Owyhee County","Owsley County","Owen County","Overton County","Outagamie County","Ouray County","Ouachita Parish","Ouachita County","Otter Tail County","Ottawa County","Otsego County","Otoe County","Otero County","Oswego County","Oscoda County","Osceola County","Osborne County","Osage County","Orleans Parish","Orleans County","Oregon County","Orangeburg County","Orange County","Ontonagon County","Ontario County","Onslow County","Onondaga County","Oneida County","Olmsted County","Oliver County","Oldham County","Oktibbeha County","Okmulgee County","Oklahoma County","Okfuskee County","Okeechobee County","Okanogan County","Okaloosa County","Ohio County","Oglethorpe County","Ogle County","Ogemaw County","Oconto County","Oconee County","Ochiltree County","Oceana County","Ocean County","Obion County","Oakland County","O-Brien County","Nye County","Nueces County","Nuckolls County","Noxubee County","Nowata County","Nottoway County","Norton County","Norton city","Northwest Arctic Borough","Northumberland County","Northampton County","North Slope Borough","Norman County","Norfolk County","Norfolk city","Nome Census Area","Nolan County","Nodaway County","Nobles County","Noble County","Niobrara County","Nicollet County","Nicholas County","Niagara County","Nez Perce County","Newton County","Newport News city","Newport County","Newberry County","Newaygo County","New York County","New Madrid County","New London County","New Kent County","New Haven County","New Hanover County","New Castle County","Nevada County","Ness County","Neshoba County","Neosho County","Nemaha County","Nelson County","Navarro County","Navajo County","Natrona County","Natchitoches Parish","Nassau County","Nash County","Napa County","Nantucket County","Nance County","Nacogdoches County","Musselshell County","Muskogee County","Muskingum County","Muskegon County","Muscogee County","Muscatine County","Murray County","Multnomah County","Muhlenberg County","Mower County","Mountrail County","Moultrie County","Motley County","Morton County","Morrow County","Morrison County","Morris County","Morrill County","Morgan County","Morehouse Parish","Mora County","Moore County","Moody County","Montrose County","Montour County","Montmorency County","Montgomery County","Montezuma County","Monterey County","Montcalm County","Montague County","Monroe County","Monongalia County","Monona County","Mono County","Monmouth County","Moniteau County","Mohave County","Moffat County","Modoc County","Mobile County","Mitchell County","Missoula County","Mississippi County","Missaukee County","Minnehaha County","Minidoka County","Mingo County","Mineral County","Miner County","Milwaukee County","Mills County","Miller County","Mille Lacs County","Millard County","Milam County","Mifflin County","Midland County","Middlesex County","Miami County","Metcalfe County","Mesa County","Merrimack County","Merrick County","Meriwether County","Mercer County","Merced County","Menominee County","Menifee County","Mendocino County","Menard County","Mellette County","Meigs County","Meeker County","Medina County","Mecosta County","Mecklenburg County","Meagher County","Meade County","McPherson County","McNairy County","McMullen County","McMinn County","McLeod County","McLennan County","McLean County","McKinley County","McKenzie County","McKean County","McIntosh County","McHenry County","McDuffie County","McDowell County","McDonough County","McDonald County","McCurtain County","McCulloch County","McCreary County","McCracken County","McCormick County","McCook County","McCone County","McClain County","Mayes County","Maverick County","Maury County","Maui County","Mathews County","Matanuska-Susitna Borough","Matagorda County","Massac County","Mason County","Martinsville city","Martin County","Marshall County","Marquette County","Marlboro County","Mariposa County","Marion County","Marinette County","Marin County","Maries County","Maricopa County","Marengo County","Marathon County","Manitowoc County","Manistee County","Manatee County","Manassas Park city","Manassas city","Malheur County","Major County","Mahoning County","Mahnomen County","Mahaska County","Magoffin County","Madison Parish","Madison County","Madera County","Macoupin County","Macon County","Macomb County","Mackinac County","Lyon County","Lynn County","Lynchburg city","Lyman County","Lycoming County","Luzerne County","Lunenburg County","Luna County","Lumpkin County","Luce County","Lucas County","Lubbock County","Lowndes County","Loving County","Love County","Loup County","Louisa County","Loudoun County","Loudon County","Los Angeles County","Los Alamos County","Lorain County","Lonoke County","Long County","Logan County","Llano County","Livingston Parish","Livingston County","Live Oak County","Little River County","Litchfield County","Lipscomb County","Linn County","Lincoln Parish","Lincoln County","Limestone County","Licking County","Liberty County","Lexington County","Lexington city","Lewis County","Lewis and Clark County","Levy County","Letcher County","Leslie County","Leon County","Lenoir County","Lenawee County","Lemhi County","Lehigh County","Leflore County","Leelanau County","Lee County","Lebanon County","Leavenworth County","Leake County","Lea County","Le Sueur County","Le Flore County","Lawrence County","Lavaca County","Laurens County","Laurel County","Lauderdale County","Latimer County","Latah County","Lassen County","Las Animas County","Larue County","Larimer County","Laramie County","Lapeer County","Lanier County","Langlade County","Lane County","Lander County","Lancaster County","Lampasas County","LaMoure County","Lamoille County","Lamb County","Lamar County","Lake of the Woods County","Lake County","Lake and Peninsula Borough","Lagrange County","Lafourche Parish","Lafayette Parish","Lafayette County","Laclede County","Lackawanna County","Lac qui Parle County","Labette County","La Salle Parish","La Salle County","La Porte County","La Plata County","La Paz County","La Crosse County","Kossuth County","Kosciusko County","Kootenai County","Koochiching County","Kodiak Island Borough","Knox County","Knott County","Klickitat County","Kleberg County","Klamath County","Kittson County","Kittitas County","Kitsap County","Kit Carson County","Kiowa County","Kinney County","Kingsbury County","Kings County","Kingman County","Kingfisher County","King William County","King George County","King County","King and Queen County","Kimble County","Kimball County","Kidder County","Keya Paha County","Keweenaw County","Kewaunee County","Ketchikan Gateway Borough","Kershaw County","Kerr County","Kern County","Keokuk County","Kenton County","Kent County","Kenosha County","Kennebec County","Kenedy County","Kendall County","Kenai Peninsula Borough","Kemper County","Keith County","Kearny County","Kearney County","Kay County","Kaufman County","Kauai County","Karnes County","Kankakee County","Kane County","Kandiyohi County","Kanawha County","Kanabec County","Kalkaska County","Kalamazoo County","Juniata County","Juneau County","Juneau Borough","Judith Basin County","Juab County","Josephine County","Jones County","Johnston County","Johnson County","Jo Daviess County","Jim Wells County","Jim Hogg County","Jewell County","Jessamine County","Jersey County","Jerome County","Jerauld County","Jennings County","Jenkins County","Jefferson Parish","Jefferson Davis Parish","Jefferson Davis County","Jefferson County","Jeff Davis County","Jay County","Jasper County","James City County","Jackson Parish","Jackson County","Jack County","Izard County","Itawamba County","Itasca County","Issaquena County","Isle of Wight County","Island County","Isanti County","Isabella County","Irwin County","Iroquois County","Iron County","Irion County","Iredell County","Iowa County","Iosco County","Ionia County","Inyo County","Ingham County","Indiana County","Indian River County","Independence County","Imperial County","Idaho County","Ida County","Iberville Parish","Iberia Parish","Hyde County","Hutchinson County","Huron County","Huntington County","Huntingdon County","Hunterdon County","Hunt County","Humphreys County","Humboldt County","Hughes County","Huerfano County","Hudspeth County","Hudson County","Hubbard County","Howell County","Howard County","Houston County","Houghton County","Hot Springs County","Hot Spring County","Horry County","Hopkins County","Hopewell city","Hooker County","Hood River County","Hood County","Honolulu County","Holt County","Holmes County","Hoke County","Hodgeman County","Hockley County","Hocking County","Hitchcock County","Hinsdale County","Hinds County","Hillsdale County","Hillsborough County","Hill County","Highlands County","Highland County","Hidalgo County","Hickory County","Hickman County","Hettinger County","Hertford County","Hernando County","Herkimer County","Henry County","Henrico County","Hennepin County","Hendry County","Hendricks County","Henderson County","Hempstead County","Hemphill County","Heard County","Haywood County","Hays County","Hayes County","Hawkins County","Hawaii County","Haskell County","Harvey County","Hartley County","Hartford County","Hart County","Harrisonburg city","Harrison County","Harris County","Harper County","Harney County","Harnett County","Harmon County","Harlan County","Harford County","Hardy County","Harding County","Hardin County","Hardeman County","Hardee County","Haralson County","Hanson County","Hansford County","Hanover County","Hand County","Hancock County","Hampton County","Hampton city","Hampshire County","Hampden County","Hamlin County","Hamilton County","Hamblen County","Hall County","Halifax County","Hale County","Haines Borough","Habersham County","Haakon County","Gwinnett County","Guthrie County","Gunnison County","Gulf County","Guilford County","Guernsey County","Guadalupe County","Grundy County","Grimes County","Griggs County","Grenada County","Gregory County","Gregg County","Greer County","Greenwood County","Greenville County","Greenup County","Greensville County","Greenlee County","Greene County","Greenbrier County","Green Lake County","Green County","Greeley County","Grayson County","Grays Harbor County","Gray County","Graves County","Gratiot County","Granville County","Grant Parish","Grant County","Granite County","Grand Traverse County","Grand Isle County","Grand Forks County","Grand County","Grainger County","Graham County","Grafton County","Grady County","Gove County","Gosper County","Goshen County","Gordon County","Gooding County","Goodhue County","Goochland County","Gonzales County","Goliad County","Golden Valley County","Gogebic County","Glynn County","Gloucester County","Glenn County","Glasscock County","Glascock County","Gladwin County","Glades County","Glacier County","Gilpin County","Gilmer County","Gilliam County","Gillespie County","Giles County","Gilchrist County","Gila County","Gibson County","Georgetown County","George County","Gentry County","Geneva County","Genesee County","Gem County","Geauga County","Geary County","Gates County","Gaston County","Gasconade County","Garza County","Garvin County","Garrett County","Garrard County","Garland County","Garfield County","Garden County","Galveston County","Gallia County","Gallatin County","Galax city","Gaines County","Gage County","Gadsden County","Furnas County","Fulton County","Frontier County","Frio County","Fresno County","Fremont County","Freestone County","Freeborn County","Fredericksburg city","Frederick County","Franklin Parish","Franklin County","Franklin city","Fountain County","Foster County","Fort Bend County","Forsyth County","Forrest County","Forest County","Ford County","Fond du Lac County","Foard County","Fluvanna County","Floyd County","Florence County","Fleming County","Flathead County","Flagler County","Fisher County","Finney County","Fillmore County","Ferry County","Fergus County","Fentress County","Fayette County","Fauquier County","Faulkner County","Faulk County","Faribault County","Fannin County","Falls County","Falls Church city","Fallon County","Fall River County","Fairfield County","Fairfax County","Fairfax city","Fairbanks North Star Borough","Evans County","Evangeline Parish","Eureka County","Etowah County","Estill County","Essex County","Esmeralda County","Escambia County","Erie County","Erath County","Emporia city","Emmons County","Emmet County","Emery County","Emanuel County","Elmore County","Ellsworth County","Ellis County","Elliott County","Elko County","Elkhart County","Elk County","Elbert County","El Paso County","El Dorado County","Effingham County","Edwards County","Edmunds County","Edmonson County","Edgefield County","Edgecombe County","Edgar County","Eddy County","Ector County","Echols County","Eau Claire County","Eaton County","Eastland County","East Feliciana Parish","East Carroll Parish","East Baton Rouge Parish","Early County","Eagle County","Dyer County","Duval County","Dutchess County","Durham County","Duplin County","DuPage County","Dunn County","Dunklin County","Dundy County","Dukes County","Duchesne County","Dubuque County","Dubois County","Drew County","Douglas County","Dougherty County","Dorchester County","Door County","Dooly County","Donley County","Doniphan County","Dona Ana County","Dolores County","Dodge County","Doddridge County","Dixon County","Dixie County","Divide County","District of Columbia","Dinwiddie County","Dimmit County","Dillon County","Dillingham Census Area","Dickson County","Dickinson County","Dickey County","Dickenson County","Dickens County","DeWitt County","Dewey County","Deuel County","DeSoto County","Desha County","Deschutes County","Des Moines County","Denver County","Denton County","Dent County","Denali Borough","Delta County","Delaware County","Del Norte County","DeKalb County","Defiance County","Deer Lodge County","Decatur County","DeBaca County","Dearborn County","Deaf Smith County","De Witt County","De Soto Parish","De Kalb County","Day County","Dawson County","Dawes County","Davison County","Davis County","Daviess County","Davie County","Davidson County","Dauphin County","Darlington County","Darke County","Dare County","Danville city","Daniels County","Dane County","Dallas County","Dallam County","Dale County","Dakota County","Daggett County","Dade County","Cuyahoga County","Custer County","Curry County","Currituck County","Cuming County","Cumberland County","Culpeper County","Cullman County","Culberson County","Crowley County","Crow Wing County","Cross County","Crosby County","Crook County","Crockett County","Crittenden County","Crisp County","Crenshaw County","Creek County","Crawford County","Craven County","Crane County","Craighead County","Craig County","Cowlitz County","Cowley County","Coweta County","Covington County","Covington city","Cottonwood County","Cotton County","Cottle County","Costilla County","Coshocton County","Coryell County","Cortland County","Corson County","Copiah County","Coosa County","Coos County","Cooper County","Cooke County","Cook County","Conway County","Converse County","Contra Costa County","Conejos County","Conecuh County","Concordia Parish","Concho County","Comanche County","Comal County","Colusa County","Columbus County","Columbiana County","Columbia County","Colquitt County","Colorado County","Colonial Heights city","Collingsworth County","Collin County","Collier County","Colleton County","Colfax County","Coles County","Coleman County","Cole County","Colbert County","Coke County","Coffey County","Coffee County","Codington County","Coconino County","Cocke County","Cochran County","Cochise County","Cobb County","Coal County","Coahoma County","Cloud County","Clinton County","Clinch County","Clifton Forge city","Cleveland County","Clermont County","Cleburne County","Clearwater County","Clearfield County","Clear Creek County","Clayton County","Clay County","Clatsop County","Clarke County","Clark County","Clarion County","Clarendon County","Clare County","Clallam County","Claiborne Parish","Claiborne County","Clackamas County","Citrus County","Cimarron County","Cibola County","Churchill County","Christian County","Chowan County","Chouteau County","Choctaw County","Chittenden County","Chisago County","Chippewa County","Chilton County","Childress County","Chicot County","Chickasaw County","Cheyenne County","Chesterfield County","Chester County","Cheshire County","Chesapeake city","Cherry County","Cherokee County","Chenango County","Chemung County","Chelan County","Cheboygan County","Cheatham County","Chaves County","Chautauqua County","Chattooga County","Chattahoochee County","Chatham County","Chase County","Charlton County","Charlottesville city","Charlotte County","Charlevoix County","Charleston County","Charles Mix County","Charles County","Charles City County","Chariton County","Champaign County","Chambers County","Chaffee County","Cerro Gordo County","Centre County","Cedar County","Cecil County","Cayuga County","Cavalier County","Cattaraugus County","Catron County","Catoosa County","Catawba County","Catahoula Parish","Caswell County","Castro County","Cassia County","Cass County","Casey County","Cascade County","Carver County","Carteret County","Carter County","Carson County","Carson City","Carroll County","Caroline County","Carlton County","Carlisle County","Caribou County","Carbon County","Cape May County","Cape Girardeau County","Canyon County","Cannon County","Candler County","Canadian County","Campbell County","Camp County","Cameron Parish","Cameron County","Camden County","Cambria County","Camas County","Calvert County","Calumet County","Calloway County","Callaway County","Callahan County","Calhoun County","Caledonia County","Caldwell Parish","Caldwell County","Calcasieu Parish","Calaveras County","Caddo Parish","Caddo County","Cache County","Cabell County","Cabarrus County","Butts County","Butte County","Butler County","Burt County","Burnett County","Burnet County","Burlington County","Burleson County","Burleigh County","Burke County","Bureau County","Buncombe County","Bullock County","Bulloch County","Bullitt County","Buffalo County","Buena Vista County","Buena Vista city","Bucks County","Buckingham County","Buchanan County","Bryan County","Brunswick County","Brule County","Brown County","Broward County","Broome County","Brooks County","Brookings County","Brooke County","Bronx County","Broadwater County","Bristol County","Bristol city","Bristol Bay Borough","Briscoe County","Brewster County","Brevard County","Bremer County","Breckinridge County","Breathitt County","Brazos County","Brazoria County","Braxton County","Brantley County","Branch County","Bradley County","Bradford County","Bracken County","Boyle County","Boyd County","Box Elder County","Box Butte County","Bowman County","Bowie County","Bourbon County","Boundary County","Boulder County","Bottineau County","Botetourt County","Bossier Parish","Bosque County","Borden County","Boone County","Bonneville County","Bonner County","Bond County","Bon Homme County","Bollinger County","Bolivar County","Boise County","Blue Earth County","Blount County","Bledsoe County","Bleckley County","Bland County","Blanco County","Blair County","Blaine County","Bladen County","Blackford County","Black Hawk County","Bingham County","Billings County","Big Stone County","Big Horn County","Bienville Parish","Bibb County","Bexar County","Bethel Census Area","Bertie County","Berrien County","Bernalillo County","Berkshire County","Berks County","Berkeley County","Bergen County","Benzie County","Benton County","Bent County","Benson County","Bennington County","Bennett County","Benewah County","Ben Hill County","Beltrami County","Belmont County","Bell County","Belknap County","Bee County","Bedford County","Bedford city","Beckham County","Becker County","Beaverhead County","Beaver County","Beauregard Parish","Beaufort County","Bear Lake County","Beadle County","Baylor County","Bayfield County","Bay County","Baxter County","Bath County","Bates County","Bastrop County","Bartow County","Barton County","Bartholomew County","Barry County","Barrow County","Barron County","Barren County","Barnwell County","Barnstable County","Barnes County","Barbour County","Barber County","Baraga County","Bannock County","Banner County","Banks County","Bandera County","Bamberg County","Baltimore County","Baltimore city","Ballard County","Baldwin County","Baker County","Bailey County","Bacon County","Baca County","Avoyelles Parish","Avery County","Autauga County","Austin County","Aurora County","Augusta County","Auglaize County","Audubon County","Audrain County","Attala County","Atoka County","Atlantic County","Atkinson County","Athens County","Atchison County","Atascosa County","Assumption Parish","Asotin County","Ashtabula County","Ashley County","Ashland County","Ashe County","Ascension Parish","Arthur County","Aroostook County","Armstrong County","Arlington County","Arkansas County","Arenac County","Archuleta County","Archer County","Arapahoe County","Aransas County","Appomattox County","Appling County","Appanoose County","Apache County","Antrim County","Antelope County","Anson County","Anoka County","Anne Arundel County","Angelina County","Androscoggin County","Andrews County","Andrew County","Anderson County","Anchorage Borough","Amite County","Amherst County","Amelia County","Amador County","Alpine County","Alpena County","Allendale County","Allen Parish","Allen County","Allegheny County","Alleghany County","Allegany County","Allegan County","Allamakee County","Alger County","Alfalfa County","Alexandria city","Alexander County","Aleutians West Census Area","Aleutians East Borough","Alcorn County","Alcona County","Albemarle County","Albany County","Alamosa County","Alameda County","Alamance County","Alachua County","Aitkin County","Aiken County","Addison County","Adams County","Adair County","Ada County","Accomack County","Acadia Parish","Abbeville County"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q74",
		'query': """with year_total as (
		select c_customer_id customer_id
		,c_first_name customer_first_name
		,c_last_name customer_last_name
		,d_year as years
		,{AGGONE}(ss_net_paid) year_total
		,'s' sale_type
		from customer
		,store_sales
		,date_dim
		where c_customer_sk = ss_customer_sk
		and ss_sold_date_sk = d_date_sk
		and d_year in ({YEAR},{YEAR}+1)
		group by c_customer_id
		,c_first_name
		,c_last_name
		,d_year
		union all
		select c_customer_id customer_id
		,c_first_name customer_first_name
		,c_last_name customer_last_name
		,d_year as years
		,{AGGONE}(ws_net_paid) year_total
		,'w' sale_type
		from customer
		,web_sales
		,date_dim
		where c_customer_sk = ws_bill_customer_sk
		and ws_sold_date_sk = d_date_sk
		and d_year in ({YEAR},{YEAR}+1)
		group by c_customer_id
		,c_first_name
		,c_last_name
		,d_year
		)
		select 
		t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
		from year_total t_s_firstyear
		,year_total t_s_secyear
		,year_total t_w_firstyear
		,year_total t_w_secyear
		where t_s_secyear.customer_id = t_s_firstyear.customer_id
		and t_s_firstyear.customer_id = t_w_secyear.customer_id
		and t_s_firstyear.customer_id = t_w_firstyear.customer_id
		and t_s_firstyear.sale_type = 's'
		and t_w_firstyear.sale_type = 'w'
		and t_s_secyear.sale_type = 's'
		and t_w_secyear.sale_type = 'w'
		and t_s_firstyear.years = {YEAR}
		and t_s_secyear.years = {YEAR}+1
		and t_w_firstyear.years = {YEAR}
		and t_w_secyear.years = {YEAR}+1
		and t_s_firstyear.year_total > 0
		and t_w_firstyear.year_total > 0
		and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
		> case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
		order by {ORDERC1},{ORDERC2},{ORDERC3}
		limit 100""",
		'parameter':
		{
			'AGGONE': {
				'type': "list",
				'range': ["sum","min","max","avg","stddev_samp"]
			},
			'ORDERC': {
				'type': "integer",
				'size': 3,
				'range': [1,3]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2001]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q75",
		'query': """WITH all_sales AS (
		SELECT d_year
		,i_brand_id
		,i_class_id
		,i_category_id
		,i_manufact_id
		,SUM(sales_cnt) AS sales_cnt
		,SUM(sales_amt) AS sales_amt
		FROM (SELECT d_year
		,i_brand_id
		,i_class_id
		,i_category_id
		,i_manufact_id
		,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
		,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
		FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
			JOIN date_dim ON d_date_sk=cs_sold_date_sk
			LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
					AND cs_item_sk=cr_item_sk)
		WHERE i_category='{CATEGORY}'
		UNION
		SELECT d_year
		,i_brand_id
		,i_class_id
		,i_category_id
		,i_manufact_id
		,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
		,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
		FROM store_sales JOIN item ON i_item_sk=ss_item_sk
			JOIN date_dim ON d_date_sk=ss_sold_date_sk
			LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
					AND ss_item_sk=sr_item_sk)
		WHERE i_category='{CATEGORY}'
		UNION
		SELECT d_year
		,i_brand_id
		,i_class_id
		,i_category_id
		,i_manufact_id
		,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
		,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
		FROM web_sales JOIN item ON i_item_sk=ws_item_sk
			JOIN date_dim ON d_date_sk=ws_sold_date_sk
			LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
				AND ws_item_sk=wr_item_sk)
		WHERE i_category='{CATEGORY}') sales_detail
		GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
		SELECT  prev_yr.d_year AS prev_year
			,curr_yr.d_year AS years
			,curr_yr.i_brand_id
			,curr_yr.i_class_id
			,curr_yr.i_category_id
			,curr_yr.i_manufact_id
			,prev_yr.sales_cnt AS prev_yr_cnt
			,curr_yr.sales_cnt AS curr_yr_cnt
			,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
			,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
		FROM all_sales curr_yr, all_sales prev_yr
		WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
		AND curr_yr.i_class_id=prev_yr.i_class_id
		AND curr_yr.i_category_id=prev_yr.i_category_id
		AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
		AND curr_yr.d_year={YEAR}
		AND prev_yr.d_year={YEAR}-1
		AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
		ORDER BY sales_cnt_diff,sales_amt_diff
		limit 100""",
		'parameter':
		{
			'CATEGORY': {
				'type': "list",
				'range': ["Books","Children","Electronics","Home","Jewelry","Men","Music","Shoes","Sports","Women"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1999,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q76",
		'query': """ select  channel, col_name, d_year, d_qoy, i_category, COUNT(*) sales_cnt, SUM(ext_sales_price) sales_amt FROM (
		SELECT 'store' as channel, '{NULLCOLSS}' col_name, d_year, d_qoy, i_category, ss_ext_sales_price ext_sales_price
		FROM store_sales, item, date_dim
		WHERE {NULLCOLSS} IS NULL
		AND ss_sold_date_sk=d_date_sk
		AND ss_item_sk=i_item_sk
		UNION ALL
		SELECT 'web' as channel, '{NULLCOLWS}' col_name, d_year, d_qoy, i_category, ws_ext_sales_price ext_sales_price
		FROM web_sales, item, date_dim
		WHERE {NULLCOLWS} IS NULL
		AND ws_sold_date_sk=d_date_sk
		AND ws_item_sk=i_item_sk
		UNION ALL
		SELECT 'catalog' as channel, '{NULLCOLCS}' col_name, d_year, d_qoy, i_category, cs_ext_sales_price ext_sales_price
		FROM catalog_sales, item, date_dim
		WHERE {NULLCOLCS} IS NULL
		AND cs_sold_date_sk=d_date_sk
		AND cs_item_sk=i_item_sk) foo
		GROUP BY channel, col_name, d_year, d_qoy, i_category
		ORDER BY channel, col_name, d_year, d_qoy, i_category
		limit 100""",
		'parameter':
		{
			'NULLCOLCS': {
				'type': "list",
				'range': ["cs_bill_customer_sk","cs_bill_hdemo_sk","cs_bill_addr_sk","cs_ship_customer_sk","cs_ship_cdemo_sk","cs_ship_hdemo_sk","cs_ship_addr_sk","cs_ship_mode_sk","cs_warehouse_sk","cs_promo_sk"]
			},
			'NULLCOLSS': {
				'type': "list",
				'range': ["ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk"]
			},
			'NULLCOLWS': {
				'type': "list",
				'range': ["ws_bill_customer_sk","ws_bill_hdemo_sk","ws_bill_addr_sk","ws_ship_customer_sk","ws_ship_cdemo_sk","ws_ship_hdemo_sk","ws_ship_addr_sk","ws_web_page_sk","ws_web_site_sk","ws_ship_mode_sk","ws_warehouse_sk","ws_promo_sk"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q77",
		'query': """with ss as
		(select s_store_sk,
		sum(ss_ext_sales_price) as sales,
		sum(ss_net_profit) as profit
		from store_sales,
		date_dim,
		store
		where ss_sold_date_sk = d_date_sk
		and d_date between cast('{YEAR}-08-{DAY}' as date)
			and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
		and ss_store_sk = s_store_sk
		group by s_store_sk)
		,
		sr as
		(select s_store_sk,
		sum(sr_return_amt) as returns_angepasst,
		sum(sr_net_loss) as profit_loss
		from store_returns,
		date_dim,
		store
		where sr_returned_date_sk = d_date_sk
		and d_date between cast('{YEAR}-08-{DAY}' as date)
			and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
		and sr_store_sk = s_store_sk
		group by s_store_sk),
		cs as
		(select cs_call_center_sk,
		sum(cs_ext_sales_price) as sales,
		sum(cs_net_profit) as profit
		from catalog_sales,
		date_dim
		where cs_sold_date_sk = d_date_sk
		and d_date between cast('{YEAR}-08-{DAY}' as date)
			and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
		group by cs_call_center_sk
		),
		cr as
		(select cr_call_center_sk,
		sum(cr_return_amount) as returns_angepasst,
		sum(cr_net_loss) as profit_loss
		from catalog_returns,
		date_dim
		where cr_returned_date_sk = d_date_sk
		and d_date between cast('{YEAR}-08-{DAY}' as date)
			and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
		group by cr_call_center_sk
		),
		ws as
		( select wp_web_page_sk,
		sum(ws_ext_sales_price) as sales,
		sum(ws_net_profit) as profit
		from web_sales,
		date_dim,
		web_page
		where ws_sold_date_sk = d_date_sk
		and d_date between cast('{YEAR}-08-{DAY}' as date)
			and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
		and ws_web_page_sk = wp_web_page_sk
		group by wp_web_page_sk),
		wr as
		(select wp_web_page_sk,
		sum(wr_return_amt) as returns_angepasst,
		sum(wr_net_loss) as profit_loss
		from web_returns,
		date_dim,
		web_page
		where wr_returned_date_sk = d_date_sk
		and d_date between cast('{YEAR}-08-{DAY}' as date)
			and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
		and wr_web_page_sk = wp_web_page_sk
		group by wp_web_page_sk)
		select  channel
		, id
		, sum(sales) as sales
		, sum(returns_angepasst) as returns_angepasst
		, sum(profit) as profit
		from
		(select 'store channel' as channel
		, ss.s_store_sk as id
		, sales
		, coalesce(returns_angepasst, 0) as returns_angepasst
		, (profit - coalesce(profit_loss,0)) as profit
		from   ss left join sr
		on  ss.s_store_sk = sr.s_store_sk
		union all
		select 'catalog channel' as channel
		, cs_call_center_sk as id
		, sales
		, returns_angepasst
		, (profit - profit_loss) as profit
		from  cs
		, cr
		union all
		select 'web channel' as channel
		, ws.wp_web_page_sk as id
		, sales
		, coalesce(returns_angepasst, 0) returns_angepasst
		, (profit - coalesce(profit_loss,0)) as profit
		from   ws left join wr
		on  ws.wp_web_page_sk = wr.wp_web_page_sk
		) x
		group by channel, id with rollup
		order by channel
		,id
		limit 100""",
		'DBMS': {
			'MariaDB': """with ss as
				(select s_store_sk,
				sum(ss_ext_sales_price) as sales,
				sum(ss_net_profit) as profit
				from store_sales,
				date_dim,
				store
				where ss_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ss_store_sk = s_store_sk
				group by s_store_sk)
				,
				sr as
				(select s_store_sk,
				sum(sr_return_amt) as returns_angepasst,
				sum(sr_net_loss) as profit_loss
				from store_returns,
				date_dim,
				store
				where sr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and sr_store_sk = s_store_sk
				group by s_store_sk),
				cs as
				(select cs_call_center_sk,
				sum(cs_ext_sales_price) as sales,
				sum(cs_net_profit) as profit
				from catalog_sales,
				date_dim
				where cs_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				group by cs_call_center_sk
				),
				cr as
				(select cr_call_center_sk,
				sum(cr_return_amount) as returns_angepasst,
				sum(cr_net_loss) as profit_loss
				from catalog_returns,
				date_dim
				where cr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				group by cr_call_center_sk
				),
				ws as
				( select wp_web_page_sk,
				sum(ws_ext_sales_price) as sales,
				sum(ws_net_profit) as profit
				from web_sales,
				date_dim,
				web_page
				where ws_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ws_web_page_sk = wp_web_page_sk
				group by wp_web_page_sk),
				wr as
				(select wp_web_page_sk,
				sum(wr_return_amt) as returns_angepasst,
				sum(wr_net_loss) as profit_loss
				from web_returns,
				date_dim,
				web_page
				where wr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and wr_web_page_sk = wp_web_page_sk
				group by wp_web_page_sk)
				select  channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
				from
				(select 'store channel' as channel
				, ss.s_store_sk as id
				, sales
				, coalesce(returns_angepasst, 0) as returns_angepasst
				, (profit - coalesce(profit_loss,0)) as profit
				from   ss left join sr
				on  ss.s_store_sk = sr.s_store_sk
				union all
				select 'catalog channel' as channel
				, cs_call_center_sk as id
				, sales
				, returns_angepasst
				, (profit - profit_loss) as profit
				from  cs
				, cr
				union all
				select 'web channel' as channel
				, ws.wp_web_page_sk as id
				, sales
				, coalesce(returns_angepasst, 0) returns_angepasst
				, (profit - coalesce(profit_loss,0)) as profit
				from   ws left join wr
				on  ws.wp_web_page_sk = wr.wp_web_page_sk
				) x
				group by channel, id with rollup
				limit 100""",
			'MonetDB': """with ss as
				(select s_store_sk,
				sum(ss_ext_sales_price) as sales,
				sum(ss_net_profit) as profit
				from store_sales,
				date_dim,
				store
				where ss_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ss_store_sk = s_store_sk
				group by s_store_sk)
				,
				sr as
				(select s_store_sk,
				sum(sr_return_amt) as returns_angepasst,
				sum(sr_net_loss) as profit_loss
				from store_returns,
				date_dim,
				store
				where sr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and sr_store_sk = s_store_sk
				group by s_store_sk),
				cs as
				(select cs_call_center_sk,
				sum(cs_ext_sales_price) as sales,
				sum(cs_net_profit) as profit
				from catalog_sales,
				date_dim
				where cs_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				group by cs_call_center_sk
				),
				cr as
				(select cr_call_center_sk,
				sum(cr_return_amount) as returns_angepasst,
				sum(cr_net_loss) as profit_loss
				from catalog_returns,
				date_dim
				where cr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				group by cr_call_center_sk
				),
				ws as
				( select wp_web_page_sk,
				sum(ws_ext_sales_price) as sales,
				sum(ws_net_profit) as profit
				from web_sales,
				date_dim,
				web_page
				where ws_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ws_web_page_sk = wp_web_page_sk
				group by wp_web_page_sk),
				wr as
				(select wp_web_page_sk,
				sum(wr_return_amt) as returns_angepasst,
				sum(wr_net_loss) as profit_loss
				from web_returns,
				date_dim,
				web_page
				where wr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and wr_web_page_sk = wp_web_page_sk
				group by wp_web_page_sk)
				select  channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
				from
				(select 'store channel' as channel
				, ss.s_store_sk as id
				, sales
				, coalesce(returns_angepasst, 0) as returns_angepasst
				, (profit - coalesce(profit_loss,0)) as profit
				from   ss left join sr
				on  ss.s_store_sk = sr.s_store_sk
				union all
				select 'catalog channel' as channel
				, cs_call_center_sk as id
				, sales
				, returns_angepasst
				, (profit - profit_loss) as profit
				from  cs
				, cr
				union all
				select 'web channel' as channel
				, ws.wp_web_page_sk as id
				, sales
				, coalesce(returns_angepasst, 0) returns_angepasst
				, (profit - coalesce(profit_loss,0)) as profit
				from   ws left join wr
				on  ws.wp_web_page_sk = wr.wp_web_page_sk
				) x
				group by rollup(channel, id)
				order by channel
				,id
				limit 100""",
			'PostgreSQL': """with ss as
				(select s_store_sk,
				sum(ss_ext_sales_price) as sales,
				sum(ss_net_profit) as profit
				from store_sales,
				date_dim,
				store
				where ss_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ss_store_sk = s_store_sk
				group by s_store_sk)
				,
				sr as
				(select s_store_sk,
				sum(sr_return_amt) as returns_angepasst,
				sum(sr_net_loss) as profit_loss
				from store_returns,
				date_dim,
				store
				where sr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and sr_store_sk = s_store_sk
				group by s_store_sk),
				cs as
				(select cs_call_center_sk,
				sum(cs_ext_sales_price) as sales,
				sum(cs_net_profit) as profit
				from catalog_sales,
				date_dim
				where cs_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				group by cs_call_center_sk
				),
				cr as
				(select cr_call_center_sk,
				sum(cr_return_amount) as returns_angepasst,
				sum(cr_net_loss) as profit_loss
				from catalog_returns,
				date_dim
				where cr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				group by cr_call_center_sk
				),
				ws as
				( select wp_web_page_sk,
				sum(ws_ext_sales_price) as sales,
				sum(ws_net_profit) as profit
				from web_sales,
				date_dim,
				web_page
				where ws_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ws_web_page_sk = wp_web_page_sk
				group by wp_web_page_sk),
				wr as
				(select wp_web_page_sk,
				sum(wr_return_amt) as returns_angepasst,
				sum(wr_net_loss) as profit_loss
				from web_returns,
				date_dim,
				web_page
				where wr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and wr_web_page_sk = wp_web_page_sk
				group by wp_web_page_sk)
				select  channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
				from
				(select 'store channel' as channel
				, ss.s_store_sk as id
				, sales
				, coalesce(returns_angepasst, 0) as returns_angepasst
				, (profit - coalesce(profit_loss,0)) as profit
				from   ss left join sr
				on  ss.s_store_sk = sr.s_store_sk
				union all
				select 'catalog channel' as channel
				, cs_call_center_sk as id
				, sales
				, returns_angepasst
				, (profit - profit_loss) as profit
				from  cs
				, cr
				union all
				select 'web channel' as channel
				, ws.wp_web_page_sk as id
				, sales
				, coalesce(returns_angepasst, 0) returns_angepasst
				, (profit - coalesce(profit_loss,0)) as profit
				from   ws left join wr
				on  ws.wp_web_page_sk = wr.wp_web_page_sk
				) x
				group by rollup(channel, id)
				order by channel
				,id
				limit 100""",
			'Exasol': """with ss as
				(select s_store_sk,
				sum(ss_ext_sales_price) as sales,
				sum(ss_net_profit) as profit
				from store_sales,
				date_dim,
				store
				where ss_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ss_store_sk = s_store_sk
				group by s_store_sk)
				,
				sr as
				(select s_store_sk,
				sum(sr_return_amt) as returns_angepasst,
				sum(sr_net_loss) as profit_loss
				from store_returns,
				date_dim,
				store
				where sr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and sr_store_sk = s_store_sk
				group by s_store_sk),
				cs as
				(select cs_call_center_sk,
				sum(cs_ext_sales_price) as sales,
				sum(cs_net_profit) as profit
				from catalog_sales,
				date_dim
				where cs_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				group by cs_call_center_sk
				),
				cr as
				(select cr_call_center_sk,
				sum(cr_return_amount) as returns_angepasst,
				sum(cr_net_loss) as profit_loss
				from catalog_returns,
				date_dim
				where cr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				group by cr_call_center_sk
				),
				ws as
				( select wp_web_page_sk,
				sum(ws_ext_sales_price) as sales,
				sum(ws_net_profit) as profit
				from web_sales,
				date_dim,
				web_page
				where ws_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ws_web_page_sk = wp_web_page_sk
				group by wp_web_page_sk),
				wr as
				(select wp_web_page_sk,
				sum(wr_return_amt) as returns_angepasst,
				sum(wr_net_loss) as profit_loss
				from web_returns,
				date_dim,
				web_page
				where wr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and wr_web_page_sk = wp_web_page_sk
				group by wp_web_page_sk)
				select  channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
				from
				(select 'store channel' as channel
				, ss.s_store_sk as id
				, sales
				, coalesce(returns_angepasst, 0) as returns_angepasst
				, (profit - coalesce(profit_loss,0)) as profit
				from   ss left join sr
				on  ss.s_store_sk = sr.s_store_sk
				union all
				select 'catalog channel' as channel
				, cs_call_center_sk as id
				, sales
				, returns_angepasst
				, (profit - profit_loss) as profit
				from  cs
				, cr
				union all
				select 'web channel' as channel
				, ws.wp_web_page_sk as id
				, sales
				, coalesce(returns_angepasst, 0) returns_angepasst
				, (profit - coalesce(profit_loss,0)) as profit
				from   ws left join wr
				on  ws.wp_web_page_sk = wr.wp_web_page_sk
				) x
				group by rollup(channel, id)
				order by channel
				,id
				limit 100""",
			'MemSQL': """with ss as
				(select s_store_sk,
				sum(ss_ext_sales_price) as sales,
				sum(ss_net_profit) as profit
				from store_sales,
				date_dim,
				store
				where ss_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ss_store_sk = s_store_sk
				group by s_store_sk)
				,
				sr as
				(select s_store_sk,
				sum(sr_return_amt) as returns_angepasst,
				sum(sr_net_loss) as profit_loss
				from store_returns,
				date_dim,
				store
				where sr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and sr_store_sk = s_store_sk
				group by s_store_sk),
				cs as
				(select cs_call_center_sk,
				sum(cs_ext_sales_price) as sales,
				sum(cs_net_profit) as profit
				from catalog_sales,
				date_dim
				where cs_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				group by cs_call_center_sk
				),
				cr as
				(select cr_call_center_sk,
				sum(cr_return_amount) as returns_angepasst,
				sum(cr_net_loss) as profit_loss
				from catalog_returns,
				date_dim
				where cr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				group by cr_call_center_sk
				),
				ws as
				( select wp_web_page_sk,
				sum(ws_ext_sales_price) as sales,
				sum(ws_net_profit) as profit
				from web_sales,
				date_dim,
				web_page
				where ws_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ws_web_page_sk = wp_web_page_sk
				group by wp_web_page_sk),
				wr as
				(select wp_web_page_sk,
				sum(wr_return_amt) as returns_angepasst,
				sum(wr_net_loss) as profit_loss
				from web_returns,
				date_dim,
				web_page
				where wr_returned_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and wr_web_page_sk = wp_web_page_sk
				group by wp_web_page_sk)
				select  channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
				from
				(select 'store channel' as channel
				, ss.s_store_sk as id
				, sales
				, coalesce(returns_angepasst, 0) as returns_angepasst
				, (profit - coalesce(profit_loss,0)) as profit
				from   ss left join sr
				on  ss.s_store_sk = sr.s_store_sk
				union all
				select 'catalog channel' as channel
				, cs_call_center_sk as id
				, sales
				, returns_angepasst
				, (profit - profit_loss) as profit
				from  cs
				, cr
				union all
				select 'web channel' as channel
				, ws.wp_web_page_sk as id
				, sales
				, coalesce(returns_angepasst, 0) returns_angepasst
				, (profit - coalesce(profit_loss,0)) as profit
				from   ws left join wr
				on  ws.wp_web_page_sk = wr.wp_web_page_sk
				) x
				group by rollup(channel, id)
				order by channel
				,id
				limit 100""",
		},
		'parameter':
		{
			'DAY': {
				'type': "integer",
				'range': [1,30]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q78",
		'query': """with ws as
		(select d_year AS ws_sold_year, ws_item_sk,
		ws_bill_customer_sk ws_customer_sk,
		sum(ws_quantity) ws_qty,
		sum(ws_wholesale_cost) ws_wc,
		sum(ws_sales_price) ws_sp
		from web_sales
		left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
		join date_dim on ws_sold_date_sk = d_date_sk
		where wr_order_number is null
		group by d_year, ws_item_sk, ws_bill_customer_sk
		),
		cs as
		(select d_year AS cs_sold_year, cs_item_sk,
		cs_bill_customer_sk cs_customer_sk,
		sum(cs_quantity) cs_qty,
		sum(cs_wholesale_cost) cs_wc,
		sum(cs_sales_price) cs_sp
		from catalog_sales
		left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
		join date_dim on cs_sold_date_sk = d_date_sk
		where cr_order_number is null
		group by d_year, cs_item_sk, cs_bill_customer_sk
		),
		ss as
		(select d_year AS ss_sold_year, ss_item_sk,
		ss_customer_sk,
		sum(ss_quantity) ss_qty,
		sum(ss_wholesale_cost) ss_wc,
		sum(ss_sales_price) ss_sp
		from store_sales
		left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
		join date_dim on ss_sold_date_sk = d_date_sk
		where sr_ticket_number is null
		group by d_year, ss_item_sk, ss_customer_sk
		)
		select 
		{SELECTONE},
		round(ss_qty/(coalesce(ws_qty,0)+coalesce(cs_qty,0)),2) ratio,
		ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
		coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
		coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
		coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
		from ss
		left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
		left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=ss_item_sk and cs_customer_sk=ss_customer_sk)
		where (coalesce(ws_qty,0)>0 or coalesce(cs_qty, 0)>0) and ss_sold_year={YEAR}
		order by 
		{SELECTONE},
		ss_qty desc, ss_wc desc, ss_sp desc,
		other_chan_qty,
		other_chan_wholesale_cost,
		other_chan_sales_price,
		ratio
		limit 100""",
		'parameter':
		{
			'SELECTONE': {
				'type': "list",
				'range': ["ss_sold_year","ss_item_sk","ss_customer_sk","ss_sold_year, ss_item_sk, ss_customer_sk"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q79",
		'query': """ select 
		c_last_name,c_first_name,substr(s_city,1,30) city,ss_ticket_number,amt,profit
		from
		(select ss_ticket_number
		,ss_customer_sk
		,store.s_city
		,sum(ss_coupon_amt) amt
		,sum(ss_net_profit) profit
		from store_sales,date_dim,store,household_demographics
		where store_sales.ss_sold_date_sk = date_dim.d_date_sk
		and store_sales.ss_store_sk = store.s_store_sk  
		and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
		and (household_demographics.hd_dep_count = {DEPCNT} or household_demographics.hd_vehicle_count > {VEHCNT})
		and date_dim.d_dow = 1
		and date_dim.d_year in ({YEAR},{YEAR}+1,{YEAR}+2) 
		and store.s_number_employees between 200 and 295
		group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms,customer
		where ss_customer_sk = c_customer_sk
		order by c_last_name is not null, c_last_name, c_first_name is not null, c_first_name, substr(s_city,1,30) is not null, substr(s_city,1,30), profit is not null, profit
		limit 100""",
		'parameter':
		{
			'DEPCNT': {
				'type': "integer",
				'range': [0,9]
			},
			'VEHCNT': {
				'type': "integer",
				'range': [-1,4]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2000]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q80",
		'query': """with ssr as
		(select  s_store_id as store_id,
		sum(ss_ext_sales_price) as sales,
		sum(coalesce(sr_return_amt, 0)) as returns,
		sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
		from store_sales left outer join store_returns on
		(ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
		date_dim,
		store,
		item,
		promotion
		where ss_sold_date_sk = d_date_sk
		and d_date between cast('{YEAR}-08-{DAY}' as date) 
			and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
		and ss_store_sk = s_store_sk
		and ss_item_sk = i_item_sk
		and i_current_price > 50
		and ss_promo_sk = p_promo_sk
		and p_channel_tv = 'N'
		group by s_store_id)
		,
		csr as
		(select  cp_catalog_page_id as catalog_page_id,
		sum(cs_ext_sales_price) as sales,
		sum(coalesce(cr_return_amount, 0)) as returns,
		sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
		from catalog_sales left outer join catalog_returns on
		(cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
		date_dim,
		catalog_page,
		item,
		promotion
		where cs_sold_date_sk = d_date_sk
		and d_date between cast('{YEAR}-08-{DAY}' as date)
			and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
		and cs_catalog_page_sk = cp_catalog_page_sk
		and cs_item_sk = i_item_sk
		and i_current_price > 50
		and cs_promo_sk = p_promo_sk
		and p_channel_tv = 'N'
		group by cp_catalog_page_id)
		,
		wsr as
		(select  web_site_id,
		sum(ws_ext_sales_price) as sales,
		sum(coalesce(wr_return_amt, 0)) as returns,
		sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
		from web_sales left outer join web_returns on
		(ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
		date_dim,
		web_site,
		item,
		promotion
		where ws_sold_date_sk = d_date_sk
		and d_date between cast('{YEAR}-08-{DAY}' as date)
			and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
		and ws_web_site_sk = web_site_sk
		and ws_item_sk = i_item_sk
		and i_current_price > 50
		and ws_promo_sk = p_promo_sk
		and p_channel_tv = 'N'
		group by web_site_id)
		select  channel
		, id
		, sum(sales) as sales
		, sum(returns) as returns
		, sum(profit) as profit
		from 
		(select 'store channel' as channel
		, 'store' || store_id as id
		, sales
		, returns
		, profit
		from   ssr
		union all
		select 'catalog channel' as channel
		, 'catalog_page' || catalog_page_id as id
		, sales
		, returns
		, profit
		from  csr
		union all
		select 'web channel' as channel
		, 'web_site' || web_site_id as id
		, sales
		, returns
		, profit
		from   wsr
		) x
		group by channel, id with rollup
		order by channel is not null, channel
		,id is not null, id
		limit 100""",
		'DBMS': {
			'MariaDB': """with total as (with ssr as
				(select  s_store_id as store_id,
				sum(ss_ext_sales_price) as sales,
				sum(coalesce(sr_return_amt, 0)) as returns_angepasst,
				sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
				from store_sales left outer join store_returns on
				(ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
				date_dim,
				store,
				item,
				promotion
				where ss_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date) 
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ss_store_sk = s_store_sk
				and ss_item_sk = i_item_sk
				and i_current_price > 50
				and ss_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by s_store_id)
				,
				csr as
				(select  cp_catalog_page_id as catalog_page_id,
				sum(cs_ext_sales_price) as sales,
				sum(coalesce(cr_return_amount, 0)) as returns_angepasst,
				sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
				from catalog_sales left outer join catalog_returns on
				(cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
				date_dim,
				catalog_page,
				item,
				promotion
				where cs_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and cs_catalog_page_sk = cp_catalog_page_sk
				and cs_item_sk = i_item_sk
				and i_current_price > 50
				and cs_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by cp_catalog_page_id)
				,
				wsr as
				(select  web_site_id,
				sum(ws_ext_sales_price) as sales,
				sum(coalesce(wr_return_amt, 0)) as returns_angepasst,
				sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
				from web_sales left outer join web_returns on
				(ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
				date_dim,
				web_site,
				item,
				promotion
				where ws_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ws_web_site_sk = web_site_sk
				and ws_item_sk = i_item_sk
				and i_current_price > 50
				and ws_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by web_site_id)
				select  channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
				from 
				(select 'store channel' as channel
				, 'store' || store_id as id
				, sales
				, returns_angepasst
				, profit
				from   ssr
				union all
				select 'catalog channel' as channel
				, 'catalog_page' || catalog_page_id as id
				, sales
				, returns_angepasst
				, profit
				from  csr
				union all
				select 'web channel' as channel
				, 'web_site' || web_site_id as id
				, sales
				, returns_angepasst
				, profit
				from   wsr
				) x
				group by channel, id with rollup)
				select * from total
				order by channel is not null, channel
				,id is not null, id
				limit 100""",
			'MonetDB': """with ssr as
				(select  s_store_id as store_id,
				sum(ss_ext_sales_price) as sales,
				sum(coalesce(sr_return_amt, 0)) as returns_angepasst,
				sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
				from store_sales left outer join store_returns on
				(ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
				date_dim,
				store,
				item,
				promotion
				where ss_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date) 
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ss_store_sk = s_store_sk
				and ss_item_sk = i_item_sk
				and i_current_price > 50
				and ss_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by s_store_id)
				,
				csr as
				(select  cp_catalog_page_id as catalog_page_id,
				sum(cs_ext_sales_price) as sales,
				sum(coalesce(cr_return_amount, 0)) as returns_angepasst,
				sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
				from catalog_sales left outer join catalog_returns on
				(cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
				date_dim,
				catalog_page,
				item,
				promotion
				where cs_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and cs_catalog_page_sk = cp_catalog_page_sk
				and cs_item_sk = i_item_sk
				and i_current_price > 50
				and cs_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by cp_catalog_page_id)
				,
				wsr as
				(select  web_site_id,
				sum(ws_ext_sales_price) as sales,
				sum(coalesce(wr_return_amt, 0)) as returns_angepasst,
				sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
				from web_sales left outer join web_returns on
				(ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
				date_dim,
				web_site,
				item,
				promotion
				where ws_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ws_web_site_sk = web_site_sk
				and ws_item_sk = i_item_sk
				and i_current_price > 50
				and ws_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by web_site_id)
				select  channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
				from 
				(select 'store channel' as channel
				, 'store' || store_id as id
				, sales
				, returns_angepasst
				, profit
				from   ssr
				union all
				select 'catalog channel' as channel
				, 'catalog_page' || catalog_page_id as id
				, sales
				, returns_angepasst
				, profit
				from  csr
				union all
				select 'web channel' as channel
				, 'web_site' || web_site_id as id
				, sales
				, returns_angepasst
				, profit
				from   wsr
				) x
				group by rollup(channel, id)
				order by channel is not null, channel
				,id is not null, id
				limit 100""",
			'PostgreSQL': """with ssr as
				(select  s_store_id as store_id,
				sum(ss_ext_sales_price) as sales,
				sum(coalesce(sr_return_amt, 0)) as returns_angepasst,
				sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
				from store_sales left outer join store_returns on
				(ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
				date_dim,
				store,
				item,
				promotion
				where ss_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date) 
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ss_store_sk = s_store_sk
				and ss_item_sk = i_item_sk
				and i_current_price > 50
				and ss_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by s_store_id)
				,
				csr as
				(select  cp_catalog_page_id as catalog_page_id,
				sum(cs_ext_sales_price) as sales,
				sum(coalesce(cr_return_amount, 0)) as returns_angepasst,
				sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
				from catalog_sales left outer join catalog_returns on
				(cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
				date_dim,
				catalog_page,
				item,
				promotion
				where cs_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and cs_catalog_page_sk = cp_catalog_page_sk
				and cs_item_sk = i_item_sk
				and i_current_price > 50
				and cs_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by cp_catalog_page_id)
				,
				wsr as
				(select  web_site_id,
				sum(ws_ext_sales_price) as sales,
				sum(coalesce(wr_return_amt, 0)) as returns_angepasst,
				sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
				from web_sales left outer join web_returns on
				(ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
				date_dim,
				web_site,
				item,
				promotion
				where ws_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ws_web_site_sk = web_site_sk
				and ws_item_sk = i_item_sk
				and i_current_price > 50
				and ws_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by web_site_id)
				select  channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
				from 
				(select 'store channel' as channel
				, 'store' || store_id as id
				, sales
				, returns_angepasst
				, profit
				from   ssr
				union all
				select 'catalog channel' as channel
				, 'catalog_page' || catalog_page_id as id
				, sales
				, returns_angepasst
				, profit
				from  csr
				union all
				select 'web channel' as channel
				, 'web_site' || web_site_id as id
				, sales
				, returns_angepasst
				, profit
				from   wsr
				) x
				group by rollup(channel, id)
				order by channel is not null, channel
				,id is not null, id
				limit 100""",
			'Exasol': """with ssr as
				(select  s_store_id as store_id,
				sum(ss_ext_sales_price) as sales,
				sum(coalesce(sr_return_amt, 0)) as returns_angepasst,
				sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
				from store_sales left outer join store_returns on
				(ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
				date_dim,
				store,
				item,
				promotion
				where ss_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date) 
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ss_store_sk = s_store_sk
				and ss_item_sk = i_item_sk
				and i_current_price > 50
				and ss_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by s_store_id)
				,
				csr as
				(select  cp_catalog_page_id as catalog_page_id,
				sum(cs_ext_sales_price) as sales,
				sum(coalesce(cr_return_amount, 0)) as returns_angepasst,
				sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
				from catalog_sales left outer join catalog_returns on
				(cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
				date_dim,
				catalog_page,
				item,
				promotion
				where cs_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and cs_catalog_page_sk = cp_catalog_page_sk
				and cs_item_sk = i_item_sk
				and i_current_price > 50
				and cs_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by cp_catalog_page_id)
				,
				wsr as
				(select  web_site_id,
				sum(ws_ext_sales_price) as sales,
				sum(coalesce(wr_return_amt, 0)) as returns_angepasst,
				sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
				from web_sales left outer join web_returns on
				(ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
				date_dim,
				web_site,
				item,
				promotion
				where ws_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ws_web_site_sk = web_site_sk
				and ws_item_sk = i_item_sk
				and i_current_price > 50
				and ws_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by web_site_id)
				select  channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
				from 
				(select 'store channel' as channel
				, 'store' || store_id as id
				, sales
				, returns_angepasst
				, profit
				from   ssr
				union all
				select 'catalog channel' as channel
				, 'catalog_page' || catalog_page_id as id
				, sales
				, returns_angepasst
				, profit
				from  csr
				union all
				select 'web channel' as channel
				, 'web_site' || web_site_id as id
				, sales
				, returns_angepasst
				, profit
				from   wsr
				) x
				group by rollup(channel, id)
				order by channel
				,id
				limit 100""",
			'MemSQL': """with ssr as
				(select  s_store_id as store_id,
				sum(ss_ext_sales_price) as sales,
				sum(coalesce(sr_return_amt, 0)) as returns_angepasst,
				sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
				from store_sales left outer join store_returns on
				(ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
				date_dim,
				store,
				item,
				promotion
				where ss_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date) 
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ss_store_sk = s_store_sk
				and ss_item_sk = i_item_sk
				and i_current_price > 50
				and ss_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by s_store_id)
				,
				csr as
				(select  cp_catalog_page_id as catalog_page_id,
				sum(cs_ext_sales_price) as sales,
				sum(coalesce(cr_return_amount, 0)) as returns_angepasst,
				sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
				from catalog_sales left outer join catalog_returns on
				(cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
				date_dim,
				catalog_page,
				item,
				promotion
				where cs_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and cs_catalog_page_sk = cp_catalog_page_sk
				and cs_item_sk = i_item_sk
				and i_current_price > 50
				and cs_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by cp_catalog_page_id)
				,
				wsr as
				(select  web_site_id,
				sum(ws_ext_sales_price) as sales,
				sum(coalesce(wr_return_amt, 0)) as returns_angepasst,
				sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
				from web_sales left outer join web_returns on
				(ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
				date_dim,
				web_site,
				item,
				promotion
				where ws_sold_date_sk = d_date_sk
				and d_date between cast('{YEAR}-08-{DAY}' as date)
					and (cast('{YEAR}-08-{DAY}' as date) + interval '30' day)
				and ws_web_site_sk = web_site_sk
				and ws_item_sk = i_item_sk
				and i_current_price > 50
				and ws_promo_sk = p_promo_sk
				and p_channel_tv = 'N'
				group by web_site_id)
				select  channel
				, id
				, sum(sales) as sales
				, sum(returns_angepasst) as returns_angepasst
				, sum(profit) as profit
				from 
				(select 'store channel' as channel
				, 'store' || store_id as id
				, sales
				, returns_angepasst
				, profit
				from   ssr
				union all
				select 'catalog channel' as channel
				, 'catalog_page' || catalog_page_id as id
				, sales
				, returns_angepasst
				, profit
				from  csr
				union all
				select 'web channel' as channel
				, 'web_site' || web_site_id as id
				, sales
				, returns_angepasst
				, profit
				from   wsr
				) x
				group by rollup(channel, id)
				order by channel
				,id
				limit 100""",
		},
		'parameter':
		{
			'DAY': {
				'type': "integer",
				'range': [1,30]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q81",
		'query': """with customer_total_return as
		(select cr_returning_customer_sk as ctr_customer_sk
		,ca_state as ctr_state, 
		sum(cr_return_amt_inc_tax) as ctr_total_return
		from catalog_returns
		,date_dim
		,customer_address
		where cr_returned_date_sk = d_date_sk 
		and d_year ={YEAR}
		and cr_returning_addr_sk = ca_address_sk 
		group by cr_returning_customer_sk
		,ca_state )
		select  c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
			,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
			,ca_location_type,ctr_total_return
		from customer_total_return ctr1
		,customer_address
		,customer
		where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
		from customer_total_return ctr2 
			where ctr1.ctr_state = ctr2.ctr_state)
		and ca_address_sk = c_current_addr_sk
		and ca_state = '{STATE}'
		and ctr1.ctr_customer_sk = c_customer_sk
		order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
			,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
			,ca_location_type,ctr_total_return
		limit 100""",
		'parameter':
		{
			'STATE': {
				'type': "list",
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","ME","MI","MN","MO","MS","MT","NC","ND","NE","NJ","NM","NV","OH","OK","OR","PA","SC","SD","TN","TX","UT","VA","WA","WI","WV"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q82",
		'query': """ select  i_item_id
		,i_item_desc
		,i_current_price
		from item, inventory, date_dim, store_sales
		where i_current_price between {PRICE} and {PRICE}+30
		and inv_item_sk = i_item_sk
		and d_date_sk=inv_date_sk
		and d_date between cast('{YEAR}-{MONTH}-{DAY}' as date) and (cast('{YEAR}-{MONTH}-{DAY}' as date) + interval '60' day)
		and i_manufact_id in ({MANUFACT_ID1},{MANUFACT_ID2},{MANUFACT_ID3},{MANUFACT_ID4})
		and inv_quantity_on_hand between 100 and 500
		and ss_item_sk = i_item_sk
		group by i_item_id,i_item_desc,i_current_price
		order by i_item_id
		limit 100""",
		'parameter':
		{
			'DAY': {
				'type': "integer",
				'range': [1,24]
			},
			'MANUFACT_ID': {
				'type': "integer",
				'size': 4,
				'range': [1,1000]
			},
			'MONTH': {
				'type': "integer",
				'range': [1,7]
			},
			'PRICE': {
				'type': "integer",
				'range': [0,90]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q83",
		'query': """with sr_items as
		(select i_item_id item_id,
		sum(sr_return_quantity) sr_item_qty
		from store_returns,
		item,
		date_dim
		where sr_item_sk = i_item_sk
		and   d_date    in 
		(select d_date
		from date_dim
		where d_week_seq in 
		(select d_week_seq
		from date_dim
		where d_date in ('{YEAR}-{MONTH1}-{DAY1}','{YEAR}-{MONTH2}-{DAY2}','{YEAR}-{MONTH3}-{DAY3}')))
		and   sr_returned_date_sk   = d_date_sk
		group by i_item_id),
		cr_items as
		(select i_item_id item_id,
		sum(cr_return_quantity) cr_item_qty
		from catalog_returns,
		item,
		date_dim
		where cr_item_sk = i_item_sk
		and   d_date    in 
		(select d_date
		from date_dim
		where d_week_seq in 
		(select d_week_seq
		from date_dim
		where d_date in ('{YEAR}-{MONTH1}-{DAY1}','{YEAR}-{MONTH2}-{DAY2}','{YEAR}-{MONTH3}-{DAY3}')))
		and   cr_returned_date_sk   = d_date_sk
		group by i_item_id),
		wr_items as
		(select i_item_id item_id,
		sum(wr_return_quantity) wr_item_qty
		from web_returns,
		item,
		date_dim
		where wr_item_sk = i_item_sk
		and   d_date    in 
		(select d_date
		from date_dim
		where d_week_seq in 
		(select d_week_seq
		from date_dim
		where d_date in ('{YEAR}-{MONTH1}-{DAY1}','{YEAR}-{MONTH2}-{DAY2}','{YEAR}-{MONTH3}-{DAY3}')))
		and   wr_returned_date_sk   = d_date_sk
		group by i_item_id)
		select  sr_items.item_id
		,sr_item_qty
		,100.0*sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0  sr_dev
		,cr_item_qty
		,100.0*cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0  cr_dev
		,wr_item_qty
		,100.0*wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0  wr_dev
		,(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 average
		from sr_items
		,cr_items
		,wr_items
		where sr_items.item_id=cr_items.item_id
		and sr_items.item_id=wr_items.item_id 
		order by sr_items.item_id
		,sr_item_qty
		limit 100""",
		'parameter':
		{
			'DAY1': {
				'type': "integer",
				'range': [1,24]
			},
			'DAY2': {
				'type': "integer",
				'range': [1,24]
			},
			'DAY3': {
				'type': "integer",
				'range': [1,24]
			},
			'MONTH1': {
				'type': "integer",
				'range': [1,7]
			},
			'MONTH2': {
				'type': "integer",
				'range': [8,10]
			},
			'MONTH3': {
				'type': "integer",
				'range': [11,11]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q84",
		'query': """ select  c_customer_id as customer_id
		, coalesce(c_last_name,'') || ', ' || coalesce(c_first_name,'') as customername
		from customer
		,customer_address
		,customer_demographics
		,household_demographics
		,income_band
		,store_returns
		where ca_city         =  '{CITY}'
		and c_current_addr_sk = ca_address_sk
		and ib_lower_bound   >=  {INCOME}
		and ib_upper_bound   <=  {INCOME} + 50000
		and ib_income_band_sk = hd_income_band_sk
		and cd_demo_sk = c_current_cdemo_sk
		and hd_demo_sk = c_current_hdemo_sk
		and sr_cdemo_sk = cd_demo_sk
		order by c_customer_id
		limit 100""",
		'parameter':
		{
			'CITY': {
				'type': "list",
				'range': ["Aberdeen","Acme","Adams","Adrian","Afton","Albany","Allentown","Allison","Alma","Alpha","Altamont","Amherst","Amity","Andover","Antioch","Appleton","Arcadia","Arcola","Argyle","Arlington","Armstrong","Arthur","Ashland","Ashley","Ashton","Athens","Avery","Avoca","Avon","Bailey","Baker","Barnes","Bartlett","Bath","Bay View","Bayside","Bayview","Bear Creek","Beech Grove","Beechwood","Belfast","Belleview","Belleville","Belmont","Bennett","Benton","Berea","Berlin","Bethany","Bethel","Bethesda","Bethlehem","Big Creek","Birmingham","Blaine","Blair","Blanchard","Bloomingdale","Blue Springs","Bolton","Boyd","Bradford","Bradley","Brandon","Brentwood","Bridgeport","Bristol","Brooklyn","Brooks","Brookville","Brookwood","Brownsville","Brunswick","Bryant","Buckhorn","Buckingham","Buena Vista","Buffalo","Bunker Hill","Burns","Burton","Butler","Byron","Caldwell","Caledonia","Calhoun","California","Cambridge","Camden","Camelot","Canaan","Carlisle","Carlton","Carpenter","Carter","Carthage","Cedar","Cedar Creek","Cedar Grove","Cedar Hill","Center","Center Point","Centerville","Chapel Hill","Charleston","Chatham","Chelsea","Cherokee","Cherry Grove","Cherry Valley","Chester","Chestnut Hill","Chestnut Ridge","Church Hill","Clearview","Clearwater","Clifford","Clifton","Climax","Clinton","Clyde","Coldwater","Colfax","Collinsville","Colonial Heights","Columbia","Columbus","Concord","Conway","Cooper","Cordova","Corinth","Cottonwood","Country Club Estates","Crawford","Crescent","Creston","Crestview","Crossroads","Crystal","Crystal Springs","Cuba","Cumberland","Cunningham","Curtis","Dale","Dallas","Darlington","Decatur","Deer Park","Deerfield","Delmar","Delta","Denmark","Denver","Derby","Dewey","Dover","Doyle","Duncan","Dunlap","Easton","Eastwood","Echo","Edgewater","Edgewood","Edwards","Egypt","Elba","Elgin","Elizabeth","Elkton","Ellisville","Ellsworth","Elm Grove","Elmwood","Empire","Enon","Enterprise","Eureka","Evans","Evansville","Evergreen","Fair Oaks","Fairbanks","Fairfax","Fairfield","Fairmont","Fairmount","Fairview","Farmersville","Farmington","Fayetteville","Ferguson","Ferndale","Fernwood","Fillmore","Fisher","Five Forks","Five Points","Flat Rock","Flatwoods","Flint","Flint Hill","Florence","Floyd","Forest","Forest Hills","Forest Park","Forestville","Foster","Four Points","Fowler","Fox","Frankfort","Franklin","Freedom","Freeman","Freeport","Fremont","Frenchtown","Friendship","Frogtown","Fulton","Galena","Gardner","Garfield","Garrison","Gary","Georgetown","Gilbert","Gilmore","Gladstone","Glencoe","Glendale","Glenville","Glenwood","Globe","Golden","Good Hope","Goshen","Grandview","Granite","Grant","Gravel Hill","Gray","Green Acres","Green Hill","Green Valley","Greenbrier","Greendale","Greenfield","Greenville","Greenwood","Griffin","Guilford","Gum Springs","Guthrie","Hamburg","Hamilton","Hampton","Hardy","Harmon","Harmony","Harper","Harris","Harrisburg","Hartland","Harvey","Hastings","Hawthorne","Hazelwood","Helena","Henry","Hidden Valley","Highland","Highland Park","Hillcrest","Hillsboro","Hillsdale","Hillside","Hilltop","Holiday Hills","Holland","Hollywood","Hopewell","Horton","Houston","Howell","Hubbard","Hunter","Huntington","Huntsville","Hurricane","Hyde Park","Indian Village","Ingleside","Jackson","Jacksonville","Jamestown","Jenkins","Jericho","Jerome","Jimtown","Johnson","Johnsonville","Johnstown","Jones","Jordan","Kelly","Kensington","Kent","Kimball","King","Kingston","Kirkland","Knollwood","La Grange","Lake Forest","Lake View","Lakeland","Lakeside","Lakeview","Lakeville","Lakewood","Lamont","Lancaster","Langdon","Laurel","Lawrence","Lawrenceville","Lebanon","Lee","Leesburg","Leesville","Leland","Lenox","Leon","Lewis","Lewisburg","Lewisville","Liberty","Lincoln","Linden","Lisbon","Little River","Littleton","Lodi","Lone Oak","Lone Pine","Lone Star","Long Branch","Longwood","Louisville","Lucas","Ludlow","Lynn","Macedonia","Macon","Manchester","Mansfield","Maple Grove","Maple Hill","Mapleton","Marietta","Marion","Marshall","Martin","Martinsville","Mason","Maxwell","Mayfield","Maywood","Meadowbrook","Mechanicsburg","Middletown","Midway","Milan","Milford","Millbrook","Milltown","Millwood","Milo","Mineral Springs","Monroe","Montague","Montezuma","Monticello","Montpelier","Montrose","Moore","Morgan","Morgantown","Morris","Morton","Mount Olive","Mount Pleasant","Mount Tabor","Mount Vernon","Mount Zion","Mountain View","Murphy","Murray","Nashville","Nebo","Needmore","New Boston","New Hope","New Salem","New Town","Newark","Newburg","Newport","Newton","Newtown","Nichols","Northwood","Norton","Norwood","Nottingham","Oak Grove","Oak Hill","Oak Ridge","Oakdale","Oakland","Oakley","Oakwood","Omega","Oneida","Orange","Owens","Page","Palmyra","Paradise","Parker","Parkwood","Patterson","Paxton","Payne","Peoria","Perkins","Perry","Peru","Philadelphia","Phillips","Phoenix","Pierce","Pine Grove","Pine Hill","Pine Ridge","Pine Valley","Pinecrest","Pineville","Piney Grove","Pinhook","Pioneer","Pisgah","Plainview","Plainville","Pleasant Grove","Pleasant Hill","Pleasant Valley","Point Pleasant","Pomona","Poplar Grove","Poplar Springs","Post Oak","Powell","Preston","Price","Proctor","Prospect","Prosperity","Providence","Pulaski","Pumpkin Center","Quincy","Randolph","Rankin","Raymond","Red Bank","Red Hill","Red Oak","Red Rock","Redland","Reno","Riceville","Richardson","Richfield","Richland","Richmond","Richville","Ridgeville","Ridgeway","Ridgewood","Riley","River Oaks","Riverdale","Riverside","Riverview","Roberts","Rochester","Rock Hill","Rock Springs","Rockford","Rockland","Rockwood","Rocky Point","Rolling Hills","Roscoe","Rose Hill","Rosebud","Roseville","Rosewood","Rossville","Roxbury","Roy","Royal","Ruby","Ruth","Rutland","Ryan","Saint Clair","Saint George","Saint James","Saint John","Saint Johns","Saint Paul","Salem","San Jose","Sand Hill","Sanford","Saratoga","Sardis","Sawyer","Scotland","Scottsville","Selma","Seneca","Shady Grove","Shamrock","Shannon","Sharon","Shaw","Shawnee","Sheffield","Shelby","Sheridan","Sherman","Sherwood Forest","Shiloh","Shore Acres","Sidney","Siloam","Silver City","Silver Creek","Silver Springs","Simpson","Slabtown","Sleepy Hollow","Smith","Smyrna","Snug Harbor","Somerset","Somerville","Spencer","Spring Grove","Spring Hill","Spring Lake","Spring Valley","Springdale","Springfield","Springhill","Springtown","Springville","Stafford","Star","State Line","Sterling","Stewart","Stony Point","Stratford","Stringtown","Sugar Hill","Sullivan","Sulphur Springs","Summerfield","Summerville","Summit","Sumner","Sunnyside","Sunrise","Sunset Beach","Sunshine","Superior","Sutton","Sycamore","Tabor","Taft","Tanglewood","Texas","The Meadows","Thomas","Thompson","Thompsonville","Three Forks","Tipton","Tracy","Tremont","Trenton","Trinity","Turner","Twin Oaks","Tyler","Tyrone","Union","Union City","Union Hill","Unionville","Unity","Utica","Valley View","Vance","Verona","Victoria","Vienna","Vista","Wakefield","Wallace","Walnut","Walnut Grove","Walton","Ward","Warwick","Washington Heights","Waterford","Waterloo","Waterville","Watkins","Wayland","Wayne","Webb","Welcome","Weldon","Wesley","West End","West Liberty","West Point","Westfield","Westgate","Westminster","Weston","Westport","Westville","Westwood","Wheatland","Whispering Pines","White City","White Hall","White Oak","White Plains","White Rock","Whitesville","Whitney","Wildwood","Willard","Williams","Williamsburg","Williamsville","Willis","Willow","Wilson","Wilton","Winchester","Winfield","Winona","Winslow","Wolf Creek","Woodbine","Woodbury","Woodcrest","Woodland","Woodland Hills","Woodland Park","Woodlawn","Woodrow","Woodruff","Woodside","Woodstock","Woodville","Wright","Wyoming","York","Yorktown","Youngstown"]
			},
			'INCOME': {
				'type': "integer",
				'range': [0,70000]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q85",
		'query': """ select  substr(r_reason_desc,1,20) as reason
		,avg(ws_quantity) avg_ws_quantity
		,avg(wr_refunded_cash) avg_wr_refunded_cash
		,avg(wr_fee) avg_wr_fee
		from web_sales, web_returns, web_page, customer_demographics cd1,
		customer_demographics cd2, customer_address, date_dim, reason 
		where ws_web_page_sk = wp_web_page_sk
		and ws_item_sk = wr_item_sk
		and ws_order_number = wr_order_number
		and ws_sold_date_sk = d_date_sk and d_year = {YEAR}
		and cd1.cd_demo_sk = wr_refunded_cdemo_sk 
		and cd2.cd_demo_sk = wr_returning_cdemo_sk
		and ca_address_sk = wr_refunded_addr_sk
		and r_reason_sk = wr_reason_sk
		and
		(
		(
		cd1.cd_marital_status = '{MS1}'
		and
		cd1.cd_marital_status = cd2.cd_marital_status
		and
		cd1.cd_education_status = '{ES1}'
		and 
		cd1.cd_education_status = cd2.cd_education_status
		and
		ws_sales_price between 100.00 and 150.00
		)
		or
		(
		cd1.cd_marital_status = '{MS2}'
		and
		cd1.cd_marital_status = cd2.cd_marital_status
		and
		cd1.cd_education_status = '{ES2}' 
		and
		cd1.cd_education_status = cd2.cd_education_status
		and
		ws_sales_price between 50.00 and 100.00
		)
		or
		(
		cd1.cd_marital_status = '{MS3}'
		and
		cd1.cd_marital_status = cd2.cd_marital_status
		and
		cd1.cd_education_status = '{ES3}'
		and
		cd1.cd_education_status = cd2.cd_education_status
		and
		ws_sales_price between 150.00 and 200.00
		)
		)
		and
		(
		(
		ca_country = 'United States'
		and
		ca_state in ('{STATE1}', '{STATE2}', '{STATE3}')
		and ws_net_profit between 100 and 200  
		)
		or
		(
		ca_country = 'United States'
		and
		ca_state in ('{STATE4}', '{STATE5}', '{STATE6}')
		and ws_net_profit between 150 and 300  
		)
		or
		(
		ca_country = 'United States'
		and
		ca_state in ('{STATE7}', '{STATE8}', '{STATE9}')
		and ws_net_profit between 50 and 250  
		)
		)
		group by r_reason_desc
		order by substr(r_reason_desc,1,20)
		,avg(ws_quantity)
		,avg(wr_refunded_cash)
		,avg(wr_fee)
		limit 100""",
		'parameter':
		{
			'ES': {
				'type': "list",
				'size': 3,
				'range': ["Primary","Secondary","College","2 yr Degree","4 yr Degree", "Advanced Degree","Unknown"]
			},
			'MS': {
				'type': "list",
				'size': 3,
				'range': ["M","S","D","W","U"]
			},
			'STATE': {
				'type': "list",
				'size': 9,
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","ME","MI","MN","MO","MS","MT","NC","ND","NE","NJ","NM","NV","OH","OK","OR","PA","SC","SD","TN","TX","UT","VA","WA","WI","WV"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q86",
		'query': """ select   
		sum(ws_net_paid) as total_sum
		,i_category
		,i_class
		,grouping(i_category)+grouping(i_class) as lochierarchy
		,rank() over (
		partition by grouping(i_category)+grouping(i_class),
		case when grouping(i_class) = 0 then i_category end 
		order by sum(ws_net_paid) is not null desc, sum(ws_net_paid) desc) as rank_within_parent
		from
		web_sales
		,date_dim       d1
		,item
		where
		d1.d_month_seq between {DMS} and {DMS}+11
		and d1.d_date_sk = ws_sold_date_sk
		and i_item_sk  = ws_item_sk
		group by i_category,i_class with rollup
		order by
		lochierarchy desc,
		case when lochierarchy = 0 then i_category is not null end,
		case when lochierarchy = 0 then i_category end,
		rank_within_parent
		limit 100""",
		'DBMS': {
			'MariaDB': """SELECT *
FROM (
    SELECT   
        SUM(ws_net_paid) AS total_sum,
        i_category,
        i_class,
        CASE WHEN i_category IS NULL THEN 1 ELSE 0 END +
        CASE WHEN i_class IS NULL THEN 1 ELSE 0 END AS lochierarchy,
        RANK() OVER (
            PARTITION BY 
                CASE WHEN i_category IS NULL THEN 1 ELSE 0 END +
                CASE WHEN i_class IS NULL THEN 1 ELSE 0 END,
            CASE WHEN i_class IS NOT NULL THEN i_category END
            ORDER BY SUM(ws_net_paid) DESC
        ) AS rank_within_parent
    FROM 
        web_sales
    JOIN date_dim AS d1 ON d1.d_date_sk = ws_sold_date_sk
    JOIN item ON i_item_sk = ws_item_sk
    WHERE 
        d1.d_month_seq BETWEEN {DMS} AND {DMS} + 11
    GROUP BY i_category, i_class WITH ROLLUP
) AS aggregated_data
ORDER BY
    lochierarchy DESC,
    CASE WHEN lochierarchy = 0 THEN i_category is not null END,
    CASE WHEN lochierarchy = 0 THEN i_category END,
    rank_within_parent
LIMIT 100""",
			'MonetDB': """with tmp as (
					select
					sum(ws_net_paid) as total_sum
					,i_category
					,i_class
					,grouping(i_category)+grouping(i_class) as lochierarchy
					,rank() over (
					partition by grouping(i_category)+grouping(i_class),
					case when grouping(i_class) = 0 then i_category end 
					order by sum(ws_net_paid) desc) as rank_within_parent
					from
					web_sales
					,date_dim       d1
					,item
					where
					d1.d_month_seq between {DMS} and {DMS}+11
					and d1.d_date_sk = ws_sold_date_sk
					and i_item_sk  = ws_item_sk
					group by rollup(i_category,i_class)
				)
				select * from tmp
				order by
				lochierarchy desc,
				case when lochierarchy = 0 then i_category is not null end,
				case when lochierarchy = 0 then i_category end,
				rank_within_parent
				limit 100""",
			'PostgreSQL': """ select   
				sum(ws_net_paid) as total_sum
				,i_category
				,i_class
				,grouping(i_category)+grouping(i_class) as lochierarchy
				,rank() over (
				partition by grouping(i_category)+grouping(i_class),
				case when grouping(i_class) = 0 then i_category end 
				order by sum(ws_net_paid) desc) as rank_within_parent
				from
				web_sales
				,date_dim       d1
				,item
				where
				d1.d_month_seq between {DMS} and {DMS}+11
				and d1.d_date_sk = ws_sold_date_sk
				and i_item_sk  = ws_item_sk
				group by rollup(i_category,i_class)
				order by
				lochierarchy desc,
				case when grouping(i_category)+grouping(i_class) = 0 then i_category is not null end,
				case when grouping(i_category)+grouping(i_class) = 0 then i_category end,
				rank_within_parent
				limit 100""",
			'Exasol': """ select   
				sum(ws_net_paid) as total_sum
				,i_category
				,i_class
				,grouping(i_category)+grouping(i_class) as lochierarchy
				,rank() over (
				partition by grouping(i_category)+grouping(i_class),
				case when grouping(i_class) = 0 then i_category end 
				order by sum(ws_net_paid) desc) as rank_within_parent
				from
				web_sales
				,date_dim       d1
				,item
				where
				d1.d_month_seq between {DMS} and {DMS}+11
				and d1.d_date_sk = ws_sold_date_sk
				and i_item_sk  = ws_item_sk
				group by rollup(i_category,i_class)
				order by
				lochierarchy desc,
				case when lochierarchy = 0 then i_category end,
				rank_within_parent
				limit 100""",
			'MemSQL': """ select   
				sum(ws_net_paid) as total_sum
				,i_category
				,i_class
				,grouping(i_category)+grouping(i_class) as lochierarchy
				,rank() over (
				partition by grouping(i_category)+grouping(i_class),
				case when grouping(i_class) = 0 then i_category end 
				order by sum(ws_net_paid) desc) as rank_within_parent
				from
				web_sales
				,date_dim       d1
				,item
				where
				d1.d_month_seq between {DMS} and {DMS}+11
				and d1.d_date_sk = ws_sold_date_sk
				and i_item_sk  = ws_item_sk
				group by rollup(i_category,i_class)
				order by
				lochierarchy desc,
				case when lochierarchy = 0 then i_category end,
				rank_within_parent
				limit 100""",
		},
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q87",
		'query': """select count(*) as counter
		from ((select distinct c_last_name, c_first_name, d_date
		from store_sales, date_dim, customer
		where store_sales.ss_sold_date_sk = date_dim.d_date_sk
		and store_sales.ss_customer_sk = customer.c_customer_sk
		and d_month_seq between {DMS} and {DMS}+11)
		except
		(select distinct c_last_name, c_first_name, d_date
		from catalog_sales, date_dim, customer
		where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
		and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
		and d_month_seq between {DMS} and {DMS}+11)
		except
		(select distinct c_last_name, c_first_name, d_date
		from web_sales, date_dim, customer
		where web_sales.ws_sold_date_sk = date_dim.d_date_sk
		and web_sales.ws_bill_customer_sk = customer.c_customer_sk
		and d_month_seq between {DMS} and {DMS}+11)
		) cool_cust
		""",
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q88",
		'query': """select  *
		from
		(select count(*) h8_30_to_9
		from store_sales, household_demographics , time_dim, store
		where ss_sold_time_sk = time_dim.t_time_sk   
		and ss_hdemo_sk = household_demographics.hd_demo_sk 
		and ss_store_sk = s_store_sk
		and time_dim.t_hour = 8
		and time_dim.t_minute >= 30
		and ((household_demographics.hd_dep_count = {HOUR1} and household_demographics.hd_vehicle_count<={HOUR1}+2) or
		(household_demographics.hd_dep_count = {HOUR2} and household_demographics.hd_vehicle_count<={HOUR2}+2) or
		(household_demographics.hd_dep_count = {HOUR3} and household_demographics.hd_vehicle_count<={HOUR3}+2)) 
		and store.s_store_name = 'ese') s1,
		(select count(*) h9_to_9_30 
		from store_sales, household_demographics , time_dim, store
		where ss_sold_time_sk = time_dim.t_time_sk
		and ss_hdemo_sk = household_demographics.hd_demo_sk
		and ss_store_sk = s_store_sk 
		and time_dim.t_hour = 9 
		and time_dim.t_minute < 30
		and ((household_demographics.hd_dep_count = {HOUR1} and household_demographics.hd_vehicle_count<={HOUR1}+2) or
		(household_demographics.hd_dep_count = {HOUR2} and household_demographics.hd_vehicle_count<={HOUR2}+2) or
		(household_demographics.hd_dep_count = {HOUR3} and household_demographics.hd_vehicle_count<={HOUR3}+2))
		and store.s_store_name = 'ese') s2,
		(select count(*) h9_30_to_10 
		from store_sales, household_demographics , time_dim, store
		where ss_sold_time_sk = time_dim.t_time_sk
		and ss_hdemo_sk = household_demographics.hd_demo_sk
		and ss_store_sk = s_store_sk
		and time_dim.t_hour = 9
		and time_dim.t_minute >= 30
		and ((household_demographics.hd_dep_count = {HOUR1} and household_demographics.hd_vehicle_count<={HOUR1}+2) or
		(household_demographics.hd_dep_count = {HOUR2} and household_demographics.hd_vehicle_count<={HOUR2}+2) or
		(household_demographics.hd_dep_count = {HOUR3} and household_demographics.hd_vehicle_count<={HOUR3}+2))
		and store.s_store_name = 'ese') s3,
		(select count(*) h10_to_10_30
		from store_sales, household_demographics , time_dim, store
		where ss_sold_time_sk = time_dim.t_time_sk
		and ss_hdemo_sk = household_demographics.hd_demo_sk
		and ss_store_sk = s_store_sk
		and time_dim.t_hour = 10 
		and time_dim.t_minute < 30
		and ((household_demographics.hd_dep_count = {HOUR1} and household_demographics.hd_vehicle_count<={HOUR1}+2) or
		(household_demographics.hd_dep_count = {HOUR2} and household_demographics.hd_vehicle_count<={HOUR2}+2) or
		(household_demographics.hd_dep_count = {HOUR3} and household_demographics.hd_vehicle_count<={HOUR3}+2))
		and store.s_store_name = 'ese') s4,
		(select count(*) h10_30_to_11
		from store_sales, household_demographics , time_dim, store
		where ss_sold_time_sk = time_dim.t_time_sk
		and ss_hdemo_sk = household_demographics.hd_demo_sk
		and ss_store_sk = s_store_sk
		and time_dim.t_hour = 10 
		and time_dim.t_minute >= 30
		and ((household_demographics.hd_dep_count = {HOUR1} and household_demographics.hd_vehicle_count<={HOUR1}+2) or
		(household_demographics.hd_dep_count = {HOUR2} and household_demographics.hd_vehicle_count<={HOUR2}+2) or
		(household_demographics.hd_dep_count = {HOUR3} and household_demographics.hd_vehicle_count<={HOUR3}+2))
		and store.s_store_name = 'ese') s5,
		(select count(*) h11_to_11_30
		from store_sales, household_demographics , time_dim, store
		where ss_sold_time_sk = time_dim.t_time_sk
		and ss_hdemo_sk = household_demographics.hd_demo_sk
		and ss_store_sk = s_store_sk 
		and time_dim.t_hour = 11
		and time_dim.t_minute < 30
		and ((household_demographics.hd_dep_count = {HOUR1} and household_demographics.hd_vehicle_count<={HOUR1}+2) or
		(household_demographics.hd_dep_count = {HOUR2} and household_demographics.hd_vehicle_count<={HOUR2}+2) or
		(household_demographics.hd_dep_count = {HOUR3} and household_demographics.hd_vehicle_count<={HOUR3}+2))
		and store.s_store_name = 'ese') s6,
		(select count(*) h11_30_to_12
		from store_sales, household_demographics , time_dim, store
		where ss_sold_time_sk = time_dim.t_time_sk
		and ss_hdemo_sk = household_demographics.hd_demo_sk
		and ss_store_sk = s_store_sk
		and time_dim.t_hour = 11
		and time_dim.t_minute >= 30
		and ((household_demographics.hd_dep_count = {HOUR1} and household_demographics.hd_vehicle_count<={HOUR1}+2) or
		(household_demographics.hd_dep_count = {HOUR2} and household_demographics.hd_vehicle_count<={HOUR2}+2) or
		(household_demographics.hd_dep_count = {HOUR3} and household_demographics.hd_vehicle_count<={HOUR3}+2))
		and store.s_store_name = 'ese') s7,
		(select count(*) h12_to_12_30
		from store_sales, household_demographics , time_dim, store
		where ss_sold_time_sk = time_dim.t_time_sk
		and ss_hdemo_sk = household_demographics.hd_demo_sk
		and ss_store_sk = s_store_sk
		and time_dim.t_hour = 12
		and time_dim.t_minute < 30
		and ((household_demographics.hd_dep_count = {HOUR1} and household_demographics.hd_vehicle_count<={HOUR1}+2) or
		(household_demographics.hd_dep_count = {HOUR2} and household_demographics.hd_vehicle_count<={HOUR2}+2) or
		(household_demographics.hd_dep_count = {HOUR3} and household_demographics.hd_vehicle_count<={HOUR3}+2))
		and store.s_store_name = 'ese') s8
		""",
		'parameter':
		{
			'HOUR': {
				'type': "integer",
				'size': 3,
				'range': [-1,4]
			},
			'STORE': {
				'type': "list",
				'range': ["Unknown"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q89",
		'query': """select *
		from(
		select i_category, i_class, i_brand,
		s_store_name, s_company_name,
		d_moy,
		sum(ss_sales_price) sum_sales,
		avg(sum(ss_sales_price)) over
		(partition by i_category, i_brand, s_store_name, s_company_name)
		avg_monthly_sales
		from item, store_sales, date_dim, store
		where ss_item_sk = i_item_sk and
		ss_sold_date_sk = d_date_sk and
		ss_store_sk = s_store_sk and
		d_year in ({YEAR}) and
		((i_category in ('{CAT1}','{CAT2}','{CAT3}') and
		i_class in ('{CLASS1}','{CLASS2}','{CLASS3}')
		)
		or (i_category in ('{CAT4}','{CAT5}','{CAT6}') and
		i_class in ('{CLASS4}','{CLASS5}','{CLASS6}') 
		))
		group by i_category, i_class, i_brand,
		s_store_name, s_company_name, d_moy) tmp1
		where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
		order by sum_sales - avg_monthly_sales, s_store_name
		limit 100""",
		'parameter':
		{
			'CAT': {
				'type': "list",
				'size': 6,
				'range': ["Books","Children","Electronics","Home","Jewelry","Men","Music","Shoes","Sports","Women"]
			},
			'CLASS': {
				'type': "list",
				'size': 6,
				'range': ["accent","accessories","archery","arts","athletic","athletic","shoes","audio","automotive","baseball","basketball","bathroom","bedding","birdal","blinds/shades","bracelets","business","camcorders","cameras","camping","classical","computers","consignment","cooking","costume","country","curtains/drapes","custom","decor","diamonds","disk","drives","dresses","dvd/vcr","players","earings","entertainments","estate","fiction","fishing","fitness","flatware","football","fragrances","furniture","glassware","gold","golf","guns","history","hockey","home","repair","infants","jewelry","boxes","karoke","kids","lighting","loose","stones","maternity","mattresses","memory","mens","mens","watch","monitors","musical","mystery","newborn","optics","outdoor","paint","pants","parenting","pendants","personal","pools","pop","portable","reference","rings","rock","romance","rugs","sailing","scanners","school-uniforms","science","self-help","semi-precious","shirts","sports","sports-apparel","stereo","swimwear","tables","televisions","tennis","toddlers","travel","wallpaper","wireless","womens","womens watch"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q90",
		'query': """select cast(amc as decimal(15,4))/cast(pmc as decimal(15,4)) am_pm_ratio
		from ( select count(*) amc
		from web_sales, household_demographics , time_dim, web_page
		where ws_sold_time_sk = time_dim.t_time_sk
		and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
		and ws_web_page_sk = web_page.wp_web_page_sk
		and time_dim.t_hour between {HOUR_AM} and {HOUR_AM}+1
		and household_demographics.hd_dep_count = {DEPCNT}
		and web_page.wp_char_count between 5000 and 5200) at,
		( select count(*) pmc
		from web_sales, household_demographics , time_dim, web_page
		where ws_sold_time_sk = time_dim.t_time_sk
		and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
		and ws_web_page_sk = web_page.wp_web_page_sk
		and time_dim.t_hour between {HOUR_PM} and {HOUR_PM}+1
		and household_demographics.hd_dep_count = {DEPCNT}
		and web_page.wp_char_count between 5000 and 5200) pt
		order by am_pm_ratio
		limit 100""",
		'parameter':
		{
			'DEPCNT': {
				'type': "integer",
				'range': [0,9]
			},
			'HOUR_AM': {
				'type': "integer",
				'range': [6,12]
			},
			'HOUR_PM': {
				'type': "integer",
				'range': [13,21]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q91",
		'query': """select  
		cc_call_center_id Call_Center,
		cc_name Call_Center_Name,
		cc_manager Manager,
		sum(cr_net_loss) Returns_Loss
		from
		call_center,
		catalog_returns,
		date_dim,
		customer,
		customer_address,
		customer_demographics,
		household_demographics
		where
		cr_call_center_sk       = cc_call_center_sk
		and     cr_returned_date_sk     = d_date_sk
		and     cr_returning_customer_sk= c_customer_sk
		and     cd_demo_sk              = c_current_cdemo_sk
		and     hd_demo_sk              = c_current_hdemo_sk
		and     ca_address_sk           = c_current_addr_sk
		and     d_year                  = {YEAR} 
		and     d_moy                   = {MONTH}
		and     ( (cd_marital_status       = 'M' and cd_education_status     = 'Unknown')
		or(cd_marital_status       = 'W' and cd_education_status     = 'Advanced Degree'))
		and     hd_buy_potential like '{BUY_POTENTIAL}%'
		and     ca_gmt_offset           = {GMT}
		group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status
		order by sum(cr_net_loss) desc""",
		'parameter':
		{
			'BUY_POTENTIAL': {
				'type': "list",
				'range': ["1001-5000",">10000","501-1000","0-500","Unknown","5001-10000"]
			},
			'GMT': {
				'type': "list",
				'range': ["-6","-7"]
			},
			'MONTH': {
				'type': "integer",
				'range': [11,12]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q92",
		'query': """ select  
		sum(ws_ext_discount_amt)  as Excess_Discount_Amount 
		from 
		web_sales 
		,item 
		,date_dim
		where
		i_manufact_id = {IMID}
		and i_item_sk = ws_item_sk 
		and d_date between '{YEAR}-{MONTH}-01' and 
		(cast('{YEAR}-{MONTH}-01' as date) + interval '90' day)
		and d_date_sk = ws_sold_date_sk 
		and ws_ext_discount_amt  
		> ( 
		SELECT 
		1.3 * avg(ws_ext_discount_amt) 
		FROM 
		web_sales 
		,date_dim
		WHERE 
		ws_item_sk = i_item_sk 
		and d_date between '{YEAR}-{MONTH}-01' and
			(cast('{YEAR}-{MONTH}-01' as date) + interval '90' day)
		and d_date_sk = ws_sold_date_sk 
		) 
		order by sum(ws_ext_discount_amt)
		limit 100""",
		'parameter':
		{
			'IMID': {
				'type': "integer",
				'range': [1,1000]
			},
			'MONTH': {
				'type': "integer",
				'range': [1,4]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q93",
		'query': """with total as (select  ss_customer_sk
		,sum(act_sales) sumsales
		from (select ss_item_sk
			,ss_ticket_number
			,ss_customer_sk
			,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
					else (ss_quantity*ss_sales_price) end act_sales
		from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
					and sr_ticket_number = ss_ticket_number)
			,reason
		where sr_reason_sk = r_reason_sk
		and r_reason_desc = '{REASON}') t
		group by ss_customer_sk)
		select * from total
		order by sumsales is not null, sumsales, ss_customer_sk
		limit 100""",
		'parameter':
		{
			'REASON': {
				'type': "list",
				'range': ["Package was damaged","Stopped working","Did not get it on time","Not the product that was ordred","Parts missing","Does not work with a product that I have","Gift exchange","Did not like the color","Did not like the model","Did not like the make","Did not like the warranty","No service location in my area","Found a better price in a store","Found a better extended warranty in a store","Not working any more","Did not fit","Wrong size","Lost my job","unauthoized purchase","duplicate purchase","its is a boy","it is a girl","reason 23","reason 24","reason 25","reason 26","reason 27","reason 28","reason 29","reason 31","reason 32","reason 33","reason 34","reason 35"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q94",
		'query': """ select  
		count(distinct ws_order_number) as "order count"
		,sum(ws_ext_ship_cost) as "total shipping cost"
		,sum(ws_net_profit) as "total net profit"
		from
		web_sales ws1
		,date_dim
		,customer_address
		,web_site
		where
		d_date between '{YEAR}-{MONTH}-01' and 
		(cast('{YEAR}-{MONTH}-01' as date) + interval '60' day)
		and ws1.ws_ship_date_sk = d_date_sk
		and ws1.ws_ship_addr_sk = ca_address_sk
		and ca_state = '{STATE}'
		and ws1.ws_web_site_sk = web_site_sk
		and web_company_name = 'pri'
		and exists (select *
		from web_sales ws2
		where ws1.ws_order_number = ws2.ws_order_number
		and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
		and not exists(select *
		from web_returns wr1
		where ws1.ws_order_number = wr1.wr_order_number)
		order by count(distinct ws_order_number)
		limit 100""",
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [2,5]
			},
			'STATE': {
				'type': "list",
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","ME","MI","MN","MO","MS","MT","NC","ND","NE","NJ","NM","NV","OH","OK","OR","PA","SC","SD","TN","TX","UT","VA","WA","WI","WV"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1999,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q95",
		'query': """with ws_wh as
		(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
		from web_sales ws1,web_sales ws2
		where ws1.ws_order_number = ws2.ws_order_number
		and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
		select  
		count(distinct ws_order_number) as "order count"
		,sum(ws_ext_ship_cost) as "total shipping cost"
		,sum(ws_net_profit) as "total net profit"
		from
		web_sales ws1
		,date_dim
		,customer_address
		,web_site
		where
		d_date between '{YEAR}-{MONTH}-01' and 
		(cast('{YEAR}-{MONTH}-01' as date) + interval '60' day)
		and ws1.ws_ship_date_sk = d_date_sk
		and ws1.ws_ship_addr_sk = ca_address_sk
		and ca_state = '{STATE}'
		and ws1.ws_web_site_sk = web_site_sk
		and web_company_name = 'pri'
		and ws1.ws_order_number in (select ws_order_number
			from ws_wh)
		and ws1.ws_order_number in (select wr_order_number
			from web_returns,ws_wh
			where wr_order_number = ws_wh.ws_order_number)
		order by count(distinct ws_order_number)
		limit 100""",
		'parameter':
		{
			'MONTH': {
				'type': "integer",
				'range': [2,5]
			},
			'STATE': {
				'type': "list",
				'range': ["AK","AL","AR","AZ","CA","CO","CT","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","ME","MI","MN","MO","MS","MT","NC","ND","NE","NJ","NM","NV","OH","OK","OR","PA","SC","SD","TN","TX","UT","VA","WA","WI","WV"]
			},
			'YEAR': {
				'type': "integer",
				'range': [1999,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q96",
		'query': """ select count(*) counter
		from store_sales
		,household_demographics 
		,time_dim, store
		where ss_sold_time_sk = time_dim.t_time_sk   
		and ss_hdemo_sk = household_demographics.hd_demo_sk 
		and ss_store_sk = s_store_sk
		and time_dim.t_hour = {HOUR}
		and time_dim.t_minute >= 30
		and household_demographics.hd_dep_count = {DEPCNT}
		and store.s_store_name = 'ese'
		order by count(*)
		limit 100""",
		'parameter':
		{
			'DEPCNT': {
				'type': "integer",
				'range': [0,9]
			},
			'HOUR': {
				'type': "list",
				'range': ["20","15","16","8"]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q97",
		'query': """with ssci as (
		select ss_customer_sk customer_sk
		,ss_item_sk item_sk
		from store_sales,date_dim
		where ss_sold_date_sk = d_date_sk
		and d_month_seq between {DMS} and {DMS} + 11
		group by ss_customer_sk
		,ss_item_sk),
		csci as(
		select cs_bill_customer_sk customer_sk
		,cs_item_sk item_sk
		from catalog_sales,date_dim
		where cs_sold_date_sk = d_date_sk
		and d_month_seq between {DMS} and {DMS} + 11
		group by cs_bill_customer_sk
		,cs_item_sk)
		select sum(case when ssci.customer_sk is not null and csci.customer_sk is null then 1 else 0 end) store_only
		,sum(case when ssci.customer_sk is null and csci.customer_sk is not null then 1 else 0 end) catalog_only
		,sum(case when ssci.customer_sk is not null and csci.customer_sk is not null then 1 else 0 end) store_and_catalog
		from ssci full outer join csci on (ssci.customer_sk=csci.customer_sk
			and ssci.item_sk = csci.item_sk)
		limit 100""",
		'DBMS': {
		'MySQL': """WITH ssci AS (
    SELECT 
        ss_customer_sk AS customer_sk,
        ss_item_sk AS item_sk
    FROM store_sales, date_dim
    WHERE ss_sold_date_sk = d_date_sk
      AND d_month_seq BETWEEN {DMS} AND {DMS} + 11
    GROUP BY ss_customer_sk, ss_item_sk
),
csci AS (
    SELECT 
        cs_bill_customer_sk AS customer_sk,
        cs_item_sk AS item_sk
    FROM catalog_sales, date_dim
    WHERE cs_sold_date_sk = d_date_sk
      AND d_month_seq BETWEEN {DMS} AND {DMS} + 11
    GROUP BY cs_bill_customer_sk, cs_item_sk
),
combined AS (
    SELECT 
        customer_sk, 
        item_sk,
        1 AS is_store,
        0 AS is_catalog
    FROM ssci
    UNION ALL
    SELECT 
        customer_sk, 
        item_sk,
        0 AS is_store,
        1 AS is_catalog
    FROM csci
)
SELECT
    SUM(CASE WHEN is_store = 1 AND is_catalog = 0 THEN 1 ELSE 0 END) AS store_only,
    SUM(CASE WHEN is_store = 0 AND is_catalog = 1 THEN 1 ELSE 0 END) AS catalog_only,
    SUM(CASE WHEN is_store = 1 AND is_catalog = 1 THEN 1 ELSE 0 END) AS store_and_catalog
FROM (
    SELECT 
        customer_sk,
        item_sk,
        MAX(is_store) AS is_store,
        MAX(is_catalog) AS is_catalog
    FROM combined
    GROUP BY customer_sk, item_sk
) AS summary
LIMIT 100""",
		},
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q98",
		'query': """select i_item_id
		,i_item_desc 
		,i_category 
		,i_class 
		,i_current_price
		,sum(ss_ext_sales_price) as itemrevenue 
		,sum(ss_ext_sales_price)*100./sum(sum(ss_ext_sales_price)) over
		(partition by i_class) as revenueratio
		from 
		store_sales
		,item 
		,date_dim
		where 
		ss_item_sk = i_item_sk 
		and i_category in ('{CATEGORY1}', '{CATEGORY2}', '{CATEGORY3}')
		and ss_sold_date_sk = d_date_sk
		and d_date between cast('{YEAR}-{MONTH}-01' as date) 
			and (cast('{YEAR}-{MONTH}-01' as date) + interval '30' day)
		group by 
		i_item_id
		,i_item_desc 
		,i_category
		,i_class
		,i_current_price
		order by 
		i_category
		,i_class
		,i_item_id
		,i_item_desc
		,revenueratio""",
		'parameter':
		{
			'CATEGORY': {
				'type': "list",
				'size': 3,
				'range': ["Books","Children","Electronics","Home","Jewelry","Men","Music","Shoes","Sports","Women"]
			},
			'MONTH': {
				'type': "integer",
				'range': [1,7]
			},
			'YEAR': {
				'type': "integer",
				'range': [1998,2002]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	},
	{
		'title': "TPC-DS Q99",
		'query': """select
		substr(w_warehouse_name,1,20) as warehouse_name
		,sm_type
		,cc_name
		,sum(case when (cs_ship_date_sk - cs_sold_date_sk <= 30 ) then 1 else 0 end)  as "30 days" 
		,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 30) and 
			(cs_ship_date_sk - cs_sold_date_sk <= 60) then 1 else 0 end )  as "31-60 days" 
		,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 60) and 
			(cs_ship_date_sk - cs_sold_date_sk <= 90) then 1 else 0 end)  as "61-90 days" 
		,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 90) and
			(cs_ship_date_sk - cs_sold_date_sk <= 120) then 1 else 0 end)  as "91-120 days" 
		,sum(case when (cs_ship_date_sk - cs_sold_date_sk  > 120) then 1 else 0 end)  as ">120 days" 
		from
		catalog_sales
		,warehouse
		,ship_mode
		,call_center
		,date_dim
		where
		d_month_seq between {DMS} and {DMS} + 11
		and cs_ship_date_sk   = d_date_sk
		and cs_warehouse_sk   = w_warehouse_sk
		and cs_ship_mode_sk   = sm_ship_mode_sk
		and cs_call_center_sk = cc_call_center_sk
		group by
		substr(w_warehouse_name,1,20)
		,sm_type
		,cc_name
		order by substr(w_warehouse_name,1,20)
		,sm_type
		,cc_name
		limit 100""",
		'parameter':
		{
			'DMS': {
				'type': "integer",
				'range': [1176,1224]
			}
		},
		'active': True,
		'numWarmup': 0,
		'numCooldown': 0,
		'numRun': 1,
		'timer':
		{
			'datatransfer':
			{
				'active': True,
				'sorted': True,
				'compare': 'result',
				'store': [],
				'precision': 0,
			},
			'connection':
			{
				'active': True,
			}
		}
	}
	]
}